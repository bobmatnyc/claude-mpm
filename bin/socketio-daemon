#!/usr/bin/env python3
"""
Socket.IO Daemon CLI
====================

Command-line interface for managing the Socket.IO daemon server.
This script provides a clean interface to the SocketIODaemonManager service.

Usage:
    socketio-daemon {start|stop|restart|status}

Commands:
    start   - Start the Socket.IO server as a daemon
    stop    - Stop the running daemon server
    restart - Restart the daemon server
    status  - Show detailed status information
"""

import json
import sys
from pathlib import Path

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from claude_mpm.services.infrastructure.daemon_manager import SocketIODaemonManager


def print_status(status_info):
    """Print formatted status information."""
    if status_info["running"]:
        print(f"Socket.IO daemon server is running (PID: {status_info['pid']})")
        print(f"PID file: {status_info['pid_file']}")

        if status_info.get("port_accessible"):
            print(
                f"‚úÖ Server is listening on {status_info['host']}:{status_info['port']}"
            )
        else:
            print(
                f"‚ö†Ô∏è  WARNING: Server process exists but port {status_info['port']} is not accessible"
            )

        print(f"üîß Management style: {status_info['management_style']}")

        if status_info.get("conflict_detected"):
            print(f"\n‚ö†Ô∏è  POTENTIAL CONFLICT: Another server detected")
            print(f"   Conflicting server: {status_info['conflicting_server']}")
            print(f"   Use 'socketio_server_manager.py diagnose' to resolve")

        print(f"\nüîß Management Commands:")
        print(f"   ‚Ä¢ Stop: {sys.argv[0]} stop")
        print(f"   ‚Ä¢ Restart: {sys.argv[0]} restart")

    else:
        print("Socket.IO daemon server is not running")
        print(f"\nüîß Start Commands:")
        print(f"   ‚Ä¢ Daemon: {sys.argv[0]} start")
        print(f"   ‚Ä¢ HTTP-managed: socketio_server_manager.py start")


def main():
    """Main entry point."""
    if len(sys.argv) < 2:
        print("Usage: socketio-daemon {start|stop|restart|status}")
        print("\nCommands:")
        print("  start   - Start the Socket.IO server as a daemon")
        print("  stop    - Stop the running daemon server")
        print("  restart - Restart the daemon server")
        print("  status  - Show detailed status information")
        sys.exit(1)

    command = sys.argv[1].lower()
    daemon_manager = SocketIODaemonManager()

    try:
        if command == "start":
            if daemon_manager.start():
                print("Socket.IO server started successfully.")
                status_info = daemon_manager.status()
                print(f"PID file: {status_info['pid_file']}")
                print(f"Log file: {status_info['log_file']}")
            else:
                print("Failed to start Socket.IO server.")
                sys.exit(1)

        elif command == "stop":
            if daemon_manager.stop():
                print("Socket.IO server stopped successfully.")
            else:
                print("Failed to stop Socket.IO server or server was not running.")

        elif command == "restart":
            if daemon_manager.restart():
                print("Socket.IO server restarted successfully.")
            else:
                print("Failed to restart Socket.IO server.")
                sys.exit(1)

        elif command == "status":
            status_info = daemon_manager.status()
            print_status(status_info)

        else:
            print(f"Unknown command: {command}")
            print("Usage: socketio-daemon {start|stop|restart|status}")
            sys.exit(1)

    except KeyboardInterrupt:
        print("\nOperation cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
