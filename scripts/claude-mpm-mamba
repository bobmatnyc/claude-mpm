#!/usr/bin/env bash
# Claude MPM executable wrapper with Mamba/Conda environment management

# Disable telemetry by default
export DISABLE_TELEMETRY=1

# Get the directory where this script is located, following symlinks
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink
done
SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
SRC_DIR="$PROJECT_ROOT/src"
ENV_FILE="$PROJECT_ROOT/environment.yml"
ENV_NAME="claude-mpm"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_debug() {
    if [[ "$CLAUDE_MPM_DEBUG" == "1" ]]; then
        echo -e "${BLUE}[DEBUG]${NC} $1"
    fi
}

# Function to detect conda/mamba installation
detect_conda() {
    # Check for mamba first (preferred)
    if command -v mamba &> /dev/null; then
        CONDA_CMD="mamba"
        print_info "Using Mamba for environment management"
        return 0
    elif command -v conda &> /dev/null; then
        CONDA_CMD="conda"
        print_info "Using Conda for environment management"
        return 0
    elif command -v micromamba &> /dev/null; then
        CONDA_CMD="micromamba"
        print_info "Using Micromamba for environment management"
        return 0
    else
        return 1
    fi
}

# Function to initialize conda/mamba for bash if needed
init_conda() {
    # Check if conda is already initialized in current shell
    if [[ -z "$CONDA_DEFAULT_ENV" ]]; then
        # Try common conda installation locations
        CONDA_BASES=(
            "$HOME/mambaforge"
            "$HOME/miniforge3"
            "$HOME/miniconda3"
            "$HOME/anaconda3"
            "/opt/conda"
            "/usr/local/conda"
            "$CONDA_PREFIX"
        )
        
        for base in "${CONDA_BASES[@]}"; do
            if [[ -f "$base/etc/profile.d/conda.sh" ]]; then
                print_debug "Initializing conda from $base"
                source "$base/etc/profile.d/conda.sh"
                
                # Also source mamba.sh if it exists
                if [[ -f "$base/etc/profile.d/mamba.sh" ]]; then
                    source "$base/etc/profile.d/mamba.sh"
                fi
                break
            fi
        done
    fi
}

# Function to check if environment exists
env_exists() {
    $CONDA_CMD env list | grep -q "^$ENV_NAME "
    return $?
}

# Function to create environment
create_env() {
    print_info "Creating Mamba environment '$ENV_NAME' from environment.yml..."
    
    if [[ ! -f "$ENV_FILE" ]]; then
        print_error "environment.yml not found at $ENV_FILE"
        exit 1
    fi
    
    # Create environment from file
    $CONDA_CMD env create -f "$ENV_FILE"
    
    if [ $? -ne 0 ]; then
        print_error "Failed to create Mamba environment"
        exit 1
    fi
    
    print_info "Environment '$ENV_NAME' created successfully"
}

# Function to update environment
update_env() {
    print_info "Updating environment '$ENV_NAME' from environment.yml..."
    
    if [[ ! -f "$ENV_FILE" ]]; then
        print_warning "environment.yml not found, skipping update"
        return
    fi
    
    # Update environment from file (prune removes packages not in file)
    $CONDA_CMD env update -n "$ENV_NAME" -f "$ENV_FILE" --prune
    
    if [ $? -ne 0 ]; then
        print_warning "Failed to update environment, continuing with existing packages"
    fi
}

# Function to activate environment
activate_env() {
    print_info "Activating environment '$ENV_NAME'..."
    
    # Activate the environment
    conda activate "$ENV_NAME"
    
    if [ $? -ne 0 ]; then
        print_error "Failed to activate environment '$ENV_NAME'"
        exit 1
    fi
    
    # Verify activation
    if [[ "$CONDA_DEFAULT_ENV" != "$ENV_NAME" ]]; then
        print_error "Environment activation failed"
        exit 1
    fi
    
    print_info "Environment '$ENV_NAME' activated"
}

# Main environment setup
setup_environment() {
    # Detect conda/mamba
    if ! detect_conda; then
        print_error "Neither Mamba nor Conda found. Please install Mamba or Conda first."
        print_info "Recommended: Install Mambaforge from https://github.com/conda-forge/miniforge"
        exit 1
    fi
    
    # Initialize conda/mamba for this shell
    init_conda
    
    # Check if environment exists
    if ! env_exists; then
        create_env
    else
        # Check if we should update the environment
        if [[ "$1" == "--update-env" ]] || [[ "$CLAUDE_MPM_UPDATE_ENV" == "1" ]]; then
            update_env
        else
            print_debug "Environment '$ENV_NAME' already exists (use --update-env to update)"
        fi
    fi
    
    # Activate the environment
    activate_env
    
    # Ensure editable install is up to date
    print_debug "Ensuring editable install is current..."
    pip install -e "$PROJECT_ROOT[dev]" --quiet --no-deps 2>/dev/null || true
}

# Parse early flags
for arg in "$@"; do
    case "$arg" in
        --debug|-d)
            export CLAUDE_MPM_DEBUG=1
            print_info "Debug mode enabled"
            ;;
        --update-env)
            export CLAUDE_MPM_UPDATE_ENV=1
            ;;
    esac
done

# Setup Mamba/Conda environment
setup_environment "$@"

# Set PYTHONPATH to include src directory
export PYTHONPATH="$SRC_DIR:$PYTHONPATH"

# Preserve the original working directory
export CLAUDE_MPM_USER_PWD="$(pwd)"

# Log the working directory
print_info "Working directory: $(pwd)"
print_info "Framework path: $PROJECT_ROOT"
print_info "Python: $(which python)"
print_info "Python version: $(python --version 2>&1)"

# Check if this is a claude-mpm specific command or should be passed to claude
MPM_PREFIX="--mpm:"
MPM_COMMANDS=("run" "run-guarded" "tickets" "info" "agents" "ui" "memory" "monitor" "config" "aggregate" "cleanup-memory" "cleanup" "clean")
FIRST_ARG="${1:-}"

# Remove --update-env from arguments if present
ARGS=()
for arg in "$@"; do
    if [[ "$arg" != "--update-env" ]]; then
        ARGS+=("$arg")
    fi
done
set -- "${ARGS[@]}"
FIRST_ARG="${1:-}"

# Check if first argument is an MPM command (with or without prefix)
IS_MPM_COMMAND=false

# Check for prefixed commands (including --mpm:ui)
if [[ "$FIRST_ARG" == "$MPM_PREFIX"* ]]; then
    IS_MPM_COMMAND=true
    print_info "Detected MPM command: $FIRST_ARG"
fi

# Check for unprefixed commands (legacy support)
for cmd in "${MPM_COMMANDS[@]}"; do
    if [[ "$FIRST_ARG" == "$cmd" ]]; then
        IS_MPM_COMMAND=true
        break
    fi
done

# Check if it's a help/version request for claude-mpm
if [[ "$FIRST_ARG" == "--help" ]] || [[ "$FIRST_ARG" == "-h" ]] || [[ "$FIRST_ARG" == "--version" ]] || [[ "$FIRST_ARG" == "-v" ]] || [[ -z "$FIRST_ARG" ]]; then
    # Show claude-mpm help for these
    IS_MPM_COMMAND=true
fi

# Check if it's a claude-mpm specific flag (with or without prefix)
MPM_FLAGS=("--resume" "--mpm-resume" "--logging" "--log-dir" "--framework-path" "--agents-dir" "--no-hooks" "--no-tickets" "--subprocess" "--interactive-subprocess" "--todo-hijack" "-i" "--input" "--non-interactive" "--no-native-agents" "-d" "--debug" "--launch-method" "--monitor" "--websocket-port")
for flag in "${MPM_FLAGS[@]}"; do
    if [[ " $* " =~ " $flag " ]] || [[ " $* " =~ " --mpm:${flag#--} " ]] || [[ " $* " =~ " -mpm:${flag#-} " ]]; then
        IS_MPM_COMMAND=true
        break
    fi
done

if [[ "$IS_MPM_COMMAND" == true ]]; then
    # Run claude-mpm
    cd "$PROJECT_ROOT"
    
    # Transform --mpm: prefixed flags to regular flags for Python
    ARGS=()
    for arg in "$@"; do
        if [[ "$arg" == "--mpm:ui" ]]; then
            # Keep --mpm:ui as is for proper subparser handling
            ARGS+=("--mpm:ui")
        elif [[ "$arg" == "--mpm:"* ]]; then
            # Transform other --mpm: prefixed commands
            ARGS+=("--mpm:${arg#--mpm:}")
        elif [[ "$arg" == "-mpm:"* ]]; then
            # Remove -mpm: prefix
            ARGS+=("-${arg#-mpm:}")
        else
            ARGS+=("$arg")
        fi
    done
    
    # Debug: Print the command
    if [[ "$CLAUDE_MPM_DEBUG" == "1" ]]; then
        print_info "Running: python -m claude_mpm ${ARGS[*]}"
    fi
    
    exec python -m claude_mpm "${ARGS[@]}"
else
    # Pass through to claude CLI
    print_info "Passing through to Claude CLI..."
    exec claude --dangerously-skip-permissions "$@"
fi