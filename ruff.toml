# Ruff configuration for claude-mpm
# Fast Python linter with comprehensive checks

# Same line length as Black
line-length = 88

# Target Python 3.8+
target-version = "py38"

[lint]
# Enable specific rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "RET",    # flake8-return
    "FBT",    # flake8-boolean-trap
    "RUF",    # Ruff-specific rules
    "PL",     # Pylint
    "NPY",    # NumPy-specific rules
    "PERF",   # Performance linting
    "PIE",    # flake8-pie
    "N",      # pep8-naming
    "C",      # complexity
]

# Ignore specific rules
ignore = [
    "E501",   # Line too long (handled by Black)
    "E203",   # Whitespace before ':' (conflicts with Black)
    "B008",   # Do not perform function calls in argument defaults
    "B024",   # Abstract base class without abstract methods
    "UP007",  # Use X | Y for type hints (not compatible with Python 3.8)
    "SIM108", # Use ternary operator (sometimes less readable)
    "RET504", # Unnecessary variable assignment before return
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default value in function definition
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "PTH123", # open() should be replaced by Path.open() - too many to fix now
    "DTZ005", # datetime without timezone - too many to fix now
    "PLR0915", # Too many statements
    "PLR0911", # Too many return statements - too many to fix now
    "PLR0912", # Too many branches - too many to fix now
    "SIM102",  # Use single if statement - can reduce readability
    "SIM103",  # Return condition directly - sometimes less clear
    "SIM105",  # Use contextlib.suppress - sometimes less explicit
    "SIM115",  # Use context manager - not always applicable
    "SIM117",  # Use single with statement - sometimes less readable
    "PIE810",  # Use tuple in startswith - minor stylistic preference
    "N801",    # Class name should use CapWords - legacy compatibility
    "N802",    # Function name should be lowercase - legacy compatibility
    "N803",    # Argument name should be lowercase - legacy compatibility
    "N806",    # Variable in function should be lowercase - legacy compatibility
    "N812",    # Lowercase imported as non-lowercase - legacy compatibility
    "B007",    # Loop control variable not used - intentional in some cases
    "B019",    # Use of lru_cache on methods - intentional caching pattern
    "B023",    # Function definition does not bind loop variable - false positives
    "PTH100",  # os.path.abspath - too many to fix now
    "PTH102",  # os.makedirs - too many to fix now
    "PTH107",  # os.remove - too many to fix now
    "PTH110",  # os.path.exists - too many to fix now
    "PTH112",  # os.path.isdir - too many to fix now
    "PTH118",  # os.path.join - too many to fix now
    "PTH119",  # os.path.basename - too many to fix now
    "PTH120",  # os.path.dirname - too many to fix now
    "PTH122",  # os.path.splitext - too many to fix now
    "PTH202",  # os.path.getsize - too many to fix now
    "RUF006",  # Store reference to asyncio task - intentional fire-and-forget
    "PLW0602", # Using global without assignment - false positives
    "UP031",   # Use format specifiers - legacy code compatibility
    "F403",    # Star imports - allowed in specific contexts
    "ARG001",  # Unused function argument - required by interfaces
    "RUF012",  # Mutable class attributes without ClassVar - too many to fix now
    "N999",    # Invalid module name - legacy test files
    "C901",    # Function is too complex - too many to fix now
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Exclude directories from linting
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".venv-*",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "dashboard_*",
    "realtime_*",
    "test_screenshots",
]

[lint.per-file-ignores]
# Allow unused imports in __init__ files
"__init__.py" = ["F401", "F403"]
# Allow print statements and other test-specific patterns in tests
"tests/**/*.py" = ["S101", "ARG001", "PLR2004", "PLR0913"]
# Allow complex scripts
"scripts/*.py" = ["PLR0912", "PLR0915", "C901"]

[isort]
# Use Black-compatible import sorting
profile = "black"
known-first-party = ["claude_mpm"]

[mccabe]
# Maximum complexity
max-complexity = 10

[pydocstyle]
# Use Google-style docstrings
convention = "google"