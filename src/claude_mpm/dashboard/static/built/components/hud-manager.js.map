{"version":3,"file":"hud-manager.js","sources":["../../js/components/hud-visualizer.js"],"sourcesContent":["/**\n * HUD Visualizer Component\n * Manages the Cytoscape.js tree visualization for the HUD mode with lazy loading\n */\n\nclass HUDVisualizer {\n    constructor() {\n        this.cy = null;\n        this.container = null;\n        this.nodes = new Map(); // Map of node IDs to node data\n        this.isActive = false;\n        this.librariesLoaded = false;\n        this.loadingPromise = null;\n        this.pendingEvents = []; // Store events received before libraries are loaded\n\n        // Layout configuration\n        this.layoutConfig = {\n            name: 'dagre',\n            rankDir: 'TB', // Top to bottom\n            animate: true,\n            animationDuration: 500,\n            fit: true,\n            padding: 30,\n            rankSep: 100,\n            nodeSep: 80\n        };\n\n        // Node type configurations\n        this.nodeTypes = {\n            PM: {\n                color: '#48bb78',\n                shape: 'rectangle',\n                width: 120,\n                height: 40,\n                icon: '👤'\n            },\n            AGENT: {\n                color: '#9f7aea',\n                shape: 'ellipse',\n                width: 100,\n                height: 60,\n                icon: '🤖'\n            },\n            TOOL: {\n                color: '#4299e1',\n                shape: 'diamond',\n                width: 80,\n                height: 50,\n                icon: '🔧'\n            },\n            TODO: {\n                color: '#e53e3e',\n                shape: 'triangle',\n                width: 70,\n                height: 40,\n                icon: '📝'\n            }\n        };\n    }\n\n    /**\n     * Initialize the HUD visualizer (called at startup)\n     */\n    initialize() {\n        this.container = document.getElementById('hud-cytoscape');\n        if (!this.container) {\n            console.error('HUD container not found');\n            return false;\n        }\n\n        // Ensure container has proper attributes for interaction\n        this.container.style.pointerEvents = 'auto';\n        this.container.style.cursor = 'default';\n        this.container.style.position = 'relative';\n        this.container.style.zIndex = '1';\n\n        // Setup basic event handlers (not library-dependent)\n        this.setupBasicEventHandlers();\n\n        console.log('HUD Visualizer initialized (libraries will load lazily)');\n        return true;\n    }\n\n    /**\n     * Load libraries and initialize Cytoscape when HUD is first activated\n     * @returns {Promise} - Promise that resolves when libraries are loaded and Cytoscape is initialized\n     */\n    async loadLibrariesAndInitialize() {\n        if (this.librariesLoaded && this.cy) {\n            return Promise.resolve();\n        }\n\n        // If already loading, return the existing promise\n        if (this.loadingPromise) {\n            return this.loadingPromise;\n        }\n\n        this.loadingPromise = this._performLazyLoading();\n        return this.loadingPromise;\n    }\n\n    /**\n     * Perform the actual lazy loading process\n     * @private\n     */\n    async _performLazyLoading() {\n        try {\n            console.log('[HUD-VISUALIZER-DEBUG] _performLazyLoading() called');\n            console.log('[HUD-VISUALIZER-DEBUG] Loading HUD visualization libraries...');\n\n            // Show loading indicator\n            this.showLoadingIndicator();\n\n            // Load libraries using the HUD library loader\n            if (!window.HUDLibraryLoader) {\n                throw new Error('HUD Library Loader not available');\n            }\n\n            console.log('[HUD-VISUALIZER-DEBUG] HUD Library Loader found, loading libraries...');\n            await window.HUDLibraryLoader.loadHUDLibraries((progress) => {\n                console.log('[HUD-VISUALIZER-DEBUG] Loading progress:', progress);\n                this.updateLoadingProgress(progress);\n            });\n\n            // Verify libraries are available\n            console.log('[HUD-VISUALIZER-DEBUG] Verifying libraries are loaded...');\n            if (typeof window.cytoscape === 'undefined') {\n                throw new Error('Cytoscape.js not loaded');\n            }\n            if (typeof window.dagre === 'undefined') {\n                throw new Error('Dagre not loaded');\n            }\n            if (typeof window.cytoscapeDagre === 'undefined') {\n                throw new Error('Cytoscape-dagre not loaded');\n            }\n\n            console.log('[HUD-VISUALIZER-DEBUG] All HUD libraries loaded successfully');\n            this.librariesLoaded = true;\n\n            // Initialize Cytoscape instance\n            console.log('[HUD-VISUALIZER-DEBUG] Initializing Cytoscape...');\n            this.initializeCytoscape();\n\n            // Setup library-dependent event handlers\n            console.log('[HUD-VISUALIZER-DEBUG] Setting up Cytoscape event handlers...');\n            this.setupCytoscapeEventHandlers();\n\n            // Process any pending events\n            console.log('[HUD-VISUALIZER-DEBUG] Processing pending events...');\n            this.processPendingEvents();\n\n            // Hide loading indicator\n            this.hideLoadingIndicator();\n\n            console.log('[HUD-VISUALIZER-DEBUG] HUD Visualizer fully initialized with lazy loading');\n            return true;\n\n        } catch (error) {\n            console.error('[HUD-VISUALIZER-DEBUG] Failed to load HUD libraries:', error);\n            console.error('[HUD-VISUALIZER-DEBUG] Error stack:', error.stack);\n            this.showLoadingError(error.message);\n            this.librariesLoaded = false;\n            this.loadingPromise = null;\n            throw error;\n        }\n    }\n\n    /**\n     * Initialize Cytoscape.js instance (called after libraries are loaded)\n     */\n    initializeCytoscape() {\n        if (!this.librariesLoaded || !window.cytoscape) {\n            console.error('Cannot initialize Cytoscape: libraries not loaded');\n            return;\n        }\n\n        // Register dagre extension for hierarchical layouts\n        if (typeof window.cytoscape !== 'undefined' && typeof window.cytoscapeDagre !== 'undefined') {\n            window.cytoscape.use(window.cytoscapeDagre);\n        }\n\n        this.cy = window.cytoscape({\n            container: this.container,\n\n            elements: [],\n\n            // Enable user interaction\n            userZoomingEnabled: true,\n            userPanningEnabled: true,\n            boxSelectionEnabled: false,\n            autoungrabify: false,\n            autounselectify: false,\n\n            style: [\n                // Node styles\n                {\n                    selector: 'node',\n                    style: {\n                        'background-color': 'data(color)',\n                        'border-color': 'data(borderColor)',\n                        'border-width': 2,\n                        'color': '#ffffff',\n                        'label': 'data(label)',\n                        'text-valign': 'center',\n                        'text-halign': 'center',\n                        'font-size': '12px',\n                        'font-weight': 'bold',\n                        'width': 'data(width)',\n                        'height': 'data(height)',\n                        'shape': 'data(shape)',\n                        'text-wrap': 'wrap',\n                        'text-max-width': '100px'\n                    }\n                },\n\n                // Edge styles\n                {\n                    selector: 'edge',\n                    style: {\n                        'width': 2,\n                        'line-color': '#718096',\n                        'target-arrow-color': '#718096',\n                        'target-arrow-shape': 'triangle',\n                        'curve-style': 'bezier',\n                        'arrow-scale': 1.2\n                    }\n                },\n\n                // Node type specific styles\n                {\n                    selector: '.pm-node',\n                    style: {\n                        'background-color': '#48bb78',\n                        'border-color': '#38a169',\n                        'shape': 'rectangle'\n                    }\n                },\n\n                {\n                    selector: '.agent-node',\n                    style: {\n                        'background-color': '#9f7aea',\n                        'border-color': '#805ad5',\n                        'shape': 'ellipse'\n                    }\n                },\n\n                {\n                    selector: '.tool-node',\n                    style: {\n                        'background-color': '#4299e1',\n                        'border-color': '#3182ce',\n                        'shape': 'diamond'\n                    }\n                },\n\n                {\n                    selector: '.todo-node',\n                    style: {\n                        'background-color': '#e53e3e',\n                        'border-color': '#c53030',\n                        'shape': 'triangle'\n                    }\n                },\n\n                // Hover effects\n                {\n                    selector: 'node:active',\n                    style: {\n                        'overlay-opacity': 0.2,\n                        'overlay-color': '#000000'\n                    }\n                }\n            ],\n\n            layout: this.layoutConfig\n        });\n\n        // Setup resize handler\n        this.setupResizeHandler();\n    }\n\n    /**\n     * Setup basic event handlers (not dependent on libraries)\n     */\n    setupBasicEventHandlers() {\n        // Reset layout button\n        const resetBtn = document.getElementById('hud-reset-layout');\n        if (resetBtn) {\n            resetBtn.addEventListener('click', () => {\n                this.resetLayout();\n            });\n        }\n\n        // Center view button\n        const centerBtn = document.getElementById('hud-center-view');\n        if (centerBtn) {\n            centerBtn.addEventListener('click', () => {\n                this.centerView();\n            });\n        }\n    }\n\n    /**\n     * Setup Cytoscape-dependent event handlers (called after libraries are loaded)\n     */\n    setupCytoscapeEventHandlers() {\n        if (!this.cy) {\n            console.warn('[HUD-VISUALIZER-DEBUG] Cannot setup Cytoscape event handlers: no cy instance');\n            return;\n        }\n\n        console.log('[HUD-VISUALIZER-DEBUG] Setting up Cytoscape event handlers...');\n\n        // Node click events\n        this.cy.on('tap', 'node', (evt) => {\n            const node = evt.target;\n            const data = node.data();\n            console.log('[HUD-VISUALIZER-DEBUG] Node clicked:', data);\n\n            // Highlight connected nodes\n            this.highlightConnectedNodes(node);\n        });\n\n        // Background click events\n        this.cy.on('tap', (evt) => {\n            if (evt.target === this.cy) {\n                console.log('[HUD-VISUALIZER-DEBUG] Background clicked - resetting highlights');\n                // Reset all node styles\n                this.cy.nodes().style({\n                    'opacity': 1\n                });\n\n                this.cy.edges().style({\n                    'opacity': 1\n                });\n            }\n        });\n\n        // Mouse events for debugging\n        this.cy.on('mouseover', 'node', (evt) => {\n            const node = evt.target;\n            node.style('opacity', 0.8);\n        });\n\n        this.cy.on('mouseout', 'node', (evt) => {\n            const node = evt.target;\n            node.style('opacity', 1);\n        });\n\n        console.log('[HUD-VISUALIZER-DEBUG] Cytoscape event handlers set up successfully');\n    }\n\n    /**\n     * Setup resize handler for container\n     */\n    setupResizeHandler() {\n        const resizeObserver = new ResizeObserver(() => {\n            if (this.cy && this.isActive) {\n                this.ensureContainerResize();\n            }\n        });\n\n        if (this.container) {\n            resizeObserver.observe(this.container);\n        }\n    }\n\n    /**\n     * Ensure container is properly resized and visible\n     */\n    ensureContainerResize() {\n        if (!this.cy || !this.container) {\n            console.log('[HUD-VISUALIZER-DEBUG] Cannot resize: missing cy or container');\n            return;\n        }\n\n        // Ensure container can receive events\n        this.ensureContainerInteractivity();\n\n        // Log container dimensions\n        const containerRect = this.container.getBoundingClientRect();\n        console.log('[HUD-VISUALIZER-DEBUG] Container dimensions:', {\n            width: containerRect.width,\n            height: containerRect.height,\n            offsetWidth: this.container.offsetWidth,\n            offsetHeight: this.container.offsetHeight,\n            isVisible: containerRect.width > 0 && containerRect.height > 0\n        });\n\n        // Only proceed if container is visible\n        if (containerRect.width > 0 && containerRect.height > 0) {\n            console.log('[HUD-VISUALIZER-DEBUG] Container is visible, resizing Cytoscape...');\n\n            try {\n                // Force Cytoscape to resize\n                this.cy.resize();\n\n                // Log Cytoscape elements\n                const nodeCount = this.cy.nodes().length;\n                const edgeCount = this.cy.edges().length;\n                console.log('[HUD-VISUALIZER-DEBUG] Cytoscape elements after resize:', {\n                    nodes: nodeCount,\n                    edges: edgeCount\n                });\n\n                // If we have nodes, fit and run layout\n                if (nodeCount > 0) {\n                    console.log('[HUD-VISUALIZER-DEBUG] Running fit and layout...');\n                    this.cy.fit();\n                    this.runLayout();\n                } else {\n                    console.log('[HUD-VISUALIZER-DEBUG] No nodes to display');\n                }\n\n            } catch (error) {\n                console.error('[HUD-VISUALIZER-DEBUG] Error during resize:', error);\n            }\n        } else {\n            console.log('[HUD-VISUALIZER-DEBUG] Container not visible yet, skipping resize');\n        }\n    }\n\n    /**\n     * Ensure container can receive mouse and touch events\n     */\n    ensureContainerInteractivity() {\n        if (!this.container) return;\n\n        // Force container to be interactive\n        this.container.style.pointerEvents = 'auto';\n        this.container.style.cursor = 'default';\n        this.container.style.userSelect = 'none';\n        this.container.style.touchAction = 'manipulation';\n\n        // Remove any overlapping elements that might block events\n        const parent = this.container.parentElement;\n        if (parent) {\n            parent.style.pointerEvents = 'auto';\n            parent.style.position = 'relative';\n        }\n\n        console.log('[HUD-VISUALIZER-DEBUG] Container interactivity ensured');\n    }\n\n    /**\n     * Activate the HUD visualizer (triggers lazy loading if needed)\n     */\n    async activate() {\n        console.log('[HUD-VISUALIZER-DEBUG] activate() called');\n        this.isActive = true;\n\n        try {\n            console.log('[HUD-VISUALIZER-DEBUG] Loading libraries and initializing...');\n            // Load libraries if not already loaded\n            await this.loadLibrariesAndInitialize();\n\n            console.log('[HUD-VISUALIZER-DEBUG] Libraries loaded, cy exists:', !!this.cy);\n\n            // If Cytoscape was destroyed during clearing, recreate it\n            if (!this.cy) {\n                console.log('[HUD-VISUALIZER-DEBUG] Cytoscape instance missing, recreating...');\n                this.initializeCytoscape();\n                this.setupCytoscapeEventHandlers();\n            }\n\n            if (this.cy) {\n                // Wait for container to be visible, then trigger resize and fit\n                console.log('[HUD-VISUALIZER-DEBUG] Triggering resize and fit...');\n\n                // Multiple resize attempts to ensure container visibility\n                setTimeout(() => {\n                    console.log('[HUD-VISUALIZER-DEBUG] First resize attempt...');\n                    this.ensureContainerResize();\n                }, 50);\n\n                setTimeout(() => {\n                    console.log('[HUD-VISUALIZER-DEBUG] Second resize attempt...');\n                    this.ensureContainerResize();\n                }, 200);\n\n                setTimeout(() => {\n                    console.log('[HUD-VISUALIZER-DEBUG] Final resize attempt...');\n                    this.ensureContainerResize();\n                }, 500);\n            }\n            console.log('[HUD-VISUALIZER-DEBUG] activate() completed successfully');\n        } catch (error) {\n            console.error('[HUD-VISUALIZER-DEBUG] Failed to activate HUD:', error);\n            console.error('[HUD-VISUALIZER-DEBUG] Error stack:', error.stack);\n            // Keep isActive true so user can retry\n            throw error; // Re-throw so the promise rejects properly\n        }\n    }\n\n    /**\n     * Deactivate the HUD visualizer\n     */\n    deactivate() {\n        this.isActive = false;\n    }\n\n    /**\n     * Process pending events that were received before libraries loaded\n     */\n    processPendingEvents() {\n        if (this.pendingEvents.length > 0) {\n            console.log(`Processing ${this.pendingEvents.length} pending events`);\n\n            for (const event of this.pendingEvents) {\n                this._processEventInternal(event);\n            }\n\n            this.pendingEvents = [];\n        }\n    }\n\n    /**\n     * Process existing events from dashboard when HUD is activated\n     * This builds the complete tree structure from historical events\n     * @param {Array} events - Array of sorted historical events\n     */\n    processExistingEvents(events) {\n        console.log(`[HUD-VISUALIZER-DEBUG] processExistingEvents called with ${events ? events.length : 0} events`);\n\n        if (!events) {\n            console.error('[HUD-VISUALIZER-DEBUG] No events provided to processExistingEvents');\n            return;\n        }\n\n        if (!Array.isArray(events)) {\n            console.error('[HUD-VISUALIZER-DEBUG] Events is not an array:', typeof events);\n            return;\n        }\n\n        console.log(`[HUD-VISUALIZER-DEBUG] Libraries loaded: ${this.librariesLoaded}, Cytoscape available: ${!!this.cy}`);\n\n        if (!this.librariesLoaded || !this.cy) {\n            console.warn('[HUD-VISUALIZER-DEBUG] HUD libraries not loaded, cannot process existing events');\n            console.log(`[HUD-VISUALIZER-DEBUG] Storing ${events.length} events as pending`);\n            this.pendingEvents = [...events];\n            return;\n        }\n\n        console.log(`[HUD-VISUALIZER-DEBUG] 🏗️ Building HUD tree structure from ${events.length} historical events`);\n\n        // Log sample events to understand structure\n        if (events.length > 0) {\n            console.log('[HUD-VISUALIZER-DEBUG] Sample events:');\n            events.slice(0, 3).forEach((event, i) => {\n                console.log(`[HUD-VISUALIZER-DEBUG]   Event ${i + 1}:`, {\n                    timestamp: event.timestamp,\n                    hook_event_name: event.hook_event_name,\n                    type: event.type,\n                    subtype: event.subtype,\n                    session_id: event.session_id,\n                    data_session_id: event.data?.session_id,\n                    data_keys: event.data ? Object.keys(event.data) : 'no data'\n                });\n            });\n        }\n\n        // Clear any existing visualization\n        this.clear();\n\n        // Group events by session to build proper hierarchies\n        const sessionGroups = this.groupEventsBySession(events);\n\n        // Process each session group to build trees\n        Object.entries(sessionGroups).forEach(([sessionId, sessionEvents]) => {\n            console.log(`  📂 Processing session ${sessionId}: ${sessionEvents.length} events`);\n            this.buildSessionTree(sessionId, sessionEvents);\n        });\n\n        // Run final layout to organize the complete visualization\n        this.runLayout();\n\n        console.log(`✅ HUD tree structure built successfully`);\n    }\n\n    /**\n     * Group events by session ID for hierarchical processing\n     * @param {Array} events - Array of events\n     * @returns {Object} Object with session IDs as keys and event arrays as values\n     */\n    groupEventsBySession(events) {\n        const sessionGroups = {};\n\n        events.forEach(event => {\n            const sessionId = event.session_id || event.data?.session_id || 'unknown';\n            if (!sessionGroups[sessionId]) {\n                sessionGroups[sessionId] = [];\n            }\n            sessionGroups[sessionId].push(event);\n        });\n\n        return sessionGroups;\n    }\n\n    /**\n     * Build a tree structure for a specific session\n     * @param {string} sessionId - Session identifier\n     * @param {Array} sessionEvents - Events for this session\n     */\n    buildSessionTree(sessionId, sessionEvents) {\n        console.log(`[HUD-VISUALIZER-DEBUG] Building session tree for ${sessionId} with ${sessionEvents.length} events`);\n\n        const sessionNodes = new Map(); // Track nodes created for this session\n        let sessionRootNode = null;\n\n        // Sort events chronologically within the session\n        const sortedEvents = sessionEvents.sort((a, b) => {\n            return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();\n        });\n\n        console.log(`[HUD-VISUALIZER-DEBUG] Sorted ${sortedEvents.length} events chronologically`);\n\n        sortedEvents.forEach((event, index) => {\n            const nodeData = this.createNodeFromEvent(event, sessionId);\n            if (!nodeData) return;\n\n            // Add the node to visualization\n            this.addNode(nodeData.id, nodeData.type, nodeData.label, {\n                sessionId: sessionId,\n                timestamp: event.timestamp,\n                eventData: event,\n                isSessionRoot: nodeData.isSessionRoot\n            });\n\n            sessionNodes.set(nodeData.id, {\n                ...nodeData,\n                event: event,\n                index: index\n            });\n\n            // Track session root node\n            if (nodeData.isSessionRoot && !sessionRootNode) {\n                sessionRootNode = nodeData.id;\n            }\n\n            // Create relationships based on event context\n            this.createHierarchicalRelationships(nodeData.id, event, sessionNodes, sessionRootNode);\n        });\n    }\n\n    /**\n     * Create node data from an event\n     * @param {Object} event - Event object\n     * @param {string} sessionId - Session ID\n     * @returns {Object|null} Node data or null if event should be skipped\n     */\n    createNodeFromEvent(event, sessionId) {\n        const eventType = event.hook_event_name || event.type || '';\n        const subtype = event.subtype || '';\n        const timestamp = new Date(event.timestamp || Date.now());\n\n        console.log(`[HUD-VISUALIZER-DEBUG] Creating node from event: ${eventType}/${subtype} for session ${sessionId}`);\n\n        let nodeId, nodeType, label, isSessionRoot = false;\n\n        // Generate a unique timestamp-based ID suffix\n        const timestampId = timestamp.getTime();\n        const randomSuffix = Math.random().toString(36).substring(2, 7);\n\n        // Determine node type and create appropriate visualization\n        if (eventType === 'session' && subtype === 'started') {\n            // Session root node\n            nodeType = 'PM';\n            label = `Session ${sessionId.substring(0, 8)}...`;\n            nodeId = `session-${sessionId.replace(/[^a-zA-Z0-9]/g, '')}`;\n            isSessionRoot = true;\n\n        } else if (eventType === 'hook' && subtype === 'user_prompt') {\n            // User prompts are major workflow nodes\n            nodeType = 'PM';\n            const promptPreview = event.data?.prompt_preview || 'User Prompt';\n            label = promptPreview.length > 20 ? promptPreview.substring(0, 20) + '...' : promptPreview;\n            nodeId = `user-prompt-${timestampId}-${randomSuffix}`;\n\n        } else if (eventType === 'hook' && subtype === 'claude_response') {\n            // Claude responses\n            nodeType = 'PM';\n            label = 'Claude Response';\n            nodeId = `claude-response-${timestampId}-${randomSuffix}`;\n\n        } else if (eventType === 'hook' && subtype === 'pre_tool') {\n            // Tool calls - pre hook\n            nodeType = 'TOOL';\n            const toolName = event.data?.tool_name || 'Unknown Tool';\n            // Clean tool name for ID\n            const cleanToolName = toolName.replace(/[^a-zA-Z0-9]/g, '');\n            label = `${toolName}`;\n            nodeId = `tool-${cleanToolName}-${timestampId}-${randomSuffix}`;\n\n        } else if (eventType === 'agent' || event.data?.agent_type) {\n            // Agent operations\n            nodeType = 'AGENT';\n            const agentName = event.data?.agent_type || event.data?.agent_name || 'Agent';\n            // Clean agent name for ID\n            const cleanAgentName = agentName.replace(/[^a-zA-Z0-9]/g, '');\n            label = agentName;\n            nodeId = `agent-${cleanAgentName}-${timestampId}-${randomSuffix}`;\n\n        } else if (eventType === 'todo' || subtype.includes('todo')) {\n            // Todo operations\n            nodeType = 'TODO';\n            label = 'Todo Update';\n            nodeId = `todo-${timestampId}-${randomSuffix}`;\n\n        } else if (eventType === 'hook' && subtype === 'notification') {\n            // Skip notifications for cleaner visualization\n            return null;\n\n        } else if (eventType === 'log') {\n            // Skip log events for cleaner visualization unless they're errors\n            const level = event.data?.level || 'info';\n            if (!['error', 'critical'].includes(level)) {\n                return null;\n            }\n            nodeType = 'PM';\n            label = `${level.toUpperCase()} Log`;\n            nodeId = `log-${level}-${timestampId}-${randomSuffix}`;\n\n        } else {\n            // Generic event node\n            nodeType = 'PM';\n            const cleanEventType = eventType.replace(/[^a-zA-Z0-9]/g, '') || 'Event';\n            label = eventType || 'Event';\n            nodeId = `generic-${cleanEventType}-${timestampId}-${randomSuffix}`;\n        }\n\n        return {\n            id: nodeId,\n            type: nodeType,\n            label: label,\n            isSessionRoot: isSessionRoot\n        };\n    }\n\n    /**\n     * Create hierarchical relationships between nodes based on event context\n     * @param {string} nodeId - Current node ID\n     * @param {Object} event - Current event\n     * @param {Map} sessionNodes - Map of all nodes in this session\n     * @param {string} sessionRootNode - Root node ID for this session\n     */\n    createHierarchicalRelationships(nodeId, event, sessionNodes, sessionRootNode) {\n        const eventType = event.hook_event_name || event.type || '';\n        const subtype = event.subtype || '';\n\n        // Find appropriate parent node based on event context\n        let parentNodeId = null;\n\n        if (eventType === 'session' && subtype === 'started') {\n            // Session start nodes have no parent\n            return;\n\n        } else if (eventType === 'hook' && subtype === 'pre_tool') {\n            // Tool calls should connect to the most recent user prompt or agent\n            parentNodeId = this.findRecentParentNode(sessionNodes, ['user-prompt', 'agent'], nodeId);\n\n        } else if (eventType === 'hook' && subtype === 'claude_response') {\n            // Claude responses should connect to user prompts\n            parentNodeId = this.findRecentParentNode(sessionNodes, ['user-prompt'], nodeId);\n\n        } else if (eventType === 'agent') {\n            // Agents should connect to user prompts or other agents (delegation)\n            parentNodeId = this.findRecentParentNode(sessionNodes, ['user-prompt', 'agent'], nodeId);\n\n        } else if (eventType === 'todo') {\n            // Todos should connect to agents or user prompts\n            parentNodeId = this.findRecentParentNode(sessionNodes, ['agent', 'user-prompt'], nodeId);\n\n        } else {\n            // Default: connect to most recent significant node\n            parentNodeId = this.findRecentParentNode(sessionNodes, ['user-prompt', 'agent', 'session'], nodeId);\n        }\n\n        // If no specific parent found, connect to session root\n        if (!parentNodeId && sessionRootNode && nodeId !== sessionRootNode) {\n            parentNodeId = sessionRootNode;\n        }\n\n        // Create the edge if parent exists\n        if (parentNodeId && parentNodeId !== nodeId) {\n            this.addEdge(parentNodeId, nodeId);\n        }\n    }\n\n    /**\n     * Find the most recent parent node of specified types\n     * @param {Map} sessionNodes - Map of session nodes\n     * @param {Array} nodeTypes - Array of node type prefixes to search for\n     * @param {string} currentNodeId - Current node ID to exclude from search\n     * @returns {string|null} Parent node ID or null\n     */\n    findRecentParentNode(sessionNodes, nodeTypes, currentNodeId) {\n        const nodeEntries = Array.from(sessionNodes.entries()).reverse(); // Most recent first\n\n        for (const [nodeId, nodeData] of nodeEntries) {\n            if (nodeId === currentNodeId) continue; // Skip current node\n\n            // Check if this node matches any of the desired parent types\n            for (const typePrefix of nodeTypes) {\n                if (nodeId.startsWith(typePrefix)) {\n                    return nodeId;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Process a socket event and add appropriate nodes/edges\n     * @param {Object} event - Socket event data\n     */\n    processEvent(event) {\n        if (!this.isActive) return;\n\n        // If libraries aren't loaded yet, store the event for later processing\n        if (!this.librariesLoaded || !this.cy) {\n            this.pendingEvents.push(event);\n            return;\n        }\n\n        this._processEventInternal(event);\n    }\n\n    /**\n     * Internal event processing (assumes libraries are loaded)\n     * @private\n     */\n    _processEventInternal(event) {\n        const eventType = event.hook_event_name || event.type || '';\n        const sessionId = event.session_id || 'unknown';\n        const timestamp = new Date(event.timestamp || Date.now());\n\n        // Create a unique node ID based on event type and data\n        let nodeId = `${eventType}-${timestamp.getTime()}`;\n        let nodeType = 'PM';\n        let label = eventType;\n\n        // Determine node type based on event\n        if (eventType.includes('tool_call')) {\n            nodeType = 'TOOL';\n            const toolName = event.data?.tool_name || 'Unknown Tool';\n            label = toolName;\n            nodeId = `tool-${toolName}-${timestamp.getTime()}`;\n        } else if (eventType.includes('agent')) {\n            nodeType = 'AGENT';\n            const agentName = event.data?.agent_name || 'Agent';\n            label = agentName;\n            nodeId = `agent-${agentName}-${timestamp.getTime()}`;\n        } else if (eventType.includes('todo')) {\n            nodeType = 'TODO';\n            label = 'Todo List';\n            nodeId = `todo-${timestamp.getTime()}`;\n        } else if (eventType.includes('user_prompt') || eventType.includes('claude_response')) {\n            nodeType = 'PM';\n            label = eventType.includes('user_prompt') ? 'User Prompt' : 'Claude Response';\n            nodeId = `pm-${label.replace(' ', '')}-${timestamp.getTime()}`;\n        }\n\n        // Add the node\n        this.addNode(nodeId, nodeType, label, {\n            sessionId: sessionId,\n            timestamp: timestamp.toISOString(),\n            eventData: event\n        });\n\n        // Add edges based on relationships\n        this.createEventRelationships(nodeId, event);\n    }\n\n    /**\n     * Add a node to the visualization\n     * @param {string} id - Unique node identifier\n     * @param {string} type - Node type (PM, AGENT, TOOL, TODO)\n     * @param {string} label - Node label\n     * @param {Object} data - Additional node data\n     */\n    addNode(id, type, label, data = {}) {\n        console.log(`[HUD-VISUALIZER-DEBUG] Adding node: ${id} (${type}) - ${label}`);\n\n        if (this.nodes.has(id)) {\n            console.log(`[HUD-VISUALIZER-DEBUG] Node ${id} already exists, skipping`);\n            return; // Node already exists\n        }\n\n        const nodeType = this.nodeTypes[type] || this.nodeTypes.PM;\n        const nodeData = {\n            id: id,\n            label: `${nodeType.icon} ${label}`,\n            type: type,\n            color: nodeType.color,\n            borderColor: this.darkenColor(nodeType.color, 20),\n            shape: nodeType.shape,\n            width: nodeType.width,\n            height: nodeType.height,\n            ...data\n        };\n\n        this.nodes.set(id, nodeData);\n\n        if (this.cy) {\n            const element = {\n                group: 'nodes',\n                data: nodeData,\n                classes: `${type.toLowerCase()}-node`\n            };\n\n            console.log(`[HUD-VISUALIZER-DEBUG] Adding node element to Cytoscape:`, element);\n            this.cy.add(element);\n            console.log(`[HUD-VISUALIZER-DEBUG] Node added successfully. Total nodes in cy: ${this.cy.nodes().length}`);\n            this.runLayout();\n        }\n    }\n\n    /**\n     * Add an edge between two nodes\n     * @param {string} sourceId - Source node ID\n     * @param {string} targetId - Target node ID\n     * @param {string} edgeId - Unique edge identifier\n     * @param {Object} data - Additional edge data\n     */\n    addEdge(sourceId, targetId, edgeId = null, data = {}) {\n        if (!sourceId || !targetId) {\n            console.warn(`[HUD-VISUALIZER-DEBUG] Cannot create edge: missing source (${sourceId}) or target (${targetId})`);\n            return;\n        }\n\n        if (sourceId === targetId) {\n            console.warn(`[HUD-VISUALIZER-DEBUG] Cannot create self-loop edge from ${sourceId} to itself`);\n            return;\n        }\n\n        if (!edgeId) {\n            edgeId = `edge-${sourceId}-to-${targetId}`;\n        }\n\n        if (this.cy) {\n            // Check if edge already exists\n            const existingEdge = this.cy.getElementById(edgeId);\n            if (existingEdge.length > 0) {\n                console.log(`[HUD-VISUALIZER-DEBUG] Edge ${edgeId} already exists, skipping`);\n                return;\n            }\n\n            // Check if nodes exist\n            const sourceNode = this.cy.getElementById(sourceId);\n            const targetNode = this.cy.getElementById(targetId);\n\n            if (sourceNode.length === 0) {\n                console.warn(`[HUD-VISUALIZER-DEBUG] Source node ${sourceId} does not exist, cannot create edge`);\n                return;\n            }\n\n            if (targetNode.length === 0) {\n                console.warn(`[HUD-VISUALIZER-DEBUG] Target node ${targetId} does not exist, cannot create edge`);\n                return;\n            }\n\n            const element = {\n                group: 'edges',\n                data: {\n                    id: edgeId,\n                    source: sourceId,\n                    target: targetId,\n                    ...data\n                }\n            };\n\n            console.log(`[HUD-VISUALIZER-DEBUG] Adding edge element to Cytoscape:`, element);\n\n            try {\n                this.cy.add(element);\n                console.log(`[HUD-VISUALIZER-DEBUG] Edge added successfully. Total edges in cy: ${this.cy.edges().length}`);\n                this.runLayout();\n            } catch (error) {\n                console.error(`[HUD-VISUALIZER-DEBUG] Failed to add edge ${edgeId}:`, error);\n                console.error(`[HUD-VISUALIZER-DEBUG] Element details:`, element);\n            }\n        }\n    }\n\n    /**\n     * Create relationships between events\n     * @param {string} nodeId - Current node ID\n     * @param {Object} event - Event data\n     */\n    createEventRelationships(nodeId, event) {\n        const eventType = event.hook_event_name || event.type || '';\n        const sessionId = event.session_id || 'unknown';\n\n        // Find parent nodes based on event relationships\n        const allNodeEntries = Array.from(this.nodes.entries());\n\n        // Tool call relationships\n        if (eventType.includes('tool_call') && event.data?.tool_name) {\n            // Connect tool calls to their invoking agent/PM nodes\n            const parentNode = this.findParentNode(sessionId, ['PM', 'AGENT']);\n            if (parentNode) {\n                this.addEdge(parentNode, nodeId);\n                return;\n            }\n        }\n\n        // Agent delegation relationships\n        if (eventType.includes('agent') || event.data?.agent_name) {\n            // Connect agents to PM nodes\n            const pmNode = this.findParentNode(sessionId, ['PM']);\n            if (pmNode) {\n                this.addEdge(pmNode, nodeId);\n                return;\n            }\n        }\n\n        // Todo relationships - connect to agent or PM nodes\n        if (eventType.includes('todo')) {\n            const parentNode = this.findParentNode(sessionId, ['AGENT', 'PM']);\n            if (parentNode) {\n                this.addEdge(parentNode, nodeId);\n                return;\n            }\n        }\n\n        // Default sequential relationship\n        const allNodes = Array.from(this.nodes.keys());\n        const currentIndex = allNodes.indexOf(nodeId);\n\n        if (currentIndex > 0) {\n            const previousNodeId = allNodes[currentIndex - 1];\n            this.addEdge(previousNodeId, nodeId);\n        }\n    }\n\n    /**\n     * Find a parent node of specific types for the same session\n     * @param {string} sessionId - Session ID\n     * @param {Array} nodeTypes - Array of node types to search for\n     * @returns {string|null} - Parent node ID or null\n     */\n    findParentNode(sessionId, nodeTypes) {\n        const nodeEntries = Array.from(this.nodes.entries()).reverse(); // Start from most recent\n\n        for (const [nodeId, nodeData] of nodeEntries) {\n            if (nodeData.sessionId === sessionId && nodeTypes.includes(nodeData.type)) {\n                return nodeId;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Highlight connected nodes\n     * @param {Object} node - Cytoscape node object\n     */\n    highlightConnectedNodes(node) {\n        if (!this.cy) return;\n\n        // Reset all node styles\n        this.cy.nodes().style({\n            'opacity': 0.3\n        });\n\n        this.cy.edges().style({\n            'opacity': 0.2\n        });\n\n        // Highlight selected node and its neighborhood\n        const neighborhood = node.neighborhood();\n        node.style('opacity', 1);\n        neighborhood.style('opacity', 1);\n    }\n\n    /**\n     * Reset layout\n     */\n    resetLayout() {\n        if (this.cy) {\n            this.cy.layout(this.layoutConfig).run();\n        }\n    }\n\n    /**\n     * Center view\n     */\n    centerView() {\n        if (this.cy) {\n            this.cy.fit();\n            this.cy.center();\n        }\n    }\n\n    /**\n     * Run layout animation\n     */\n    runLayout() {\n        console.log(`[HUD-VISUALIZER-DEBUG] runLayout called - isActive: ${this.isActive}, cy exists: ${!!this.cy}`);\n        if (this.cy && this.isActive) {\n            const nodeCount = this.cy.nodes().length;\n            const edgeCount = this.cy.edges().length;\n            console.log(`[HUD-VISUALIZER-DEBUG] Running layout with ${nodeCount} nodes and ${edgeCount} edges`);\n\n            // Check container dimensions before layout\n            if (this.container) {\n                const rect = this.container.getBoundingClientRect();\n                console.log(`[HUD-VISUALIZER-DEBUG] Container dimensions before layout:`, {\n                    width: rect.width,\n                    height: rect.height,\n                    offsetWidth: this.container.offsetWidth,\n                    offsetHeight: this.container.offsetHeight\n                });\n            }\n\n            const layout = this.cy.layout(this.layoutConfig);\n\n            // Listen for layout completion\n            layout.on('layoutstop', () => {\n                console.log(`[HUD-VISUALIZER-DEBUG] Layout completed. Final node positions:`);\n                this.cy.nodes().forEach((node, index) => {\n                    const position = node.position();\n                    const data = node.data();\n                    console.log(`[HUD-VISUALIZER-DEBUG]   Node ${index + 1}: ${data.label} at (${position.x.toFixed(1)}, ${position.y.toFixed(1)})`);\n                });\n            });\n\n            layout.run();\n        } else {\n            console.log(`[HUD-VISUALIZER-DEBUG] Skipping layout - not active or no Cytoscape instance`);\n        }\n    }\n\n    /**\n     * Clear all nodes and edges\n     */\n    clear() {\n        console.log(`[HUD-VISUALIZER-DEBUG] Clearing HUD: ${this.nodes.size} nodes, ${this.pendingEvents.length} pending events`);\n        this.nodes.clear();\n        this.pendingEvents = [];\n        if (this.cy) {\n            const elementCount = this.cy.elements().length;\n            try {\n                this.cy.elements().remove();\n                console.log(`[HUD-VISUALIZER-DEBUG] Removed ${elementCount} Cytoscape elements`);\n            } catch (error) {\n                console.error(`[HUD-VISUALIZER-DEBUG] Error clearing Cytoscape elements:`, error);\n                // Try to destroy and recreate if clearing fails\n                try {\n                    this.cy.destroy();\n                    this.cy = null;\n                    console.log(`[HUD-VISUALIZER-DEBUG] Destroyed Cytoscape instance due to clear error`);\n                } catch (destroyError) {\n                    console.error(`[HUD-VISUALIZER-DEBUG] Error destroying Cytoscape:`, destroyError);\n                }\n            }\n        }\n    }\n\n    /**\n     * Show loading indicator\n     */\n    showLoadingIndicator() {\n        if (this.container) {\n            this.container.innerHTML = `\n                <div class=\"hud-loading-container\">\n                    <div class=\"hud-loading-spinner\"></div>\n                    <div class=\"hud-loading-text\">Loading HUD visualization libraries...</div>\n                    <div class=\"hud-loading-progress\" id=\"hud-loading-progress\"></div>\n                </div>\n            `;\n        }\n    }\n\n    /**\n     * Update loading progress\n     */\n    updateLoadingProgress(progress) {\n        const progressElement = document.getElementById('hud-loading-progress');\n        if (progressElement) {\n            if (progress.error) {\n                progressElement.innerHTML = `<span class=\"hud-error\">❌ ${progress.message}</span>`;\n            } else {\n                progressElement.innerHTML = `\n                    <div class=\"hud-progress-bar\">\n                        <div class=\"hud-progress-fill\" style=\"width: ${(progress.current / progress.total) * 100}%\"></div>\n                    </div>\n                    <div class=\"hud-progress-text\">${progress.message} (${progress.current}/${progress.total})</div>\n                `;\n            }\n        }\n    }\n\n    /**\n     * Hide loading indicator\n     */\n    hideLoadingIndicator() {\n        if (this.container) {\n            this.container.innerHTML = '';\n        }\n    }\n\n    /**\n     * Show loading error\n     */\n    showLoadingError(message) {\n        if (this.container) {\n            this.container.innerHTML = `\n                <div class=\"hud-error-container\">\n                    <div class=\"hud-error-icon\">⚠️</div>\n                    <div class=\"hud-error-text\">Failed to load HUD libraries</div>\n                    <div class=\"hud-error-message\">${message}</div>\n                    <button class=\"hud-retry-button\" onclick=\"window.hudVisualizer && window.hudVisualizer.retryLoading()\">\n                        Retry Loading\n                    </button>\n                </div>\n            `;\n        }\n    }\n\n    /**\n     * Retry loading libraries (called from error UI)\n     */\n    retryLoading() {\n        this.librariesLoaded = false;\n        this.loadingPromise = null;\n        this.activate();\n    }\n\n    /**\n     * Debug method to manually test HUD visualizer\n     * Can be called from browser console: window.hudVisualizer.debugTest()\n     */\n    debugTest() {\n        console.log('[HUD-VISUALIZER-DEBUG] debugTest() called manually');\n        console.log('[HUD-VISUALIZER-DEBUG] Current state:', {\n            isActive: this.isActive,\n            librariesLoaded: this.librariesLoaded,\n            hasCy: !!this.cy,\n            hasContainer: !!this.container,\n            nodeCount: this.nodes.size,\n            pendingEventCount: this.pendingEvents.length,\n            hasHUDLibraryLoader: !!window.HUDLibraryLoader\n        });\n\n        // Test container\n        if (this.container) {\n            console.log('[HUD-VISUALIZER-DEBUG] Container info:', {\n                id: this.container.id,\n                className: this.container.className,\n                offsetWidth: this.container.offsetWidth,\n                offsetHeight: this.container.offsetHeight,\n                innerHTML: this.container.innerHTML ? 'has content' : 'empty'\n            });\n        }\n\n        // Test library availability\n        console.log('[HUD-VISUALIZER-DEBUG] Library availability:', {\n            cytoscape: typeof window.cytoscape,\n            dagre: typeof window.dagre,\n            cytoscapeDagre: typeof window.cytoscapeDagre,\n            HUDLibraryLoader: typeof window.HUDLibraryLoader\n        });\n\n        return {\n            isActive: this.isActive,\n            librariesLoaded: this.librariesLoaded,\n            hasCy: !!this.cy,\n            containerFound: !!this.container\n        };\n    }\n\n    /**\n     * Comprehensive debug method to identify blank screen issues\n     * Can be called from browser console: window.hudVisualizer.debugBlankScreen()\n     */\n    debugBlankScreen() {\n        console.log('[HUD-BLANK-SCREEN-DEBUG] =================================');\n        console.log('[HUD-BLANK-SCREEN-DEBUG] COMPREHENSIVE BLANK SCREEN DEBUG');\n        console.log('[HUD-BLANK-SCREEN-DEBUG] =================================');\n\n        // 1. Check basic state\n        const basicState = {\n            isActive: this.isActive,\n            librariesLoaded: this.librariesLoaded,\n            hasCy: !!this.cy,\n            hasContainer: !!this.container,\n            nodeCount: this.nodes.size,\n            cytoscapeElementCount: this.cy ? this.cy.elements().length : 0\n        };\n        console.log('[HUD-BLANK-SCREEN-DEBUG] 1. Basic State:', basicState);\n\n        // 2. Check container visibility and dimensions\n        if (this.container) {\n            const containerInfo = this.getContainerDebugInfo();\n            console.log('[HUD-BLANK-SCREEN-DEBUG] 2. Container Info:', containerInfo);\n\n            // Add background color to verify container is visible\n            this.debugAddContainerBackground();\n        } else {\n            console.error('[HUD-BLANK-SCREEN-DEBUG] 2. Container not found!');\n            return false;\n        }\n\n        // 3. Check Cytoscape state\n        if (this.cy) {\n            const cytoscapeInfo = this.getCytoscapeDebugInfo();\n            console.log('[HUD-BLANK-SCREEN-DEBUG] 3. Cytoscape Info:', cytoscapeInfo);\n        } else {\n            console.error('[HUD-BLANK-SCREEN-DEBUG] 3. Cytoscape instance not found!');\n            return false;\n        }\n\n        // 4. Check node positions\n        this.debugNodePositions();\n\n        // 5. Try manual rendering triggers\n        this.debugManualRenderingTriggers();\n\n        // 6. Add test nodes if none exist\n        if (this.cy && this.cy.nodes().length === 0) {\n            console.log('[HUD-BLANK-SCREEN-DEBUG] 6. No nodes found, adding test nodes...');\n            this.debugAddTestNodes();\n        }\n\n        // 7. Force zoom fit\n        this.debugForceZoomFit();\n\n        console.log('[HUD-BLANK-SCREEN-DEBUG] Debug complete. Check visual results.');\n        return true;\n    }\n\n    /**\n     * Get comprehensive container debug information\n     */\n    getContainerDebugInfo() {\n        const rect = this.container.getBoundingClientRect();\n        const computed = window.getComputedStyle(this.container);\n\n        return {\n            id: this.container.id,\n            className: this.container.className,\n            // Dimensions\n            offsetWidth: this.container.offsetWidth,\n            offsetHeight: this.container.offsetHeight,\n            clientWidth: this.container.clientWidth,\n            clientHeight: this.container.clientHeight,\n            scrollWidth: this.container.scrollWidth,\n            scrollHeight: this.container.scrollHeight,\n            // Bounding rect\n            boundingRect: {\n                width: rect.width,\n                height: rect.height,\n                top: rect.top,\n                left: rect.left,\n                bottom: rect.bottom,\n                right: rect.right\n            },\n            // Computed styles that affect visibility\n            computedStyles: {\n                display: computed.display,\n                visibility: computed.visibility,\n                opacity: computed.opacity,\n                position: computed.position,\n                overflow: computed.overflow,\n                zIndex: computed.zIndex,\n                backgroundColor: computed.backgroundColor,\n                transform: computed.transform\n            },\n            // Check if visible\n            isVisible: rect.width > 0 && rect.height > 0 && computed.display !== 'none' && computed.visibility !== 'hidden',\n            // Parent info\n            parentElement: this.container.parentElement ? {\n                tagName: this.container.parentElement.tagName,\n                className: this.container.parentElement.className,\n                offsetWidth: this.container.parentElement.offsetWidth,\n                offsetHeight: this.container.parentElement.offsetHeight\n            } : null\n        };\n    }\n\n    /**\n     * Get comprehensive Cytoscape debug information\n     */\n    getCytoscapeDebugInfo() {\n        const extent = this.cy.extent();\n        const zoom = this.cy.zoom();\n        const pan = this.cy.pan();\n        const viewport = this.cy.viewport();\n\n        return {\n            // Elements\n            nodeCount: this.cy.nodes().length,\n            edgeCount: this.cy.edges().length,\n            elementCount: this.cy.elements().length,\n            // Viewport\n            zoom: zoom,\n            pan: pan,\n            extent: extent,\n            viewport: viewport,\n            // Container\n            containerWidth: this.cy.width(),\n            containerHeight: this.cy.height(),\n            // Check if initialized\n            isInitialized: this.cy.scratch('_cytoscape-initialized') !== undefined,\n            // Renderer info\n            renderer: this.cy.renderer() ? {\n                name: this.cy.renderer().name,\n                options: this.cy.renderer().options\n            } : null\n        };\n    }\n\n    /**\n     * Debug node positions to check if they're outside viewport\n     */\n    debugNodePositions() {\n        if (!this.cy || this.cy.nodes().length === 0) {\n            console.log('[HUD-BLANK-SCREEN-DEBUG] 4. No nodes to check positions');\n            return;\n        }\n\n        console.log('[HUD-BLANK-SCREEN-DEBUG] 4. Node Positions:');\n        const nodes = this.cy.nodes();\n        const extent = this.cy.extent();\n        const viewport = this.cy.viewport();\n\n        console.log('[HUD-BLANK-SCREEN-DEBUG]   Viewport extent:', extent);\n        console.log('[HUD-BLANK-SCREEN-DEBUG]   Current viewport:', viewport);\n\n        nodes.forEach((node, index) => {\n            const position = node.position();\n            const data = node.data();\n            const boundingBox = node.boundingBox();\n\n            console.log(`[HUD-BLANK-SCREEN-DEBUG]   Node ${index + 1}:`, {\n                id: data.id,\n                label: data.label,\n                position: position,\n                boundingBox: boundingBox,\n                isVisible: node.visible(),\n                opacity: node.style('opacity'),\n                width: node.style('width'),\n                height: node.style('height')\n            });\n        });\n    }\n\n    /**\n     * Add background color to container to verify it's visible\n     */\n    debugAddContainerBackground() {\n        if (this.container) {\n            this.container.style.backgroundColor = '#ff000020'; // Light red background\n            this.container.style.border = '2px solid #ff0000'; // Red border\n            this.container.style.minHeight = '400px'; // Ensure minimum height\n            console.log('[HUD-BLANK-SCREEN-DEBUG] Added red background and border to container for visibility test');\n        }\n    }\n\n    /**\n     * Manual rendering triggers to force Cytoscape to render\n     */\n    debugManualRenderingTriggers() {\n        if (!this.cy) {\n            console.log('[HUD-BLANK-SCREEN-DEBUG] 5. No Cytoscape instance for manual rendering');\n            return;\n        }\n\n        console.log('[HUD-BLANK-SCREEN-DEBUG] 5. Triggering manual rendering operations...');\n\n        try {\n            // Force resize\n            console.log('[HUD-BLANK-SCREEN-DEBUG]   - Forcing resize...');\n            this.cy.resize();\n\n            // Force redraw\n            console.log('[HUD-BLANK-SCREEN-DEBUG]   - Forcing redraw...');\n            this.cy.forceRender();\n\n            // Force layout\n            if (this.cy.nodes().length > 0) {\n                console.log('[HUD-BLANK-SCREEN-DEBUG]   - Running layout...');\n                this.cy.layout(this.layoutConfig).run();\n            }\n\n            // Force viewport update\n            console.log('[HUD-BLANK-SCREEN-DEBUG]   - Updating viewport...');\n            this.cy.viewport({\n                zoom: this.cy.zoom(),\n                pan: this.cy.pan()\n            });\n\n            console.log('[HUD-BLANK-SCREEN-DEBUG]   Manual rendering triggers completed');\n        } catch (error) {\n            console.error('[HUD-BLANK-SCREEN-DEBUG]   Error during manual rendering:', error);\n        }\n    }\n\n    /**\n     * Add test nodes to verify Cytoscape is working\n     */\n    debugAddTestNodes() {\n        if (!this.cy) return;\n\n        console.log('[HUD-BLANK-SCREEN-DEBUG]   Adding test nodes...');\n\n        try {\n            // Clear existing elements\n            this.cy.elements().remove();\n\n            // Add test nodes\n            const testNodes = [\n                {\n                    group: 'nodes',\n                    data: {\n                        id: 'test-node-1',\n                        label: '🤖 Test Node 1',\n                        color: '#48bb78',\n                        borderColor: '#38a169',\n                        shape: 'rectangle',\n                        width: 120,\n                        height: 40\n                    },\n                    classes: 'pm-node'\n                },\n                {\n                    group: 'nodes',\n                    data: {\n                        id: 'test-node-2',\n                        label: '🔧 Test Node 2',\n                        color: '#4299e1',\n                        borderColor: '#3182ce',\n                        shape: 'diamond',\n                        width: 80,\n                        height: 50\n                    },\n                    classes: 'tool-node'\n                },\n                {\n                    group: 'nodes',\n                    data: {\n                        id: 'test-node-3',\n                        label: '📝 Test Node 3',\n                        color: '#e53e3e',\n                        borderColor: '#c53030',\n                        shape: 'triangle',\n                        width: 70,\n                        height: 40\n                    },\n                    classes: 'todo-node'\n                }\n            ];\n\n            // Add test edges\n            const testEdges = [\n                {\n                    group: 'edges',\n                    data: {\n                        id: 'test-edge-1',\n                        source: 'test-node-1',\n                        target: 'test-node-2'\n                    }\n                },\n                {\n                    group: 'edges',\n                    data: {\n                        id: 'test-edge-2',\n                        source: 'test-node-2',\n                        target: 'test-node-3'\n                    }\n                }\n            ];\n\n            // Add elements to Cytoscape\n            this.cy.add(testNodes);\n            this.cy.add(testEdges);\n\n            console.log('[HUD-BLANK-SCREEN-DEBUG]   Added 3 test nodes and 2 test edges');\n\n            // Update our internal nodes map\n            testNodes.forEach(nodeElement => {\n                this.nodes.set(nodeElement.data.id, nodeElement.data);\n            });\n\n            // Run layout\n            this.runLayout();\n\n        } catch (error) {\n            console.error('[HUD-BLANK-SCREEN-DEBUG]   Error adding test nodes:', error);\n        }\n    }\n\n    /**\n     * Force zoom fit after layout with multiple attempts\n     */\n    debugForceZoomFit() {\n        if (!this.cy) return;\n\n        console.log('[HUD-BLANK-SCREEN-DEBUG] 7. Forcing zoom fit...');\n\n        const attemptZoomFit = (attemptNumber) => {\n            try {\n                console.log(`[HUD-BLANK-SCREEN-DEBUG]   Zoom fit attempt ${attemptNumber}...`);\n\n                // Get current state before fit\n                const beforeZoom = this.cy.zoom();\n                const beforePan = this.cy.pan();\n                const elements = this.cy.elements();\n\n                console.log('[HUD-BLANK-SCREEN-DEBUG]   Before fit:', {\n                    zoom: beforeZoom,\n                    pan: beforePan,\n                    elementCount: elements.length\n                });\n\n                if (elements.length > 0) {\n                    // Try fit with specific options\n                    this.cy.fit(elements, 50); // 50px padding\n\n                    // Get state after fit\n                    const afterZoom = this.cy.zoom();\n                    const afterPan = this.cy.pan();\n\n                    console.log('[HUD-BLANK-SCREEN-DEBUG]   After fit:', {\n                        zoom: afterZoom,\n                        pan: afterPan,\n                        changed: beforeZoom !== afterZoom || beforePan.x !== afterPan.x || beforePan.y !== afterPan.y\n                    });\n\n                    // Force center\n                    this.cy.center(elements);\n\n                } else {\n                    console.log('[HUD-BLANK-SCREEN-DEBUG]   No elements to fit');\n                }\n\n            } catch (error) {\n                console.error(`[HUD-BLANK-SCREEN-DEBUG]   Zoom fit attempt ${attemptNumber} failed:`, error);\n            }\n        };\n\n        // Multiple attempts with delays\n        attemptZoomFit(1);\n        setTimeout(() => attemptZoomFit(2), 100);\n        setTimeout(() => attemptZoomFit(3), 500);\n        setTimeout(() => attemptZoomFit(4), 1000);\n    }\n\n    /**\n     * Quick test to draw a simple shape to verify Cytoscape canvas is working\n     */\n    debugDrawSimpleShape() {\n        if (!this.cy) {\n            console.log('[HUD-CANVAS-TEST] No Cytoscape instance');\n            return false;\n        }\n\n        console.log('[HUD-CANVAS-TEST] Testing Cytoscape canvas rendering...');\n\n        try {\n            // Clear everything\n            this.cy.elements().remove();\n\n            // Add a single, simple node at center\n            this.cy.add({\n                group: 'nodes',\n                data: {\n                    id: 'canvas-test',\n                    label: '✅ CANVAS TEST',\n                    color: '#ff0000',\n                    borderColor: '#000000',\n                    width: 200,\n                    height: 100,\n                    shape: 'rectangle'\n                },\n                position: { x: 200, y: 200 } // Fixed position\n            });\n\n            // Force immediate render\n            this.cy.forceRender();\n\n            // Zoom to fit this single node\n            this.cy.fit(this.cy.$('#canvas-test'), 50);\n\n            console.log('[HUD-CANVAS-TEST] Canvas test node added and positioned');\n            console.log('[HUD-CANVAS-TEST] If you see a red rectangle with \"CANVAS TEST\", rendering works!');\n\n            return true;\n\n        } catch (error) {\n            console.error('[HUD-CANVAS-TEST] Canvas test failed:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Utility function to darken a color\n     * @param {string} color - Hex color\n     * @param {number} percent - Percentage to darken\n     * @returns {string} - Darkened hex color\n     */\n    darkenColor(color, percent) {\n        const num = parseInt(color.replace(\"#\", \"\"), 16);\n        const amt = Math.round(2.55 * percent);\n        const R = (num >> 16) - amt;\n        const G = (num >> 8 & 0x00FF) - amt;\n        const B = (num & 0x0000FF) - amt;\n        return \"#\" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +\n            (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +\n            (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);\n    }\n}\n\n// Export for use in dashboard\nwindow.HUDVisualizer = HUDVisualizer;\n"],"names":["window","HUDVisualizer","constructor","this","cy","container","nodes","Map","isActive","librariesLoaded","loadingPromise","pendingEvents","layoutConfig","name","rankDir","animate","animationDuration","fit","padding","rankSep","nodeSep","nodeTypes","PM","color","shape","width","height","icon","AGENT","TOOL","TODO","initialize","document","getElementById","style","pointerEvents","cursor","position","zIndex","setupBasicEventHandlers","console","log","error","loadLibrariesAndInitialize","Promise","resolve","_performLazyLoading","showLoadingIndicator","HUDLibraryLoader","Error","loadHUDLibraries","progress","updateLoadingProgress","cytoscape","dagre","cytoscapeDagre","initializeCytoscape","setupCytoscapeEventHandlers","processPendingEvents","hideLoadingIndicator","stack","showLoadingError","message","use","elements","userZoomingEnabled","userPanningEnabled","boxSelectionEnabled","autoungrabify","autounselectify","selector","label","layout","setupResizeHandler","resetBtn","addEventListener","resetLayout","centerBtn","centerView","on","evt","node","target","data","highlightConnectedNodes","opacity","edges","warn","resizeObserver","ResizeObserver","ensureContainerResize","observe","ensureContainerInteractivity","containerRect","getBoundingClientRect","offsetWidth","offsetHeight","isVisible","resize","nodeCount","length","edgeCount","runLayout","userSelect","touchAction","parent","parentElement","activate","setTimeout","deactivate","event","_processEventInternal","processExistingEvents","events","Array","isArray","slice","forEach","i","timestamp","hook_event_name","type","subtype","session_id","data_session_id","data_keys","Object","keys","clear","sessionGroups","groupEventsBySession","entries","sessionId","sessionEvents","buildSessionTree","push","sessionNodes","sessionRootNode","sortedEvents","sort","a","b","Date","getTime","index","nodeData","createNodeFromEvent","addNode","id","eventData","isSessionRoot","set","createHierarchicalRelationships","eventType","now","nodeId","nodeType","timestampId","randomSuffix","Math","random","toString","substring","replace","promptPreview","prompt_preview","toolName","tool_name","cleanToolName","agent_type","agentName","agent_name","cleanAgentName","includes","level","toUpperCase","cleanEventType","parentNodeId","findRecentParentNode","addEdge","currentNodeId","nodeEntries","from","reverse","typePrefix","startsWith","processEvent","toISOString","createEventRelationships","has","borderColor","darkenColor","element","group","classes","toLowerCase","add","sourceId","targetId","edgeId","sourceNode","targetNode","source","parentNode","findParentNode","pmNode","allNodes","currentIndex","indexOf","previousNodeId","neighborhood","run","center","rect","x","toFixed","y","size","elementCount","remove","destroy","destroyError","innerHTML","progressElement","current","total","retryLoading","debugTest","hasCy","hasContainer","pendingEventCount","hasHUDLibraryLoader","className","containerFound","debugBlankScreen","basicState","cytoscapeElementCount","containerInfo","getContainerDebugInfo","debugAddContainerBackground","cytoscapeInfo","getCytoscapeDebugInfo","debugNodePositions","debugManualRenderingTriggers","debugAddTestNodes","debugForceZoomFit","computed","getComputedStyle","clientWidth","clientHeight","scrollWidth","scrollHeight","boundingRect","top","left","bottom","right","computedStyles","display","visibility","overflow","backgroundColor","transform","tagName","extent","zoom","pan","viewport","containerWidth","containerHeight","isInitialized","scratch","renderer","options","boundingBox","visible","border","minHeight","forceRender","testNodes","testEdges","nodeElement","attemptZoomFit","attemptNumber","beforeZoom","beforePan","afterZoom","afterPan","changed","debugDrawSimpleShape","$","percent","num","parseInt","amt","round","R","G","B"],"mappings":"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"}