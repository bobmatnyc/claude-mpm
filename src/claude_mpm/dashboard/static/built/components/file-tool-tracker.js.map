{"version":3,"file":"file-tool-tracker.js","sources":["../../js/components/file-tool-tracker.js"],"sourcesContent":["/**\n * File and Tool Tracker Module\n *\n * Tracks file operations and tool calls by pairing pre/post events and maintaining\n * organized collections for the files and tools tabs. Provides analysis of\n * tool execution patterns and file operation history.\n *\n * WHY: Extracted from main dashboard to isolate complex event pairing logic\n * that groups related events into meaningful operations. This provides better\n * maintainability for the intricate logic of matching tool events with their results.\n *\n * DESIGN DECISION: Uses intelligent correlation strategy for tool calls that:\n * - Separates pre_tool and post_tool events first\n * - Correlates based on temporal proximity, parameter similarity, and context\n * - Handles timing differences between pre/post events (tools can run for minutes)\n * - Prevents duplicate tool entries by ensuring each tool call appears once\n * - Supports both paired and orphaned events for comprehensive tracking\n */\nclass FileToolTracker {\n    constructor(agentInference, workingDirectoryManager) {\n        this.agentInference = agentInference;\n        this.workingDirectoryManager = workingDirectoryManager;\n\n        // File tracking for files tab\n        this.fileOperations = new Map(); // Map of file paths to operations\n\n        // Tool call tracking for tools tab\n        this.toolCalls = new Map(); // Map of tool call keys to paired pre/post events\n\n        console.log('File-tool tracker initialized');\n    }\n\n    /**\n     * Update file operations from events\n     * @param {Array} events - Events to process\n     */\n    updateFileOperations(events) {\n        // Clear existing data\n        this.fileOperations.clear();\n\n        console.log('updateFileOperations - processing', events.length, 'events');\n\n        // Group events by session and timestamp to match pre/post pairs\n        const eventPairs = new Map(); // Key: session_id + timestamp + tool_name\n        let fileOperationCount = 0;\n\n        // First pass: collect all tool events and group them\n        events.forEach((event, index) => {\n            const isFileOp = this.isFileOperation(event);\n            if (isFileOp) fileOperationCount++;\n\n            if (index < 5) { // Debug first 5 events with more detail\n                console.log(`Event ${index}:`, {\n                    type: event.type,\n                    subtype: event.subtype,\n                    tool_name: event.tool_name,\n                    tool_parameters: event.tool_parameters,\n                    isFileOp: isFileOp\n                });\n            }\n\n            if (isFileOp) {\n                const toolName = event.tool_name || (event.data && event.data.tool_name);\n                const sessionId = event.session_id || (event.data && event.data.session_id) || 'unknown';\n                const eventKey = `${sessionId}_${toolName}_${Math.floor(new Date(event.timestamp).getTime() / 1000)}`; // Group by second\n\n                if (!eventPairs.has(eventKey)) {\n                    eventPairs.set(eventKey, {\n                        pre_event: null,\n                        post_event: null,\n                        tool_name: toolName,\n                        session_id: sessionId\n                    });\n                }\n\n                const pair = eventPairs.get(eventKey);\n                if (event.subtype === 'pre_tool' || (event.type === 'hook' && event.subtype && !event.subtype.includes('post'))) {\n                    pair.pre_event = event;\n                } else if (event.subtype === 'post_tool' || (event.subtype && event.subtype.includes('post'))) {\n                    pair.post_event = event;\n                } else {\n                    // For events without clear pre/post distinction, treat as both\n                    pair.pre_event = event;\n                    pair.post_event = event;\n                }\n            }\n        });\n\n        console.log('updateFileOperations - found', fileOperationCount, 'file operations in', eventPairs.size, 'event pairs');\n\n        // Second pass: extract file paths and operations from paired events\n        eventPairs.forEach((pair, key) => {\n            const filePath = this.extractFilePathFromPair(pair);\n\n            if (filePath) {\n                console.log('File operation detected for:', filePath, 'from pair:', key);\n\n                if (!this.fileOperations.has(filePath)) {\n                    this.fileOperations.set(filePath, {\n                        path: filePath,\n                        operations: [],\n                        lastOperation: null\n                    });\n                }\n\n                const fileData = this.fileOperations.get(filePath);\n                const operation = this.getFileOperationFromPair(pair);\n                const timestamp = pair.post_event?.timestamp || pair.pre_event?.timestamp;\n\n                const agentInfo = this.extractAgentFromPair(pair);\n                const workingDirectory = this.workingDirectoryManager.extractWorkingDirectoryFromPair(pair);\n\n                fileData.operations.push({\n                    operation: operation,\n                    timestamp: timestamp,\n                    agent: agentInfo.name,\n                    confidence: agentInfo.confidence,\n                    sessionId: pair.session_id,\n                    details: this.getFileOperationDetailsFromPair(pair),\n                    workingDirectory: workingDirectory\n                });\n                fileData.lastOperation = timestamp;\n            } else {\n                console.log('No file path found for pair:', key, pair);\n            }\n        });\n\n        console.log('updateFileOperations - final result:', this.fileOperations.size, 'file operations');\n        if (this.fileOperations.size > 0) {\n            console.log('File operations map:', Array.from(this.fileOperations.entries()));\n        }\n    }\n\n    /**\n     * Update tool calls from events - pairs pre/post tool events into complete tool calls\n     * @param {Array} events - Events to process\n     */\n    updateToolCalls(events) {\n        // Clear existing data\n        this.toolCalls.clear();\n\n        console.log('updateToolCalls - processing', events.length, 'events');\n\n        // Improved correlation strategy: collect events first, then correlate intelligently\n        const preToolEvents = [];\n        const postToolEvents = [];\n        let toolOperationCount = 0;\n\n        // First pass: separate pre_tool and post_tool events\n        events.forEach((event, index) => {\n            const isToolOp = this.isToolOperation(event);\n            if (isToolOp) toolOperationCount++;\n\n            if (index < 5) { // Debug first 5 events with more detail\n                console.log(`Tool Event ${index}:`, {\n                    type: event.type,\n                    subtype: event.subtype,\n                    tool_name: event.tool_name,\n                    tool_parameters: event.tool_parameters,\n                    isToolOp: isToolOp\n                });\n            }\n\n            if (isToolOp) {\n                if (event.subtype === 'pre_tool' || (event.type === 'hook' && event.subtype && !event.subtype.includes('post'))) {\n                    preToolEvents.push(event);\n                } else if (event.subtype === 'post_tool' || (event.subtype && event.subtype.includes('post'))) {\n                    postToolEvents.push(event);\n                } else {\n                    // For events without clear pre/post distinction, treat as standalone\n                    preToolEvents.push(event);\n                    postToolEvents.push(event);\n                }\n            }\n        });\n\n        console.log('updateToolCalls - found', toolOperationCount, 'tool operations:', preToolEvents.length, 'pre_tool,', postToolEvents.length, 'post_tool');\n\n        // Second pass: correlate pre_tool events with post_tool events\n        const toolCallPairs = new Map();\n        const usedPostEvents = new Set();\n\n        preToolEvents.forEach((preEvent, preIndex) => {\n            const toolName = preEvent.tool_name || (preEvent.data && preEvent.data.tool_name);\n            const sessionId = preEvent.session_id || (preEvent.data && preEvent.data.session_id) || 'unknown';\n            const preTimestamp = new Date(preEvent.timestamp).getTime();\n\n            // Create a base pair for this pre_tool event\n            const pairKey = `${sessionId}_${toolName}_${preIndex}_${preTimestamp}`;\n            const pair = {\n                pre_event: preEvent,\n                post_event: null,\n                tool_name: toolName,\n                session_id: sessionId,\n                operation_type: preEvent.operation_type || 'tool_execution',\n                timestamp: preEvent.timestamp,\n                duration_ms: null,\n                success: null,\n                exit_code: null,\n                result_summary: null,\n                agent_type: null,\n                agent_confidence: null\n            };\n\n            // Get agent info from pre_event\n            const agentInfo = this.extractAgentFromEvent(preEvent);\n            pair.agent_type = agentInfo.name;\n            pair.agent_confidence = agentInfo.confidence;\n\n            // Try to find matching post_tool event\n            let bestMatchIndex = -1;\n            let bestMatchScore = -1;\n            const maxTimeDiffMs = 300000; // 5 minutes max time difference\n\n            postToolEvents.forEach((postEvent, postIndex) => {\n                // Skip already used post events\n                if (usedPostEvents.has(postIndex)) return;\n\n                // Must match tool name and session\n                const postToolName = postEvent.tool_name || (postEvent.data && postEvent.data.tool_name);\n                const postSessionId = postEvent.session_id || (postEvent.data && postEvent.data.session_id) || 'unknown';\n                if (postToolName !== toolName || postSessionId !== sessionId) return;\n\n                const postTimestamp = new Date(postEvent.timestamp).getTime();\n                const timeDiff = Math.abs(postTimestamp - preTimestamp);\n\n                // Post event should generally come after pre event (or very close)\n                const isTemporallyValid = postTimestamp >= preTimestamp - 1000; // Allow 1s clock skew\n\n                // Calculate correlation score (higher is better)\n                let score = 0;\n                if (isTemporallyValid && timeDiff <= maxTimeDiffMs) {\n                    score = 1000 - (timeDiff / 1000); // Prefer closer timestamps\n\n                    // Boost score for parameter similarity (if available)\n                    if (this.compareToolParameters(preEvent, postEvent)) {\n                        score += 500;\n                    }\n\n                    // Boost score for same working directory\n                    if (preEvent.working_directory && postEvent.working_directory &&\n                        preEvent.working_directory === postEvent.working_directory) {\n                        score += 100;\n                    }\n                }\n\n                if (score > bestMatchScore) {\n                    bestMatchScore = score;\n                    bestMatchIndex = postIndex;\n                }\n            });\n\n            // If we found a good match, pair them\n            if (bestMatchIndex >= 0 && bestMatchScore > 0) {\n                const postEvent = postToolEvents[bestMatchIndex];\n                pair.post_event = postEvent;\n                pair.duration_ms = postEvent.duration_ms;\n                pair.success = postEvent.success;\n                pair.exit_code = postEvent.exit_code;\n                pair.result_summary = postEvent.result_summary;\n\n                usedPostEvents.add(bestMatchIndex);\n                console.log(`Paired pre_tool ${toolName} at ${preEvent.timestamp} with post_tool at ${postEvent.timestamp} (score: ${bestMatchScore})`);\n            } else {\n                console.log(`No matching post_tool found for ${toolName} at ${preEvent.timestamp} (still running or orphaned)`);\n            }\n\n            toolCallPairs.set(pairKey, pair);\n        });\n\n        // Third pass: handle any orphaned post_tool events (shouldn't happen but be safe)\n        postToolEvents.forEach((postEvent, postIndex) => {\n            if (usedPostEvents.has(postIndex)) return;\n\n            const toolName = postEvent.tool_name || (postEvent.data && postEvent.data.tool_name);\n            console.log('Orphaned post_tool event found:', toolName, 'at', postEvent.timestamp);\n\n            const sessionId = postEvent.session_id || (postEvent.data && postEvent.data.session_id) || 'unknown';\n            const postTimestamp = new Date(postEvent.timestamp).getTime();\n\n            const pairKey = `orphaned_${sessionId}_${toolName}_${postIndex}_${postTimestamp}`;\n            const pair = {\n                pre_event: null,\n                post_event: postEvent,\n                tool_name: toolName,\n                session_id: sessionId,\n                operation_type: 'tool_execution',\n                timestamp: postEvent.timestamp,\n                duration_ms: postEvent.duration_ms,\n                success: postEvent.success,\n                exit_code: postEvent.exit_code,\n                result_summary: postEvent.result_summary,\n                agent_type: null,\n                agent_confidence: null\n            };\n\n            const agentInfo = this.extractAgentFromEvent(postEvent);\n            pair.agent_type = agentInfo.name;\n            pair.agent_confidence = agentInfo.confidence;\n\n            toolCallPairs.set(pairKey, pair);\n        });\n\n        // Store the correlated tool calls\n        this.toolCalls = toolCallPairs;\n\n        console.log('updateToolCalls - final result:', this.toolCalls.size, 'tool calls');\n        if (this.toolCalls.size > 0) {\n            console.log('Tool calls map keys:', Array.from(this.toolCalls.keys()));\n        }\n    }\n\n    /**\n     * Check if event is a tool operation\n     * @param {Object} event - Event to check\n     * @returns {boolean} - True if tool operation\n     */\n    isToolOperation(event) {\n        // Tool operations have tool_name and are hook events with pre_tool or post_tool subtype\n        // Check both top-level and data.tool_name for compatibility\n        const hasToolName = event.tool_name || (event.data && event.data.tool_name);\n        const isHookEvent = event.type === 'hook';\n        const isToolSubtype = event.subtype === 'pre_tool' || event.subtype === 'post_tool' ||\n                              (event.subtype && typeof event.subtype === 'string' && event.subtype.includes('tool'));\n        \n        return hasToolName && isHookEvent && isToolSubtype;\n    }\n\n    /**\n     * Check if event is a file operation\n     * @param {Object} event - Event to check\n     * @returns {boolean} - True if file operation\n     */\n    isFileOperation(event) {\n        // File operations are tool events with tools that operate on files\n        // Check both top-level and data for tool_name\n        let toolName = event.tool_name || (event.data && event.data.tool_name) || '';\n        toolName = toolName.toLowerCase();\n        \n        // Check case-insensitively since tool names can come in different cases\n        const fileTools = ['read', 'write', 'edit', 'grep', 'multiedit', 'glob', 'ls', 'bash', 'notebookedit'];\n        \n        // Get tool parameters from either location\n        const toolParams = event.tool_parameters || (event.data && event.data.tool_parameters);\n\n        // Also check if Bash commands involve file operations\n        if (toolName === 'bash' && toolParams) {\n            const command = toolParams.command || '';\n            // Check for common file operations in bash commands\n            if (command.match(/\\b(cat|less|more|head|tail|touch|mv|cp|rm|mkdir|ls|find)\\b/)) {\n                return true;\n            }\n        }\n\n        return toolName && fileTools.includes(toolName);\n    }\n\n    /**\n     * Extract file path from event\n     * @param {Object} event - Event to extract from\n     * @returns {string|null} - File path or null\n     */\n    extractFilePath(event) {\n        // Try various locations where file path might be stored\n        if (event.tool_parameters?.file_path) return event.tool_parameters.file_path;\n        if (event.tool_parameters?.path) return event.tool_parameters.path;\n        if (event.tool_parameters?.notebook_path) return event.tool_parameters.notebook_path;\n        if (event.data?.tool_parameters?.file_path) return event.data.tool_parameters.file_path;\n        if (event.data?.tool_parameters?.path) return event.data.tool_parameters.path;\n        if (event.data?.tool_parameters?.notebook_path) return event.data.tool_parameters.notebook_path;\n        if (event.file_path) return event.file_path;\n        if (event.path) return event.path;\n\n        // For Glob tool, use the pattern as a pseudo-path\n        if (event.tool_name?.toLowerCase() === 'glob' && event.tool_parameters?.pattern) {\n            return `[glob] ${event.tool_parameters.pattern}`;\n        }\n\n        // For Bash commands, try to extract file paths from the command\n        if (event.tool_name?.toLowerCase() === 'bash' && event.tool_parameters?.command) {\n            const command = event.tool_parameters.command;\n            // Try to extract file paths from common patterns\n            const fileMatch = command.match(/(?:cat|less|more|head|tail|touch|mv|cp|rm|mkdir|ls|find|echo.*>|sed|awk|grep)\\s+([^\\s;|&]+)/);\n            if (fileMatch && fileMatch[1]) {\n                return fileMatch[1];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Extract file path from event pair\n     * @param {Object} pair - Event pair object\n     * @returns {string|null} - File path or null\n     */\n    extractFilePathFromPair(pair) {\n        // Try pre_event first, then post_event\n        let filePath = null;\n\n        if (pair.pre_event) {\n            filePath = this.extractFilePath(pair.pre_event);\n        }\n\n        if (!filePath && pair.post_event) {\n            filePath = this.extractFilePath(pair.post_event);\n        }\n\n        return filePath;\n    }\n\n    /**\n     * Get file operation type from event\n     * @param {Object} event - Event to analyze\n     * @returns {string} - Operation type\n     */\n    getFileOperation(event) {\n        if (!event.tool_name) return 'unknown';\n\n        const toolName = event.tool_name.toLowerCase();\n        switch (toolName) {\n            case 'read': return 'read';\n            case 'write': return 'write';\n            case 'edit': return 'edit';\n            case 'multiedit': return 'edit';\n            case 'notebookedit': return 'edit';\n            case 'grep': return 'search';\n            case 'glob': return 'search';\n            case 'ls': return 'list';\n            case 'bash':\n                // Check bash command for file operation type\n                const command = event.tool_parameters?.command || '';\n                if (command.match(/\\b(cat|less|more|head|tail)\\b/)) return 'read';\n                if (command.match(/\\b(touch|echo.*>|tee)\\b/)) return 'write';\n                if (command.match(/\\b(sed|awk)\\b/)) return 'edit';\n                if (command.match(/\\b(grep|find)\\b/)) return 'search';\n                if (command.match(/\\b(ls|dir)\\b/)) return 'list';\n                if (command.match(/\\b(mv|cp)\\b/)) return 'copy/move';\n                if (command.match(/\\b(rm|rmdir)\\b/)) return 'delete';\n                if (command.match(/\\b(mkdir)\\b/)) return 'create';\n                return 'bash';\n            default: return toolName;\n        }\n    }\n\n    /**\n     * Get file operation from event pair\n     * @param {Object} pair - Event pair object\n     * @returns {string} - Operation type\n     */\n    getFileOperationFromPair(pair) {\n        // Try pre_event first, then post_event\n        if (pair.pre_event) {\n            return this.getFileOperation(pair.pre_event);\n        }\n\n        if (pair.post_event) {\n            return this.getFileOperation(pair.post_event);\n        }\n\n        return 'unknown';\n    }\n\n    /**\n     * Extract agent information from event pair\n     * @param {Object} pair - Event pair object\n     * @returns {Object} - Agent info with name and confidence\n     */\n    extractAgentFromPair(pair) {\n        // Try to get agent info from inference system first\n        const event = pair.pre_event || pair.post_event;\n        if (event && this.agentInference) {\n            const inference = this.agentInference.getInferredAgentForEvent(event);\n            if (inference) {\n                return {\n                    name: inference.agentName || 'Unknown',\n                    confidence: inference.confidence || 'unknown'\n                };\n            }\n        }\n\n        // Fallback to direct event properties\n        const agentName = event?.agent_type || event?.subagent_type ||\n                          pair.pre_event?.agent_type || pair.post_event?.agent_type || 'PM';\n\n        return {\n            name: agentName,\n            confidence: 'direct'\n        };\n    }\n\n    /**\n     * Get detailed operation information from event pair\n     * @param {Object} pair - Event pair object\n     * @returns {Object} - Operation details\n     */\n    getFileOperationDetailsFromPair(pair) {\n        const details = {};\n\n        // Extract details from pre_event (parameters)\n        if (pair.pre_event) {\n            const params = pair.pre_event.tool_parameters || pair.pre_event.data?.tool_parameters || {};\n            details.parameters = params;\n            details.tool_input = pair.pre_event.tool_input;\n        }\n\n        // Extract details from post_event (results)\n        if (pair.post_event) {\n            details.result = pair.post_event.result;\n            details.success = pair.post_event.success;\n            details.error = pair.post_event.error;\n            details.exit_code = pair.post_event.exit_code;\n            details.duration_ms = pair.post_event.duration_ms;\n        }\n\n        return details;\n    }\n\n    /**\n     * Get file operations map\n     * @returns {Map} - File operations map\n     */\n    getFileOperations() {\n        return this.fileOperations;\n    }\n\n    /**\n     * Get tool calls map\n     * @returns {Map} - Tool calls map\n     */\n    getToolCalls() {\n        return this.toolCalls;\n    }\n\n    /**\n     * Get tool calls as array for unique instance view\n     * Each entry represents a unique tool call instance\n     * @returns {Array} - Array of [key, toolCall] pairs\n     */\n    getToolCallsArray() {\n        return Array.from(this.toolCalls.entries());\n    }\n\n    /**\n     * Get file operations for a specific file\n     * @param {string} filePath - File path\n     * @returns {Object|null} - File operations data or null\n     */\n    getFileOperationsForFile(filePath) {\n        return this.fileOperations.get(filePath) || null;\n    }\n\n    /**\n     * Get tool call by key\n     * @param {string} key - Tool call key\n     * @returns {Object|null} - Tool call data or null\n     */\n    getToolCall(key) {\n        return this.toolCalls.get(key) || null;\n    }\n\n    /**\n     * Clear all tracking data\n     */\n    clear() {\n        this.fileOperations.clear();\n        this.toolCalls.clear();\n        console.log('File-tool tracker cleared');\n    }\n\n    /**\n     * Get statistics about tracked operations\n     * @returns {Object} - Statistics\n     */\n    getStatistics() {\n        return {\n            fileOperations: this.fileOperations.size,\n            toolCalls: this.toolCalls.size,\n            uniqueFiles: this.fileOperations.size,\n            totalFileOperations: Array.from(this.fileOperations.values())\n                .reduce((sum, data) => sum + data.operations.length, 0)\n        };\n    }\n\n    /**\n     * Compare tool parameters between pre_tool and post_tool events\n     * to determine if they're likely from the same tool call\n     * @param {Object} preEvent - Pre-tool event\n     * @param {Object} postEvent - Post-tool event\n     * @returns {boolean} - True if parameters suggest same tool call\n     */\n    compareToolParameters(preEvent, postEvent) {\n        // Extract parameters from both events\n        const preParams = preEvent.tool_parameters || preEvent.data?.tool_parameters || {};\n        const postParams = postEvent.tool_parameters || postEvent.data?.tool_parameters || {};\n\n        // If no parameters in either event, can't compare meaningfully\n        if (Object.keys(preParams).length === 0 && Object.keys(postParams).length === 0) {\n            return false; // No boost for empty parameters\n        }\n\n        // Compare key parameters that are likely to be the same\n        const importantParams = ['file_path', 'path', 'pattern', 'command', 'notebook_path'];\n        let matchedParams = 0;\n        let totalComparableParams = 0;\n\n        importantParams.forEach(param => {\n            const preValue = preParams[param];\n            const postValue = postParams[param];\n\n            if (preValue !== undefined || postValue !== undefined) {\n                totalComparableParams++;\n                if (preValue === postValue) {\n                    matchedParams++;\n                }\n            }\n        });\n\n        // If we found comparable parameters, check if most match\n        if (totalComparableParams > 0) {\n            return (matchedParams / totalComparableParams) >= 0.8; // 80% parameter match threshold\n        }\n\n        // If no important parameters to compare, check if the parameter structure is similar\n        const preKeys = Object.keys(preParams).sort();\n        const postKeys = Object.keys(postParams).sort();\n\n        if (preKeys.length === 0 && postKeys.length === 0) {\n            return false;\n        }\n\n        // Simple structural similarity check\n        if (preKeys.length === postKeys.length) {\n            const keyMatches = preKeys.filter(key => postKeys.includes(key)).length;\n            return keyMatches >= Math.max(1, preKeys.length * 0.5); // At least 50% key overlap\n        }\n\n        return false;\n    }\n\n    /**\n     * Extract agent information from event using inference system\n     * @param {Object} event - Event to extract agent from\n     * @returns {Object} - Agent info with name and confidence\n     */\n    extractAgentFromEvent(event) {\n        if (this.agentInference) {\n            const inference = this.agentInference.getInferredAgentForEvent(event);\n            if (inference) {\n                return {\n                    name: inference.agentName || 'Unknown',\n                    confidence: inference.confidence || 'unknown'\n                };\n            }\n        }\n\n        // Fallback to direct event properties\n        const agentName = event.agent_type || event.subagent_type ||\n                          event.data?.agent_type || event.data?.subagent_type || 'PM';\n\n        return {\n            name: agentName,\n            confidence: 'direct'\n        };\n    }\n}\n// ES6 Module export\nexport { FileToolTracker };\nexport default FileToolTracker;\n"],"names":["FileToolTracker","constructor","agentInference","workingDirectoryManager","this","fileOperations","Map","toolCalls","console","log","updateFileOperations","events","clear","length","eventPairs","fileOperationCount","forEach","event","index","isFileOp","isFileOperation","type","subtype","tool_name","tool_parameters","toolName","data","sessionId","session_id","eventKey","Math","floor","Date","timestamp","getTime","has","set","pre_event","post_event","pair","get","includes","size","key","filePath","extractFilePathFromPair","path","operations","lastOperation","fileData","operation","getFileOperationFromPair","agentInfo","extractAgentFromPair","workingDirectory","extractWorkingDirectoryFromPair","push","agent","name","confidence","details","getFileOperationDetailsFromPair","Array","from","entries","updateToolCalls","preToolEvents","postToolEvents","toolOperationCount","isToolOp","isToolOperation","toolCallPairs","usedPostEvents","Set","preEvent","preIndex","preTimestamp","pairKey","operation_type","duration_ms","success","exit_code","result_summary","agent_type","agent_confidence","extractAgentFromEvent","bestMatchIndex","bestMatchScore","postEvent","postIndex","postToolName","postSessionId","postTimestamp","timeDiff","abs","score","compareToolParameters","working_directory","add","keys","hasToolName","isHookEvent","isToolSubtype","toLowerCase","toolParams","command","match","extractFilePath","file_path","notebook_path","pattern","fileMatch","getFileOperation","inference","getInferredAgentForEvent","agentName","subagent_type","params","parameters","tool_input","result","error","getFileOperations","getToolCalls","getToolCallsArray","getFileOperationsForFile","getToolCall","getStatistics","uniqueFiles","totalFileOperations","values","reduce","sum","preParams","postParams","Object","matchedParams","totalComparableParams","param","preValue","postValue","preKeys","sort","postKeys","filter","max"],"mappings":"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"}