{"version":3,"file":"hud-library-loader.js","sources":["../../js/components/hud-library-loader.js"],"sourcesContent":["/**\n * HUD Library Loader\n * Handles lazy loading of Cytoscape.js and its dependencies with proper loading order\n */\n\nclass HUDLibraryLoader {\n    constructor() {\n        this.loadedLibraries = new Set();\n        this.loadingPromises = new Map();\n        this.loadingCallbacks = new Map();\n\n        // Define library configurations with proper loading order\n        this.libraries = [\n            {\n                name: 'cytoscape',\n                url: 'https://unpkg.com/cytoscape@3.26.0/dist/cytoscape.min.js',\n                globalCheck: () => typeof window.cytoscape !== 'undefined',\n                dependencies: []\n            },\n            {\n                name: 'dagre',\n                url: 'https://unpkg.com/dagre@0.8.5/dist/dagre.min.js',\n                globalCheck: () => typeof window.dagre !== 'undefined',\n                dependencies: []\n            },\n            {\n                name: 'cytoscape-dagre',\n                url: 'https://unpkg.com/cytoscape-dagre@2.5.0/cytoscape-dagre.js',\n                globalCheck: () => typeof window.cytoscapeDagre !== 'undefined',\n                dependencies: ['cytoscape', 'dagre']\n            }\n        ];\n    }\n\n    /**\n     * Load a single library via script tag\n     * @param {Object} library - Library configuration object\n     * @returns {Promise} - Promise that resolves when library is loaded\n     */\n    loadLibrary(library) {\n        // Check if already loaded\n        if (library.globalCheck()) {\n            this.loadedLibraries.add(library.name);\n            return Promise.resolve();\n        }\n\n        // Check if already loading\n        if (this.loadingPromises.has(library.name)) {\n            return this.loadingPromises.get(library.name);\n        }\n\n        console.log(`Loading library: ${library.name} from ${library.url}`);\n\n        const promise = new Promise((resolve, reject) => {\n            const script = document.createElement('script');\n            script.src = library.url;\n            script.async = true;\n\n            script.onload = () => {\n                if (library.globalCheck()) {\n                    console.log(`Successfully loaded library: ${library.name}`);\n                    this.loadedLibraries.add(library.name);\n                    this.loadingPromises.delete(library.name);\n                    resolve();\n                } else {\n                    const error = new Error(`Library ${library.name} failed global check after loading`);\n                    console.error(error);\n                    this.loadingPromises.delete(library.name);\n                    reject(error);\n                }\n            };\n\n            script.onerror = () => {\n                const error = new Error(`Failed to load library: ${library.name} from ${library.url}`);\n                console.error(error);\n                this.loadingPromises.delete(library.name);\n                reject(error);\n            };\n\n            document.head.appendChild(script);\n        });\n\n        this.loadingPromises.set(library.name, promise);\n        return promise;\n    }\n\n    /**\n     * Load dependencies for a library\n     * @param {Array} dependencies - Array of dependency names\n     * @returns {Promise} - Promise that resolves when all dependencies are loaded\n     */\n    async loadDependencies(dependencies) {\n        const dependencyPromises = dependencies.map(depName => {\n            const depLibrary = this.libraries.find(lib => lib.name === depName);\n            if (!depLibrary) {\n                throw new Error(`Dependency ${depName} not found in library configuration`);\n            }\n            return this.loadLibraryWithDependencies(depLibrary);\n        });\n\n        return Promise.all(dependencyPromises);\n    }\n\n    /**\n     * Load a library and all its dependencies\n     * @param {Object} library - Library configuration object\n     * @returns {Promise} - Promise that resolves when library and dependencies are loaded\n     */\n    async loadLibraryWithDependencies(library) {\n        // Load dependencies first\n        if (library.dependencies.length > 0) {\n            await this.loadDependencies(library.dependencies);\n        }\n\n        // Then load the library itself\n        return this.loadLibrary(library);\n    }\n\n    /**\n     * Load all HUD visualization libraries in correct order\n     * @param {Function} onProgress - Optional progress callback\n     * @returns {Promise} - Promise that resolves when all libraries are loaded\n     */\n    async loadHUDLibraries(onProgress = null) {\n        console.log('Starting HUD libraries loading...');\n\n        try {\n            // Load libraries in dependency order\n            for (let i = 0; i < this.libraries.length; i++) {\n                const library = this.libraries[i];\n\n                if (onProgress) {\n                    onProgress({\n                        library: library.name,\n                        current: i + 1,\n                        total: this.libraries.length,\n                        message: `Loading ${library.name}...`\n                    });\n                }\n\n                await this.loadLibraryWithDependencies(library);\n            }\n\n            // Verify all libraries are loaded\n            const missingLibraries = this.libraries.filter(lib => !lib.globalCheck());\n            if (missingLibraries.length > 0) {\n                throw new Error(`Failed to load libraries: ${missingLibraries.map(lib => lib.name).join(', ')}`);\n            }\n\n            console.log('All HUD libraries loaded successfully');\n\n            if (onProgress) {\n                onProgress({\n                    library: 'complete',\n                    current: this.libraries.length,\n                    total: this.libraries.length,\n                    message: 'All libraries loaded successfully'\n                });\n            }\n\n            return true;\n        } catch (error) {\n            console.error('Failed to load HUD libraries:', error);\n\n            if (onProgress) {\n                onProgress({\n                    library: 'error',\n                    current: 0,\n                    total: this.libraries.length,\n                    message: `Error: ${error.message}`,\n                    error: error\n                });\n            }\n\n            throw error;\n        }\n    }\n\n    /**\n     * Check if all HUD libraries are loaded\n     * @returns {boolean} - True if all libraries are loaded\n     */\n    areLibrariesLoaded() {\n        return this.libraries.every(lib => lib.globalCheck());\n    }\n\n    /**\n     * Get loading status for all libraries\n     * @returns {Object} - Status object with library loading states\n     */\n    getLoadingStatus() {\n        return {\n            loaded: Array.from(this.loadedLibraries),\n            loading: Array.from(this.loadingPromises.keys()),\n            total: this.libraries.length,\n            allLoaded: this.areLibrariesLoaded()\n        };\n    }\n\n    /**\n     * Reset loader state (for testing purposes)\n     */\n    reset() {\n        this.loadedLibraries.clear();\n        this.loadingPromises.clear();\n        this.loadingCallbacks.clear();\n    }\n}\n\n// Create singleton instance\nwindow.HUDLibraryLoader = new HUDLibraryLoader();\n"],"names":["window","HUDLibraryLoader","constructor","this","loadedLibraries","Set","loadingPromises","Map","loadingCallbacks","libraries","name","url","globalCheck","cytoscape","dependencies","dagre","cytoscapeDagre","loadLibrary","library","add","Promise","resolve","has","get","console","log","promise","reject","script","document","createElement","src","async","onload","delete","error","Error","onerror","head","appendChild","set","loadDependencies","dependencyPromises","map","depName","depLibrary","find","lib","loadLibraryWithDependencies","all","length","loadHUDLibraries","onProgress","i","current","total","message","missingLibraries","filter","join","areLibrariesLoaded","every","getLoadingStatus","loaded","Array","from","loading","keys","allLoaded","reset","clear"],"mappings":"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"}