{"version":3,"file":"code-viewer.js","sources":["../../js/components/code-viewer.js"],"sourcesContent":["/**\n * Code Viewer Component - File Activity Tree Viewer\n * \n * Shows a D3.js tree visualization of files that have been viewed or edited,\n * including AST paths (classes, functions, methods) extracted from the files.\n * This is NOT a directory viewer but an activity-focused visualization.\n * Renders in the File Tree tab of the dashboard.\n */\n\nclass CodeViewer {\n    constructor() {\n        this.container = null;\n        this.svg = null;\n        this.initialized = false;\n        this.fileActivity = new Map(); // Map of file path to activity data\n        this.sessions = new Map();\n        this.currentSession = null;\n        this.treeData = null;\n        this.d3Tree = null;\n        this.d3Root = null;\n        this.selectedNode = null;\n        this.width = 800;\n        this.height = 600;\n        this.nodeRadius = 5;\n        this.renderInProgress = false; // Prevent concurrent renders\n        this.containerObserver = null;\n    }\n\n    /**\n     * Initialize the code viewer\n     */\n    initialize() {\n        console.log('[CodeViewer] initialize() called');\n        if (this.initialized) {\n            console.log('[CodeViewer] Already initialized, skipping');\n            return;\n        }\n\n        console.log('[CodeViewer] Starting initialization...');\n        try {\n            // Initialize components\n            this.setupContainer();\n            console.log('[CodeViewer] Container setup complete');\n            \n            this.setupEventHandlers();\n            console.log('[CodeViewer] Event handlers setup complete');\n            \n            this.subscribeToEvents();\n            console.log('[CodeViewer] Event subscription complete');\n            \n            this.processExistingEvents();\n            console.log('[CodeViewer] Existing events processed');\n            \n            this.initialized = true;\n            console.log('[CodeViewer] Initialization complete!');\n        } catch (error) {\n            console.error('[CodeViewer] Error during initialization:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Setup the container in the File Tree tab\n     */\n    setupContainer() {\n        // Find the File Tree tab container\n        const treeContainer = document.getElementById('claude-tree-container');\n        if (!treeContainer) {\n            console.error('File Tree container not found');\n            return;\n        }\n\n        // Store the container reference\n        this.container = treeContainer;\n        \n        // Setup the activity tree interface\n        this.renderInterface();\n    }\n\n    /**\n     * Render the activity tree interface in the File Tree tab\n     */\n    renderInterface() {\n        if (!this.container) {\n            console.error('[CodeViewer] Container not found, cannot render interface');\n            return;\n        }\n\n        // Prevent concurrent renders\n        if (this.renderInProgress) {\n            return;\n        }\n        \n        // Check if interface already exists and is intact\n        const existingWrapper = this.container.querySelector('.activity-tree-wrapper');\n        const existingEmptyState = this.container.querySelector('.file-tree-empty-state');\n        const existingSvg = this.container.querySelector('#claude-activity-tree-svg');\n        \n        // Always show the tree interface, even if empty\n        // We'll show at least a session root node\n        // Remove the empty state check - we always want the tree\n        if (false) { // Disabled empty state - always show tree\n            // Only render empty state if it doesn't exist\n            if (!existingEmptyState) {\n                this.renderInProgress = true;\n                \n                // Temporarily disconnect observer to prevent loops\n                if (this.containerObserver) {\n                    this.containerObserver.disconnect();\n                }\n                \n                // Clear any existing content completely\n                this.container.innerHTML = '';\n                \n                // Show empty state\n                this.container.innerHTML = `\n                    <div class=\"file-tree-empty-state\" style=\"\n                        text-align: center; \n                        padding: 50px 20px;\n                        color: #666;\n                        font-family: monospace;\n                        height: 100%;\n                        display: flex;\n                        flex-direction: column;\n                        justify-content: center;\n                        align-items: center;\n                        background: #fafafa;\n                    \">\n                        <h2 style=\"color: #333; margin-bottom: 20px; font-size: 24px;\">\n                            üìÅ File Activity Tree\n                        </h2>\n                        <p style=\"margin-bottom: 15px; font-size: 16px;\">\n                            No file operations recorded yet.\n                        </p>\n                        <p style=\"font-size: 14px; color: #888;\">\n                            The tree will appear here when files are:\n                        </p>\n                        <ul style=\"\n                            list-style: none; \n                            padding: 20px 30px; \n                            text-align: left; \n                            display: inline-block;\n                            background: white;\n                            border: 1px solid #e0e0e0;\n                            border-radius: 5px;\n                            margin-top: 10px;\n                            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                        \">\n                            <li style=\"margin: 8px 0;\">üìñ Read (using Read tool)</li>\n                            <li style=\"margin: 8px 0;\">‚úèÔ∏è Edited (using Edit tool)</li>\n                            <li style=\"margin: 8px 0;\">üíæ Written (using Write tool)</li>\n                            <li style=\"margin: 8px 0;\">üìù Multi-edited (using MultiEdit tool)</li>\n                            <li style=\"margin: 8px 0;\">üìì Notebook edited (using NotebookEdit tool)</li>\n                        </ul>\n                        <p style=\"margin-top: 20px; font-size: 12px; color: #999;\">\n                            D3.js tree visualization will render automatically when file operations occur\n                        </p>\n                    </div>\n                `;\n                \n                // Mark render as complete and re-enable observer if needed\n                this.renderInProgress = false;\n                \n                // Re-enable container protection after render\n                if (this.containerObserver && this.container) {\n                    this.containerObserver.observe(this.container, {\n                        childList: true,\n                        subtree: false // Only watch direct children, not subtree\n                    });\n                }\n            }\n            return;\n        }\n        \n        // If we have file activity and the interface already exists, skip\n        if (existingWrapper && existingSvg) {\n            return;\n        }\n        \n        this.renderInProgress = true;\n        \n        // Temporarily disconnect observer to prevent loops\n        if (this.containerObserver) {\n            this.containerObserver.disconnect();\n        }\n        \n        // Clear any existing content completely\n        this.container.innerHTML = '';\n        \n        // Create the activity tree interface (without redundant session selector)\n        this.container.innerHTML = `\n            <div class=\"activity-tree-wrapper\" style=\"height: 100%; display: flex; flex-direction: column;\">\n                <div class=\"activity-controls\" style=\"padding: 10px; border-bottom: 1px solid #ddd; background: #f9f9f9; display: flex; align-items: center; gap: 10px;\">\n                    <button id=\"claude-expand-all-btn\" class=\"control-btn\" style=\"padding: 4px 8px; font-size: 0.9em;\">Expand All</button>\n                    <button id=\"claude-collapse-all-btn\" class=\"control-btn\" style=\"padding: 4px 8px; font-size: 0.9em;\">Collapse All</button>\n                    <button id=\"claude-reset-zoom-btn\" class=\"control-btn\" style=\"padding: 4px 8px; font-size: 0.9em;\">Reset Zoom</button>\n                    <div class=\"stats\" id=\"claude-tree-stats\" style=\"margin-left: auto; font-size: 0.9em; color: #666;\"></div>\n                </div>\n                <div class=\"tree-container\" id=\"claude-tree-svg-container\" style=\"flex: 1; overflow: hidden; position: relative; background: white;\">\n                    <svg id=\"claude-activity-tree-svg\" style=\"width: 100%; height: 100%;\"></svg>\n                </div>\n                <div class=\"legend\" style=\"padding: 5px 10px; border-top: 1px solid #ddd; background: #f9f9f9; font-size: 0.85em; display: flex; gap: 15px;\">\n                    <span class=\"legend-item\"><span style=\"color: #4CAF50;\">‚óè</span> File</span>\n                    <span class=\"legend-item\"><span style=\"color: #2196F3;\">‚óè</span> Class</span>\n                    <span class=\"legend-item\"><span style=\"color: #FF9800;\">‚óè</span> Function</span>\n                    <span class=\"legend-item\"><span style=\"color: #9C27B0;\">‚óè</span> Method</span>\n                    <span class=\"legend-item\"><span style=\"color: #F44336;\">‚óÜ</span> Edited</span>\n                    <span class=\"legend-item\"><span style=\"color: #4CAF50;\">‚óã</span> Viewed</span>\n                </div>\n            </div>\n        `;\n\n        // Get container dimensions for tree sizing\n        const svgContainer = document.getElementById('claude-tree-svg-container');\n        if (svgContainer) {\n            const rect = svgContainer.getBoundingClientRect();\n            this.width = rect.width || 800;\n            this.height = rect.height || 600;\n        }\n        \n        // Mark render as complete and re-enable observer if needed\n        this.renderInProgress = false;\n        \n        // Re-enable container protection after render\n        if (this.containerObserver && this.container) {\n            this.containerObserver.observe(this.container, {\n                childList: true,\n                subtree: false // Only watch direct children, not subtree\n            });\n        }\n    }\n\n    /**\n     * Render the content without switching tabs\n     * This is called by UIStateManager when the tab is already active\n     */\n    renderContent() {\n        this._showInternal();\n    }\n    \n    /**\n     * Show the activity tree (for backward compatibility)\n     * Note: Tab switching is now handled by UIStateManager\n     */\n    show() {\n        this._showInternal();\n    }\n    \n    /**\n     * Internal show implementation (without tab switching)\n     */\n    _showInternal() {\n        console.log('[CodeViewer] _showInternal() called');\n\n        // Get the file tree container\n        const claudeTreeContainer = document.getElementById('claude-tree-container');\n        if (!claudeTreeContainer) {\n            console.error('[CodeViewer] File Tree container not found!');\n            return;\n        }\n\n        console.log('[CodeViewer] Found container, current HTML length:', claudeTreeContainer.innerHTML.length);\n        console.log('[CodeViewer] Container children:', claudeTreeContainer.children.length);\n\n        // Refresh from FileToolTracker to get latest data\n        this.refreshFromFileToolTracker();\n        \n        // CRITICAL: Clear any foreign content first - more aggressive cleanup\n        const foreignSelectors = [\n            '#events-list',\n            '.events-list',\n            '.event-item',\n            '.no-events',\n            '[id*=\"event\"]',\n            '[class*=\"event\"]'\n        ];\n        \n        let foundForeign = false;\n        foreignSelectors.forEach(selector => {\n            const elements = claudeTreeContainer.querySelectorAll(selector);\n            if (elements.length > 0) {\n                console.warn(`[CodeViewer] Found ${elements.length} foreign elements matching '${selector}', removing...`);\n                elements.forEach(el => el.remove());\n                foundForeign = true;\n            }\n        });\n        \n        if (foundForeign) {\n            console.warn('[CodeViewer] Foreign content removed, clearing container completely for fresh start');\n            claudeTreeContainer.innerHTML = '';\n        }\n\n        // CRITICAL: Prevent other components from writing to this container\n        // Add multiple attributes to mark ownership strongly\n        claudeTreeContainer.setAttribute('data-owner', 'code-viewer');\n        claudeTreeContainer.setAttribute('data-tab-reserved', 'claude-tree');\n        claudeTreeContainer.setAttribute('data-component', 'CodeViewer');\n        \n        // Store the container reference if not already set\n        if (!this.container || this.container !== claudeTreeContainer) {\n            this.container = claudeTreeContainer;\n        }\n        \n        // Initialize if needed (this will setup container and render interface)\n        if (!this.initialized) {\n            this.initialize();\n        } else {\n            // Always render interface - it will handle empty state or tree as needed\n            const existingWrapper = this.container.querySelector('.activity-tree-wrapper');\n            const existingEmptyState = this.container.querySelector('.file-tree-empty-state');\n            if (!existingWrapper && !existingEmptyState) {\n                this.renderInterface();\n            }\n        }\n        \n        // Set up mutation observer to protect container (only if not already set)\n        if (!this.containerObserver) {\n            this.protectContainer();\n        }\n\n        // Always setup event handlers and render tree\n        // Even with no file activity, we show a session root\n        this.setupControlHandlers();\n        \n        // Get current session from main selector\n        const mainSessionSelect = document.getElementById('session-select');\n        if (mainSessionSelect) {\n            this.currentSession = mainSessionSelect.value || null;\n        }\n        \n        // Build and render tree (will create minimal session root if no data)\n        this.buildTreeData();\n        this.renderTree();\n        \n        // Update stats\n        this.updateStats();\n    }\n\n    /**\n     * Protect the container from being overwritten by other components\n     */\n    protectContainer() {\n        const container = document.getElementById('claude-tree-container');\n        if (!container) return;\n        \n        // Disconnect any existing observer\n        if (this.containerObserver) {\n            this.containerObserver.disconnect();\n        }\n        \n        // Flag to prevent re-render loops\n        let reRenderScheduled = false;\n        \n        // Create a new observer to watch for unwanted changes\n        this.containerObserver = new MutationObserver((mutations) => {\n            for (const mutation of mutations) {\n                // Check if nodes were added that shouldn't be there\n                for (const node of mutation.addedNodes) {\n                    if (node.nodeType === Node.ELEMENT_NODE) {\n                        const element = node;\n                        \n                        // AGGRESSIVE filtering: Block ANY content that's not our tree interface or empty state\n                        const isUnwantedContent = (\n                            element.classList?.contains('event-item') ||\n                            element.classList?.contains('events-list') ||\n                            element.classList?.contains('no-events') ||\n                            element.id === 'events-list' ||\n                            element.id === 'agents-list' ||\n                            element.id === 'tools-list' ||\n                            element.id === 'files-list' ||\n                            (element.textContent && (\n                                element.textContent.includes('[hook]') ||\n                                element.textContent.includes('hook.user_prompt') ||\n                                element.textContent.includes('hook.pre_tool') ||\n                                element.textContent.includes('hook.post_tool') ||\n                                element.textContent.includes('Connect to Socket.IO') ||\n                                element.textContent.includes('No events') ||\n                                element.textContent.includes('No agent events') ||\n                                element.textContent.includes('No tool events') ||\n                                element.textContent.includes('No file operations')\n                            )) ||\n                            // Block any div without our expected classes\n                            (element.tagName === 'DIV' && \n                             !element.classList?.contains('activity-tree-wrapper') &&\n                             !element.classList?.contains('file-tree-empty-state') &&\n                             !element.classList?.contains('activity-controls') &&\n                             !element.classList?.contains('tree-container') &&\n                             !element.classList?.contains('legend') &&\n                             !element.classList?.contains('stats') &&\n                             !element.id?.startsWith('claude-'))\n                        );\n                        \n                        if (isUnwantedContent) {\n                            // Block unwanted content silently\n                            \n                            // Remove the unwanted content immediately\n                            try {\n                                node.remove();\n                            } catch (e) {\n                                console.warn('[CodeViewer] Failed to remove unwanted node:', e);\n                            }\n                            \n                            // Schedule a single re-render if needed\n                            if (!reRenderScheduled && !this.renderInProgress) {\n                                reRenderScheduled = true;\n                                setTimeout(() => {\n                                    reRenderScheduled = false;\n                                    if (!container.querySelector('.activity-tree-wrapper') && \n                                        !container.querySelector('.file-tree-empty-state')) {\n                                        this.renderInterface();\n                                        \n                                        // Always setup controls and tree (even if no file activity)\n                                        this.setupControlHandlers();\n                                        this.buildTreeData();\n                                        this.renderTree();\n                                    }\n                                }, 50);\n                            }\n                        }\n                    }\n                }\n                \n                // Also check if our content was removed\n                if (mutation.type === 'childList' && mutation.removedNodes.length > 0) {\n                    for (const node of mutation.removedNodes) {\n                        if (node.nodeType === Node.ELEMENT_NODE) {\n                            const element = node;\n                            if (element.classList?.contains('activity-tree-wrapper') || \n                                element.classList?.contains('file-tree-empty-state')) {\n                                if (!reRenderScheduled && !this.renderInProgress) {\n                                    reRenderScheduled = true;\n                                    setTimeout(() => {\n                                        reRenderScheduled = false;\n                                        this.renderInterface();\n                                        \n                                        // Always setup controls and tree (even if no file activity)\n                                        this.setupControlHandlers();\n                                        this.buildTreeData();\n                                        this.renderTree();\n                                    }, 50);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n        \n        // Start observing only direct children to reduce overhead\n        this.containerObserver.observe(container, {\n            childList: true,\n            subtree: false // Only watch direct children, not entire subtree\n        });\n    }\n\n    /**\n     * Setup event handlers for controls\n     */\n    setupControlHandlers() {\n        // Listen to main session selector changes\n        const mainSessionSelect = document.getElementById('session-select');\n        if (mainSessionSelect && !mainSessionSelect.hasAttribute('data-tree-listener')) {\n            mainSessionSelect.setAttribute('data-tree-listener', 'true');\n            mainSessionSelect.addEventListener('change', (e) => {\n                this.currentSession = e.target.value || null;\n                if (this.isTabActive()) {\n                    this.buildTreeData();\n                    this.renderTree();\n                    this.updateStats();\n                }\n            });\n        }\n\n        // Expand all button\n        const expandBtn = document.getElementById('claude-expand-all-btn');\n        if (expandBtn && !expandBtn.hasAttribute('data-listener')) {\n            expandBtn.setAttribute('data-listener', 'true');\n            expandBtn.addEventListener('click', () => {\n                this.expandAllNodes();\n            });\n        }\n\n        // Collapse all button\n        const collapseBtn = document.getElementById('claude-collapse-all-btn');\n        if (collapseBtn && !collapseBtn.hasAttribute('data-listener')) {\n            collapseBtn.setAttribute('data-listener', 'true');\n            collapseBtn.addEventListener('click', () => {\n                this.collapseAllNodes();\n            });\n        }\n\n        // Reset zoom button\n        const resetBtn = document.getElementById('claude-reset-zoom-btn');\n        if (resetBtn && !resetBtn.hasAttribute('data-listener')) {\n            resetBtn.setAttribute('data-listener', 'true');\n            resetBtn.addEventListener('click', () => {\n                this.resetZoom();\n            });\n        }\n    }\n\n    /**\n     * Setup event handlers\n     */\n    setupEventHandlers() {\n        // Tab handling is done in show() method\n    }\n\n    /**\n     * Subscribe to events from socket and event bus\n     */\n    subscribeToEvents() {\n        // Listen for claude events from socket\n        if (window.socket) {\n            window.socket.on('claude_event', (event) => {\n\n                // When we get file operation events, refresh from FileToolTracker\n                if (this.isFileOperationEvent(event) || this.isDirectFileEvent(event)) {\n                    // Let FileToolTracker process the event first, then refresh our view\n                    setTimeout(() => {\n                        this.refreshFromFileToolTracker();\n                        // Only update if the File Tree tab is active\n                        if (this.isTabActive()) {\n                            this.buildTreeData();\n                            this.renderTree();\n                            this.updateStats();\n                        }\n                    }, 100);\n                }\n            });\n            \n            // Also listen for specific file events\n            window.socket.on('file:read', (data) => {\n                this.handleDirectFileEvent('Read', data);\n            });\n            \n            window.socket.on('file:write', (data) => {\n                this.handleDirectFileEvent('Write', data);\n            });\n            \n            window.socket.on('file:edit', (data) => {\n                this.handleDirectFileEvent('Edit', data);\n            });\n        }\n\n        // Listen for events from event bus\n        if (window.eventBus) {\n            window.eventBus.on('claude_event', (event) => {\n                \n                // Process both hook events and direct file operation events\n                if (this.isFileOperationEvent(event) || this.isDirectFileEvent(event)) {\n                    this.processClaudeEvent(event);\n                    // Only update if the File Tree tab is active\n                    if (this.isTabActive()) {\n                        this.buildTreeData();\n                        this.renderTree();\n                        this.updateStats();\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Check if File Tree tab is active\n     */\n    isTabActive() {\n        const claudeTreeContent = document.getElementById('claude-tree-tab');\n        return claudeTreeContent && claudeTreeContent.classList.contains('active');\n    }\n\n    /**\n     * Process existing events from dashboard\n     */\n    processExistingEvents() {\n        console.log('[CodeViewer] processExistingEvents called');\n\n        // First try to use FileToolTracker data if available\n        if (window.dashboard && window.dashboard.fileToolTracker) {\n            this.refreshFromFileToolTracker();\n            return;\n        }\n\n        // Fallback to event store if FileToolTracker not available\n        if (window.dashboard && window.dashboard.eventStore) {\n            const events = window.dashboard.eventStore.getAllEvents();\n            console.log('[CodeViewer] Fallback to eventStore, total events:', events.length);\n            \n            let fileOpCount = 0;\n            let processedCount = 0;\n            \n            events.forEach(event => {\n                // Log detailed info about each event for debugging\n                if (event.type === 'hook') {\n                    console.log('[CodeViewer] Hook event:', {\n                        subtype: event.subtype,\n                        tool_name: event.data?.tool_name,\n                        timestamp: event.timestamp\n                    });\n                }\n                \n                if (this.isFileOperationEvent(event)) {\n                    fileOpCount++;\n                    console.log('[CodeViewer] Found file operation event:', event);\n                    this.processClaudeEvent(event);\n                    processedCount++;\n                }\n            });\n            \n            console.log('[CodeViewer] processExistingEvents summary:', {\n                totalEvents: events.length,\n                fileOperations: fileOpCount,\n                processed: processedCount,\n                currentFileActivitySize: this.fileActivity.size\n            });\n        } else {\n            console.log('[CodeViewer] No dashboard or eventStore available');\n        }\n    }\n\n    /**\n     * Check if an event is a file operation event\n     */\n    isFileOperationEvent(event) {\n        // Check if this is a hook event with file operation tool\n        if (event.type === 'hook' && \n            (event.subtype === 'pre_tool' || event.subtype === 'post_tool') &&\n            event.data && event.data.tool_name) {\n            const fileOps = ['Read', 'Write', 'Edit', 'MultiEdit', 'NotebookEdit'];\n            return fileOps.includes(event.data.tool_name);\n        }\n        return false;\n    }\n    \n    /**\n     * Check if an event is a direct file event (not wrapped in hook)\n     */\n    isDirectFileEvent(event) {\n        // Check if this is a direct file operation event\n        if (event.type === 'file_operation' || \n            (event.tool && ['Read', 'Write', 'Edit', 'MultiEdit', 'NotebookEdit'].includes(event.tool))) {\n            return true;\n        }\n        return false;\n    }\n    \n    /**\n     * Handle direct file events from WebSocket\n     */\n    handleDirectFileEvent(tool_name, data) {\n        const event = {\n            type: 'file_operation',\n            tool: tool_name,\n            data: {\n                tool_name: tool_name,\n                tool_parameters: data.parameters || data,\n                tool_output: data.output || null,\n                session_id: data.session_id || this.currentSession,\n                working_directory: data.working_directory || '/'\n            },\n            timestamp: data.timestamp || new Date().toISOString()\n        };\n        \n        this.processClaudeEvent(event);\n        \n        // Only update if the File Tree tab is active\n        if (this.isTabActive()) {\n            this.buildTreeData();\n            this.renderTree();\n            this.updateStats();\n        }\n    }\n\n    /**\n     * Check if an event is a file operation (legacy format)\n     */\n    isFileOperation(event) {\n        const fileOps = ['Read', 'Write', 'Edit', 'MultiEdit', 'NotebookEdit'];\n        return fileOps.includes(event.tool_name);\n    }\n\n    /**\n     * Process a claude event with file operation\n     */\n    processClaudeEvent(event) {\n        // Handle both hook events and direct file events\n        if (!this.isFileOperationEvent(event) && !this.isDirectFileEvent(event)) return;\n\n        let tool_name, tool_parameters, tool_output, timestamp, session_id, working_directory, filePath;\n        \n        // Extract data based on event format\n        if (this.isFileOperationEvent(event)) {\n            // Hook event format\n            const data = event.data || {};\n            tool_name = data.tool_name;\n            tool_parameters = data.tool_parameters || {};\n            tool_output = data.tool_output;\n            timestamp = event.timestamp || new Date().toISOString();\n            session_id = event.session_id || data.session_id;\n            working_directory = data.working_directory || '/';\n        } else if (this.isDirectFileEvent(event)) {\n            // Direct file event format\n            const data = event.data || event;\n            tool_name = event.tool || data.tool_name;\n            tool_parameters = data.tool_parameters || data.parameters || {};\n            tool_output = data.tool_output || data.output;\n            timestamp = event.timestamp || data.timestamp || new Date().toISOString();\n            session_id = event.session_id || data.session_id;\n            working_directory = data.working_directory || '/';\n        }\n        \n        filePath = tool_parameters.file_path || tool_parameters.notebook_path;\n        \n        this.processFileOperation({\n            tool_name,\n            tool_parameters,\n            tool_output,\n            timestamp,\n            session_id,\n            working_directory,\n            filePath\n        });\n    }\n\n    /**\n     * Process a file operation event (legacy format)\n     */\n    processEvent(event) {\n        if (!this.isFileOperation(event)) return;\n\n        const { tool_name, tool_parameters, tool_output, timestamp, session_id, working_directory } = event;\n        const filePath = tool_parameters?.file_path || tool_parameters?.notebook_path;\n        \n        this.processFileOperation({\n            tool_name,\n            tool_parameters,\n            tool_output,\n            timestamp,\n            session_id,\n            working_directory,\n            filePath\n        });\n    }\n\n    /**\n     * Process a file operation\n     */\n    processFileOperation({ tool_name, tool_parameters, tool_output, timestamp, session_id, working_directory, filePath }) {\n        if (!filePath) return;\n\n        // Track session\n        if (session_id && !this.sessions.has(session_id)) {\n            this.sessions.set(session_id, {\n                id: session_id,\n                working_directory: working_directory || '/',\n                files: new Set()\n            });\n            // Update session list when new session is added\n            this.updateSessionList();\n        }\n\n        // Get or create file activity\n        if (!this.fileActivity.has(filePath)) {\n            this.fileActivity.set(filePath, {\n                path: filePath,\n                operations: [],\n                sessions: new Set(),\n                working_directories: new Set(),\n                lastContent: null,\n                astPaths: []\n            });\n        }\n\n        const activity = this.fileActivity.get(filePath);\n        \n        // Add operation\n        activity.operations.push({\n            type: tool_name,\n            timestamp: timestamp,\n            parameters: tool_parameters,\n            output: tool_output,\n            session_id: session_id\n        });\n\n        // Track session and working directory\n        if (session_id) {\n            activity.sessions.add(session_id);\n            const session = this.sessions.get(session_id);\n            if (session) {\n                session.files.add(filePath);\n            }\n        }\n        if (working_directory) {\n            activity.working_directories.add(working_directory);\n        }\n\n        // Update content and extract AST if applicable\n        if (tool_name === 'Write' && tool_parameters.content) {\n            activity.lastContent = tool_parameters.content;\n            activity.astPaths = this.extractASTPaths(tool_parameters.content, filePath);\n        } else if (tool_name === 'Read' && tool_output?.content) {\n            activity.lastContent = tool_output.content;\n            activity.astPaths = this.extractASTPaths(tool_output.content, filePath);\n        } else if (tool_name === 'Edit' && activity.lastContent) {\n            // Apply edit to content if we have it\n            const oldString = tool_parameters.old_string;\n            const newString = tool_parameters.new_string;\n            if (oldString && newString) {\n                activity.lastContent = activity.lastContent.replace(oldString, newString);\n                activity.astPaths = this.extractASTPaths(activity.lastContent, filePath);\n            }\n        }\n    }\n\n    /**\n     * Extract AST paths from code content\n     */\n    extractASTPaths(content, filePath) {\n        if (!content || typeof content !== 'string') return [];\n        \n        const ext = filePath.split('.').pop()?.toLowerCase();\n        const paths = [];\n\n        if (ext === 'py') {\n            // Python: Extract classes, functions, and methods\n            const classRegex = /^class\\s+(\\w+)/gm;\n            const functionRegex = /^def\\s+(\\w+)/gm;\n            const methodRegex = /^\\s{4,}def\\s+(\\w+)/gm;\n\n            let match;\n            while ((match = classRegex.exec(content)) !== null) {\n                paths.push({ name: match[1], type: 'class' });\n            }\n            while ((match = functionRegex.exec(content)) !== null) {\n                paths.push({ name: match[1], type: 'function' });\n            }\n            while ((match = methodRegex.exec(content)) !== null) {\n                if (!paths.some(p => p.name === match[1])) {\n                    paths.push({ name: match[1], type: 'method' });\n                }\n            }\n        } else if (ext === 'js' || ext === 'jsx' || ext === 'ts' || ext === 'tsx') {\n            // JavaScript/TypeScript: Extract classes, functions, methods\n            const classRegex = /class\\s+(\\w+)/g;\n            const functionRegex = /function\\s+(\\w+)/g;\n            const arrowFunctionRegex = /const\\s+(\\w+)\\s*=\\s*\\([^)]*\\)\\s*=>/g;\n            const methodRegex = /(\\w+)\\s*\\([^)]*\\)\\s*\\{/g;\n\n            let match;\n            while ((match = classRegex.exec(content)) !== null) {\n                paths.push({ name: match[1], type: 'class' });\n            }\n            while ((match = functionRegex.exec(content)) !== null) {\n                paths.push({ name: match[1], type: 'function' });\n            }\n            while ((match = arrowFunctionRegex.exec(content)) !== null) {\n                paths.push({ name: match[1], type: 'function' });\n            }\n        }\n\n        return paths;\n    }\n\n    /**\n     * Build tree data from file activity\n     */\n    buildTreeData() {\n        // Get current session info\n        const sessionId = this.currentSession || 'current-session';\n        const sessionName = sessionId.substring(0, 8) + '...';\n        \n        // Always create a root with at least the session node\n        const root = {\n            name: `Session: ${sessionName}`,\n            type: 'root',\n            children: []\n        };\n\n        // If no file activity, still show the session root\n        if (!this.fileActivity || this.fileActivity.size === 0) {\n            // Add a placeholder node to indicate no files yet\n            root.children.push({\n                name: '(No file operations yet)',\n                type: 'placeholder',\n                children: []\n            });\n            this.treeData = root;\n            console.log('[CodeViewer] Built minimal tree with session root');\n            return;\n        }\n\n        // Group by working directory\n        const dirMap = new Map();\n\n        for (const [filePath, activity] of this.fileActivity.entries()) {\n            // Filter by session if selected\n            if (this.currentSession) {\n                if (!activity.sessions.has(this.currentSession)) {\n                    continue;\n                }\n            }\n\n            // Determine working directory\n            const workingDirs = Array.from(activity.working_directories);\n            const workingDir = workingDirs[0] || '/';\n\n            if (!dirMap.has(workingDir)) {\n                dirMap.set(workingDir, {\n                    name: workingDir.split('/').pop() || workingDir,\n                    path: workingDir,\n                    type: 'directory',\n                    children: []\n                });\n            }\n\n            // Create file node\n            const fileName = filePath.split('/').pop();\n            const hasEdits = activity.operations.some(op => op.type === 'Edit' || op.type === 'Write');\n            \n            const fileNode = {\n                name: fileName,\n                path: filePath,\n                type: 'file',\n                edited: hasEdits,\n                operations: activity.operations.length,\n                children: []\n            };\n\n            // Add AST nodes\n            if (activity.astPaths.length > 0) {\n                activity.astPaths.forEach(ast => {\n                    fileNode.children.push({\n                        name: ast.name,\n                        type: ast.type,\n                        path: `${filePath}#${ast.name}`,\n                        children: []\n                    });\n                });\n            }\n\n            dirMap.get(workingDir).children.push(fileNode);\n        }\n\n        // Add directories to root\n        root.children = Array.from(dirMap.values());\n        \n        // If only one directory and it's the root, flatten\n        if (root.children.length === 1 && root.children[0].path === '/') {\n            root.children = root.children[0].children;\n        }\n\n        this.treeData = root;\n    }\n\n    /**\n     * Render the D3 tree\n     */\n    renderTree() {\n        if (!this.treeData || !this.container) return;\n\n        // Ensure SVG element exists\n        const svgElement = document.getElementById('claude-activity-tree-svg');\n        if (!svgElement) {\n            console.warn('[CodeViewer] SVG element not found, skipping tree render');\n            return;\n        }\n        \n        const svg = d3.select(svgElement);\n        if (svg.empty()) {\n            console.warn('[CodeViewer] D3 could not select SVG element');\n            return;\n        }\n        \n        svg.selectAll('*').remove();\n\n        // Get actual dimensions\n        const svgContainer = document.getElementById('claude-tree-svg-container');\n        if (svgContainer) {\n            const rect = svgContainer.getBoundingClientRect();\n            this.width = rect.width || 800;\n            this.height = rect.height || 600;\n        }\n\n        // Create container group for zoom/pan\n        const g = svg.append('g');\n\n        // Setup zoom behavior\n        const zoom = d3.zoom()\n            .scaleExtent([0.1, 4])\n            .on('zoom', (event) => {\n                g.attr('transform', event.transform);\n            });\n\n        svg.call(zoom);\n\n        // Create tree layout\n        const treeLayout = d3.tree()\n            .size([this.height - 100, this.width - 200]);\n\n        // Create hierarchy\n        this.d3Root = d3.hierarchy(this.treeData);\n        \n        // Apply tree layout\n        treeLayout(this.d3Root);\n\n        // Create links\n        const link = g.selectAll('.link')\n            .data(this.d3Root.links())\n            .enter().append('path')\n            .attr('class', 'link')\n            .attr('d', d3.linkHorizontal()\n                .x(d => d.y + 100)\n                .y(d => d.x + 50))\n            .style('fill', 'none')\n            .style('stroke', '#ccc')\n            .style('stroke-width', 1);\n\n        // Create nodes\n        const node = g.selectAll('.node')\n            .data(this.d3Root.descendants())\n            .enter().append('g')\n            .attr('class', 'node')\n            .attr('transform', d => `translate(${d.y + 100},${d.x + 50})`);\n\n        // Add circles for nodes\n        node.append('circle')\n            .attr('r', this.nodeRadius)\n            .style('fill', d => this.getNodeColor(d.data))\n            .style('stroke', d => d.data.edited ? '#F44336' : '#999')\n            .style('stroke-width', d => d.data.edited ? 2 : 1)\n            .style('cursor', 'pointer')\n            .on('click', (event, d) => this.handleNodeClick(event, d));\n\n        // Add text labels\n        node.append('text')\n            .attr('dy', '.35em')\n            .attr('x', d => d.children ? -10 : 10)\n            .style('text-anchor', d => d.children ? 'end' : 'start')\n            .style('font-size', '12px')\n            .style('cursor', 'pointer')\n            .text(d => d.data.name)\n            .on('click', (event, d) => this.handleNodeClick(event, d));\n\n        // Store tree reference\n        this.d3Tree = { svg, g, zoom };\n    }\n\n    /**\n     * Get node color based on type\n     */\n    getNodeColor(node) {\n        switch (node.type) {\n            case 'root': return '#666';\n            case 'directory': return '#FFC107';\n            case 'file': return '#4CAF50';\n            case 'class': return '#2196F3';\n            case 'function': return '#FF9800';\n            case 'method': return '#9C27B0';\n            default: return '#999';\n        }\n    }\n\n    /**\n     * Handle node click\n     */\n    handleNodeClick(event, d) {\n        event.stopPropagation();\n        \n        // Toggle children\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else if (d._children) {\n            d.children = d._children;\n            d._children = null;\n        }\n\n        // Re-render tree\n        this.renderTree();\n\n        // Update selection\n        this.selectedNode = d;\n        \n        // Update the data viewer in the left pane if it's a file\n        if (d.data.type === 'file' && this.fileActivity.has(d.data.path)) {\n            this.showFileDetails(d.data.path);\n        }\n    }\n\n    /**\n     * Show file details in the left viewer pane\n     */\n    showFileDetails(filePath) {\n        const activity = this.fileActivity.get(filePath);\n        if (!activity) return;\n\n        const dataContent = document.getElementById('module-data-content');\n        if (!dataContent) return;\n\n        // Update header\n        const dataHeader = document.querySelector('.module-data-header h5');\n        if (dataHeader) {\n            dataHeader.innerHTML = `üìÑ ${filePath.split('/').pop()}`;\n        }\n\n        // Build operations display\n        let html = '<div style=\"padding: 10px; overflow-y: auto; height: 100%;\">';\n        html += `<div style=\"margin-bottom: 15px;\">`;\n        html += `<strong>File Path:</strong> ${filePath}<br>`;\n        html += `<strong>Operations:</strong> ${activity.operations.length}<br>`;\n        html += `<strong>Sessions:</strong> ${activity.sessions.size}`;\n        html += `</div>`;\n\n        // Show operations timeline\n        html += '<div style=\"margin-bottom: 15px;\"><strong>Operations Timeline:</strong></div>';\n        activity.operations.forEach((op, index) => {\n            const time = new Date(op.timestamp).toLocaleTimeString();\n            html += `<div style=\"margin-bottom: 10px; padding: 8px; background: #f5f5f5; border-left: 3px solid ${this.getOperationColor(op.type)};\">`;\n            html += `<div><strong>${op.type}</strong> at ${time}</div>`;\n            \n            if (op.type === 'Edit' && op.parameters) {\n                html += `<div style=\"margin-top: 5px; font-size: 0.9em;\">`;\n                html += `<div style=\"color: #d32f2f;\">- ${this.escapeHtml(op.parameters.old_string || '').substring(0, 100)}</div>`;\n                html += `<div style=\"color: #388e3c;\">+ ${this.escapeHtml(op.parameters.new_string || '').substring(0, 100)}</div>`;\n                html += `</div>`;\n            }\n            html += `</div>`;\n        });\n\n        // Show AST structure if available\n        if (activity.astPaths.length > 0) {\n            html += '<div style=\"margin-top: 15px;\"><strong>AST Structure:</strong></div>';\n            html += '<ul style=\"list-style: none; padding-left: 10px;\">';\n            activity.astPaths.forEach(ast => {\n                const icon = ast.type === 'class' ? 'üî∑' : ast.type === 'function' ? 'üî∂' : 'üî∏';\n                html += `<li>${icon} ${ast.name} (${ast.type})</li>`;\n            });\n            html += '</ul>';\n        }\n\n        html += '</div>';\n        dataContent.innerHTML = html;\n    }\n\n    /**\n     * Get operation color\n     */\n    getOperationColor(type) {\n        switch (type) {\n            case 'Write': return '#4CAF50';\n            case 'Edit': return '#FF9800';\n            case 'Read': return '#2196F3';\n            default: return '#999';\n        }\n    }\n\n    /**\n     * Escape HTML\n     */\n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n\n    /**\n     * Expand all nodes\n     */\n    expandAllNodes() {\n        if (!this.d3Root) return;\n        \n        this.d3Root.descendants().forEach(d => {\n            if (d._children) {\n                d.children = d._children;\n                d._children = null;\n            }\n        });\n        \n        this.renderTree();\n    }\n\n    /**\n     * Collapse all nodes\n     */\n    collapseAllNodes() {\n        if (!this.d3Root) return;\n        \n        this.d3Root.descendants().forEach(d => {\n            if (d.children && d.depth > 0) {\n                d._children = d.children;\n                d.children = null;\n            }\n        });\n        \n        this.renderTree();\n    }\n\n    /**\n     * Reset zoom\n     */\n    resetZoom() {\n        if (!this.d3Tree) return;\n        \n        this.d3Tree.svg.transition()\n            .duration(750)\n            .call(this.d3Tree.zoom.transform, d3.zoomIdentity);\n    }\n\n    /**\n     * Update session list in main selector\n     */\n    updateSessionList() {\n        // Update the main session selector if it exists\n        const mainSelect = document.getElementById('session-select');\n        if (!mainSelect) return;\n\n        const currentValue = mainSelect.value;\n        \n        // Clear existing options except \"All Sessions\"\n        while (mainSelect.options.length > 1) {\n            mainSelect.remove(1);\n        }\n\n        // Add session options from our tracked sessions\n        for (const [sessionId, session] of this.sessions.entries()) {\n            // Check if option already exists\n            let exists = false;\n            for (let i = 0; i < mainSelect.options.length; i++) {\n                if (mainSelect.options[i].value === sessionId) {\n                    exists = true;\n                    break;\n                }\n            }\n            \n            if (!exists) {\n                const option = document.createElement('option');\n                option.value = sessionId;\n                option.textContent = `Session ${sessionId.substring(0, 8)}... (${session.files.size} files)`;\n                mainSelect.appendChild(option);\n            }\n        }\n        \n        // Restore previous selection if it still exists\n        if (currentValue) {\n            mainSelect.value = currentValue;\n        }\n    }\n\n    /**\n     * Update statistics\n     */\n    updateStats() {\n        const stats = document.getElementById('claude-tree-stats');\n        if (!stats) return;\n\n        const totalFiles = this.currentSession\n            ? Array.from(this.fileActivity.values()).filter(a => a.sessions.has(this.currentSession)).length\n            : this.fileActivity.size;\n        \n        const totalOps = this.currentSession\n            ? Array.from(this.fileActivity.values())\n                .filter(a => a.sessions.has(this.currentSession))\n                .reduce((sum, a) => sum + a.operations.length, 0)\n            : Array.from(this.fileActivity.values())\n                .reduce((sum, a) => sum + a.operations.length, 0);\n\n        stats.textContent = `Files: ${totalFiles} | Operations: ${totalOps} | Sessions: ${this.sessions.size}`;\n    }\n\n    /**\n     * Refresh file activity from FileToolTracker\n     */\n    refreshFromFileToolTracker() {\n        if (!window.dashboard || !window.dashboard.fileToolTracker) {\n            console.log('[CodeViewer] FileToolTracker not available');\n            return;\n        }\n\n        const fileOperations = window.dashboard.fileToolTracker.getFileOperations();\n        console.log('[CodeViewer] Refreshing from FileToolTracker:', fileOperations.size, 'files');\n\n        // Clear existing file activity\n        this.fileActivity.clear();\n        this.sessions.clear();\n\n        // Create a default session if needed\n        const defaultSessionId = 'current-session';\n        this.sessions.set(defaultSessionId, {\n            id: defaultSessionId,\n            startTime: new Date().toISOString(),\n            files: new Set()\n        });\n        this.currentSession = defaultSessionId;\n\n        // Convert fileOperations Map to file activity for tree visualization\n        fileOperations.forEach((fileData, filePath) => {\n            // Add file to session\n            const session = this.sessions.get(defaultSessionId);\n            session.files.add(filePath);\n\n            // Create file activity entry\n            const firstOp = fileData.operations[0];\n            const lastOp = fileData.operations[fileData.operations.length - 1];\n\n            this.fileActivity.set(filePath, {\n                path: filePath,\n                firstAccess: firstOp ? firstOp.timestamp : fileData.lastOperation,\n                lastAccess: fileData.lastOperation,\n                accessCount: fileData.operations.length,\n                operations: fileData.operations.map(op => ({\n                    type: op.operation,\n                    timestamp: op.timestamp,\n                    agent: op.agent\n                })),\n                workingDirectory: firstOp ? firstOp.workingDirectory : null,\n                astNodes: [],\n                content: null\n            });\n        });\n\n        console.log('[CodeViewer] File activity refreshed:', this.fileActivity.size, 'files');\n    }\n}\n\n// Create and export singleton instance\ntry {\n    window.CodeViewer = new CodeViewer();\n    console.log('[CodeViewer] Instance created successfully');\n} catch (error) {\n    console.error('[CodeViewer] FAILED TO CREATE INSTANCE:', error);\n}\n\n// Auto-initialize when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        console.log('[CodeViewer] DOMContentLoaded - attempting initialization');\n        try {\n            window.CodeViewer.initialize();\n        \n            // If File Tree tab is already active, show it\n            const claudeTreeTab = document.getElementById('claude-tree-tab');\n            if (claudeTreeTab && claudeTreeTab.classList.contains('active')) {\n                setTimeout(() => window.CodeViewer.show(), 100);\n            }\n        } catch (error) {\n            console.error('[CodeViewer] FAILED TO INITIALIZE:', error);\n        }\n    });\n} else {\n    console.log('[CodeViewer] DOM already loaded - initializing immediately');\n    try {\n        window.CodeViewer.initialize();\n        \n        // If File Tree tab is already active, show it\n        const claudeTreeTab = document.getElementById('claude-tree-tab');\n        if (claudeTreeTab && claudeTreeTab.classList.contains('active')) {\n            console.log('[CodeViewer] File Tree tab is active, showing in 100ms');\n            setTimeout(() => window.CodeViewer.show(), 100);\n        }\n    } catch (error) {\n        console.error('[CodeViewer] FAILED TO INITIALIZE:', error);\n    }\n}\n\n// Also listen for tab changes to ensure we render when needed\ndocument.addEventListener('tabChanged', (event) => {\n    if (event.detail && event.detail.newTab === 'claude-tree') {\n        setTimeout(() => window.CodeViewer.show(), 50);\n    }\n});\n\n// Tab click handling is now done by UIStateManager\n// CodeViewer.renderContent() is called when the File Tree tab is activated\n\n// FALLBACK: Periodic check to ensure File Tree tab is properly rendered\nsetInterval(() => {\n    const claudeTreeTab = document.getElementById('claude-tree-tab');\n    const claudeTreeContainer = document.getElementById('claude-tree-container');\n    \n    if (claudeTreeTab && claudeTreeTab.classList.contains('active') && \n        claudeTreeContainer && \n        !claudeTreeContainer.querySelector('.activity-tree-wrapper') &&\n        !claudeTreeContainer.querySelector('.file-tree-empty-state')) {\n        window.CodeViewer.show();\n    }\n}, 5000);"],"names":["CodeViewer","constructor","this","container","svg","initialized","fileActivity","Map","sessions","currentSession","treeData","d3Tree","d3Root","selectedNode","width","height","nodeRadius","renderInProgress","containerObserver","initialize","console","log","setupContainer","setupEventHandlers","subscribeToEvents","processExistingEvents","error","treeContainer","document","getElementById","renderInterface","existingWrapper","querySelector","existingSvg","disconnect","innerHTML","svgContainer","rect","getBoundingClientRect","observe","childList","subtree","renderContent","_showInternal","show","claudeTreeContainer","length","children","refreshFromFileToolTracker","foundForeign","forEach","selector","elements","querySelectorAll","warn","el","remove","setAttribute","existingEmptyState","protectContainer","setupControlHandlers","mainSessionSelect","value","buildTreeData","renderTree","updateStats","reRenderScheduled","MutationObserver","mutations","mutation","node","addedNodes","nodeType","Node","ELEMENT_NODE","element","classList","contains","id","textContent","includes","tagName","startsWith","e","setTimeout","type","removedNodes","hasAttribute","addEventListener","target","isTabActive","expandBtn","expandAllNodes","collapseBtn","collapseAllNodes","resetBtn","resetZoom","window","socket","on","event","isFileOperationEvent","isDirectFileEvent","data","handleDirectFileEvent","eventBus","processClaudeEvent","claudeTreeContent","dashboard","fileToolTracker","eventStore","events","getAllEvents","fileOpCount","processedCount","subtype","tool_name","timestamp","totalEvents","fileOperations","processed","currentFileActivitySize","size","tool","tool_parameters","parameters","tool_output","output","session_id","working_directory","Date","toISOString","isFileOperation","filePath","file_path","notebook_path","processFileOperation","processEvent","has","set","files","Set","updateSessionList","path","operations","working_directories","lastContent","astPaths","activity","get","push","add","session","content","extractASTPaths","oldString","old_string","newString","new_string","replace","ext","split","pop","toLowerCase","paths","classRegex","functionRegex","methodRegex","match","exec","name","some","p","arrowFunctionRegex","root","substring","dirMap","entries","workingDir","Array","from","fileName","hasEdits","op","fileNode","edited","ast","values","svgElement","d3","select","empty","selectAll","g","append","zoom","scaleExtent","attr","transform","call","treeLayout","tree","hierarchy","links","enter","linkHorizontal","x","d","y","style","descendants","getNodeColor","handleNodeClick","text","stopPropagation","_children","showFileDetails","dataContent","dataHeader","html","index","time","toLocaleTimeString","getOperationColor","escapeHtml","icon","div","createElement","depth","transition","duration","zoomIdentity","mainSelect","currentValue","options","sessionId","exists","i","option","appendChild","stats","totalFiles","filter","a","totalOps","reduce","sum","getFileOperations","clear","defaultSessionId","startTime","fileData","firstOp","firstAccess","lastOperation","lastAccess","accessCount","map","operation","agent","workingDirectory","astNodes","readyState","claudeTreeTab","detail","newTab","setInterval"],"mappings":"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"}