{"version":3,"file":"code-viewer.js","sources":["../../js/components/code-viewer.js"],"sourcesContent":["/**\n * Code Viewer Component\n * \n * Modal window for displaying source code with syntax highlighting.\n * Supports navigation between parent/child nodes and shows code metrics.\n */\n\nclass CodeViewer {\n    constructor() {\n        this.modal = null;\n        this.currentNode = null;\n        this.socket = null;\n        this.initialized = false;\n        this.codeCache = new Map();\n    }\n\n    /**\n     * Initialize the code viewer\n     */\n    initialize() {\n        if (this.initialized) {\n            return;\n        }\n\n        this.createModal();\n        this.setupEventHandlers();\n        this.subscribeToEvents();\n        \n        this.initialized = true;\n        console.log('Code viewer initialized');\n    }\n\n    /**\n     * Create modal DOM structure\n     */\n    createModal() {\n        const modalHtml = `\n            <div class=\"code-viewer-modal\" id=\"code-viewer-modal\">\n                <div class=\"code-viewer-content\">\n                    <div class=\"code-viewer-header\">\n                        <div class=\"code-viewer-title\" id=\"code-viewer-title\">\n                            Loading...\n                        </div>\n                        <div class=\"code-viewer-info\">\n                            <span id=\"code-viewer-type\">Type: --</span>\n                            <span id=\"code-viewer-lines\">Lines: --</span>\n                            <span id=\"code-viewer-complexity\">Complexity: --</span>\n                        </div>\n                        <button class=\"code-viewer-close\" id=\"code-viewer-close\">√ó</button>\n                    </div>\n                    <div class=\"code-viewer-body\">\n                        <pre class=\"code-viewer-code line-numbers\" id=\"code-viewer-code\">\n                            <code class=\"language-python\" id=\"code-viewer-code-content\"></code>\n                        </pre>\n                    </div>\n                    <div class=\"code-viewer-navigation\">\n                        <div class=\"nav-group\">\n                            <button class=\"code-nav-button\" id=\"code-nav-parent\" disabled>\n                                ‚¨ÜÔ∏è Parent\n                            </button>\n                            <button class=\"code-nav-button\" id=\"code-nav-prev\" disabled>\n                                ‚¨ÖÔ∏è Previous\n                            </button>\n                            <button class=\"code-nav-button\" id=\"code-nav-next\" disabled>\n                                ‚û°Ô∏è Next\n                            </button>\n                        </div>\n                        <div class=\"nav-info\">\n                            <span id=\"code-nav-position\">-- / --</span>\n                        </div>\n                        <div class=\"nav-actions\">\n                            <button class=\"code-nav-button\" id=\"code-copy\">\n                                üìã Copy\n                            </button>\n                            <button class=\"code-nav-button\" id=\"code-open-file\">\n                                üìÇ Open File\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Add modal to body\n        document.body.insertAdjacentHTML('beforeend', modalHtml);\n        this.modal = document.getElementById('code-viewer-modal');\n    }\n\n    /**\n     * Setup event handlers\n     */\n    setupEventHandlers() {\n        // Close button\n        document.getElementById('code-viewer-close').addEventListener('click', () => {\n            this.hide();\n        });\n\n        // Close on backdrop click\n        this.modal.addEventListener('click', (e) => {\n            if (e.target === this.modal) {\n                this.hide();\n            }\n        });\n\n        // Close on ESC key\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape' && this.modal.classList.contains('show')) {\n                this.hide();\n            }\n        });\n\n        // Navigation buttons\n        document.getElementById('code-nav-parent').addEventListener('click', () => {\n            this.navigateToParent();\n        });\n\n        document.getElementById('code-nav-prev').addEventListener('click', () => {\n            this.navigateToPrevious();\n        });\n\n        document.getElementById('code-nav-next').addEventListener('click', () => {\n            this.navigateToNext();\n        });\n\n        // Action buttons\n        document.getElementById('code-copy').addEventListener('click', () => {\n            this.copyCode();\n        });\n\n        document.getElementById('code-open-file').addEventListener('click', () => {\n            this.openInEditor();\n        });\n    }\n\n    /**\n     * Subscribe to Socket.IO events\n     */\n    subscribeToEvents() {\n        if (window.socket) {\n            this.socket = window.socket;\n            \n            // Listen for code content responses\n            this.socket.on('code:content:response', (data) => {\n                this.handleCodeContent(data);\n            });\n        }\n    }\n\n    /**\n     * Show the code viewer with node data\n     */\n    show(nodeData) {\n        if (!this.initialized) {\n            this.initialize();\n        }\n\n        this.currentNode = nodeData;\n        this.modal.classList.add('show');\n        \n        // Update header\n        this.updateHeader(nodeData);\n        \n        // Load code content\n        this.loadCode(nodeData);\n        \n        // Update navigation\n        this.updateNavigation(nodeData);\n    }\n\n    /**\n     * Hide the code viewer\n     */\n    hide() {\n        this.modal.classList.remove('show');\n        this.currentNode = null;\n    }\n\n    /**\n     * Update modal header\n     */\n    updateHeader(nodeData) {\n        // Update title\n        const title = document.getElementById('code-viewer-title');\n        title.textContent = `${nodeData.name} (${nodeData.path || 'Unknown'})`;\n        \n        // Update info\n        document.getElementById('code-viewer-type').textContent = `Type: ${nodeData.type}`;\n        document.getElementById('code-viewer-lines').textContent = `Lines: ${nodeData.lines || '--'}`;\n        document.getElementById('code-viewer-complexity').textContent = `Complexity: ${nodeData.complexity || '--'}`;\n    }\n\n    /**\n     * Load code content\n     */\n    loadCode(nodeData) {\n        const codeContent = document.getElementById('code-viewer-code-content');\n        \n        // Check cache first\n        const cacheKey = `${nodeData.path}:${nodeData.line}`;\n        if (this.codeCache.has(cacheKey)) {\n            this.displayCode(this.codeCache.get(cacheKey));\n            return;\n        }\n        \n        // Show loading state\n        codeContent.textContent = 'Loading code...';\n        \n        // Request code from server\n        if (this.socket) {\n            this.socket.emit('code:content:request', {\n                path: nodeData.path,\n                line: nodeData.line,\n                type: nodeData.type,\n                name: nodeData.name\n            });\n        } else {\n            // Fallback: show mock code for demo\n            this.displayMockCode(nodeData);\n        }\n    }\n\n    /**\n     * Handle code content response\n     */\n    handleCodeContent(data) {\n        if (!data.success) {\n            this.displayError(data.error || 'Failed to load code');\n            return;\n        }\n        \n        // Cache the content\n        const cacheKey = `${data.path}:${data.line}`;\n        this.codeCache.set(cacheKey, data.content);\n        \n        // Display the code\n        this.displayCode(data.content);\n    }\n\n    /**\n     * Display code with syntax highlighting\n     */\n    displayCode(code) {\n        const codeContent = document.getElementById('code-viewer-code-content');\n        const codeElement = document.getElementById('code-viewer-code');\n        \n        // Set the code content\n        codeContent.textContent = code;\n        \n        // Update language class based on file extension\n        const language = this.detectLanguage(this.currentNode.path);\n        codeContent.className = `language-${language}`;\n        \n        // Apply Prism syntax highlighting\n        if (window.Prism) {\n            Prism.highlightElement(codeContent);\n            \n            // Add line numbers if plugin is available\n            if (Prism.plugins && Prism.plugins.lineNumbers) {\n                Prism.plugins.lineNumbers.resize(codeElement);\n            }\n        }\n    }\n\n    /**\n     * Display mock code for demo purposes\n     */\n    displayMockCode(nodeData) {\n        let mockCode = '';\n        \n        switch (nodeData.type) {\n            case 'class':\n                mockCode = `class ${nodeData.name}:\n    \"\"\"\n    ${nodeData.docstring || 'A sample class implementation.'}\n    \"\"\"\n    \n    def __init__(self):\n        \"\"\"Initialize the ${nodeData.name} class.\"\"\"\n        self._data = {}\n        self._initialized = False\n    \n    def process(self, input_data):\n        \"\"\"Process the input data.\"\"\"\n        if not self._initialized:\n            self._initialize()\n        return self._transform(input_data)\n    \n    def _initialize(self):\n        \"\"\"Initialize internal state.\"\"\"\n        self._initialized = True\n    \n    def _transform(self, data):\n        \"\"\"Transform the data.\"\"\"\n        return data`;\n                break;\n                \n            case 'function':\n                mockCode = `def ${nodeData.name}(${nodeData.params ? nodeData.params.join(', ') : ''}):\n    \"\"\"\n    ${nodeData.docstring || 'A sample function implementation.'}\n    \n    Args:\n        ${nodeData.params ? nodeData.params.map(p => `${p}: Description of ${p}`).join('\\n        ') : 'None'}\n    \n    Returns:\n        ${nodeData.returns || 'None'}: Return value description\n    \"\"\"\n    # Implementation here\n    result = None\n    \n    # Process logic\n    for item in range(10):\n        result = process_item(item)\n    \n    return result`;\n                break;\n                \n            case 'method':\n                mockCode = `    def ${nodeData.name}(self${nodeData.params ? ', ' + nodeData.params.join(', ') : ''}):\n        \"\"\"\n        ${nodeData.docstring || 'A sample method implementation.'}\n        \"\"\"\n        # Method implementation\n        self._validate()\n        result = self._process()\n        return result`;\n                break;\n                \n            default:\n                mockCode = `# ${nodeData.name}\n# Type: ${nodeData.type}\n# Path: ${nodeData.path || 'Unknown'}\n# Line: ${nodeData.line || 'Unknown'}\n\n# Code content would appear here\n# This is a placeholder for demonstration purposes`;\n        }\n        \n        this.displayCode(mockCode);\n    }\n\n    /**\n     * Display error message\n     */\n    displayError(message) {\n        const codeContent = document.getElementById('code-viewer-code-content');\n        codeContent.textContent = `# Error loading code\\n# ${message}`;\n        codeContent.className = 'language-python';\n    }\n\n    /**\n     * Detect language from file path\n     */\n    detectLanguage(path) {\n        if (!path) return 'python';\n        \n        const ext = path.split('.').pop().toLowerCase();\n        const languageMap = {\n            'py': 'python',\n            'js': 'javascript',\n            'ts': 'typescript',\n            'jsx': 'jsx',\n            'tsx': 'tsx',\n            'css': 'css',\n            'html': 'html',\n            'json': 'json',\n            'yaml': 'yaml',\n            'yml': 'yaml',\n            'md': 'markdown',\n            'sh': 'bash',\n            'bash': 'bash',\n            'sql': 'sql',\n            'go': 'go',\n            'rs': 'rust',\n            'cpp': 'cpp',\n            'c': 'c',\n            'h': 'c',\n            'hpp': 'cpp',\n            'java': 'java',\n            'rb': 'ruby',\n            'php': 'php'\n        };\n        \n        return languageMap[ext] || 'plaintext';\n    }\n\n    /**\n     * Update navigation buttons\n     */\n    updateNavigation(nodeData) {\n        // For now, disable navigation buttons\n        // In a real implementation, these would navigate through the AST\n        document.getElementById('code-nav-parent').disabled = true;\n        document.getElementById('code-nav-prev').disabled = true;\n        document.getElementById('code-nav-next').disabled = true;\n        document.getElementById('code-nav-position').textContent = '1 / 1';\n    }\n\n    /**\n     * Navigate to parent node\n     */\n    navigateToParent() {\n        console.log('Navigate to parent node');\n        // Implementation would load parent node's code\n    }\n\n    /**\n     * Navigate to previous sibling\n     */\n    navigateToPrevious() {\n        console.log('Navigate to previous sibling');\n        // Implementation would load previous sibling's code\n    }\n\n    /**\n     * Navigate to next sibling\n     */\n    navigateToNext() {\n        console.log('Navigate to next sibling');\n        // Implementation would load next sibling's code\n    }\n\n    /**\n     * Copy code to clipboard\n     */\n    async copyCode() {\n        const codeContent = document.getElementById('code-viewer-code-content');\n        const code = codeContent.textContent;\n        \n        try {\n            await navigator.clipboard.writeText(code);\n            \n            // Show feedback\n            const button = document.getElementById('code-copy');\n            const originalText = button.textContent;\n            button.textContent = '‚úÖ Copied!';\n            setTimeout(() => {\n                button.textContent = originalText;\n            }, 2000);\n        } catch (err) {\n            console.error('Failed to copy code:', err);\n            alert('Failed to copy code to clipboard');\n        }\n    }\n\n    /**\n     * Open file in editor\n     */\n    openInEditor() {\n        if (!this.currentNode || !this.currentNode.path) {\n            alert('File path not available');\n            return;\n        }\n        \n        // Emit event to open file\n        if (this.socket) {\n            this.socket.emit('file:open', {\n                path: this.currentNode.path,\n                line: this.currentNode.line\n            });\n        }\n        \n        console.log('Opening file in editor:', this.currentNode.path);\n    }\n}\n\n// Create singleton instance\nconst codeViewer = new CodeViewer();\n\n// Export for use in other modules\nif (typeof window !== 'undefined') {\n    window.CodeViewer = codeViewer;\n    \n    // Initialize when DOM is ready\n    document.addEventListener('DOMContentLoaded', () => {\n        codeViewer.initialize();\n    });\n}\n\nexport default codeViewer;"],"names":["codeViewer","constructor","this","modal","currentNode","socket","initialized","codeCache","Map","initialize","createModal","setupEventHandlers","subscribeToEvents","console","log","document","body","insertAdjacentHTML","getElementById","addEventListener","hide","e","target","key","classList","contains","navigateToParent","navigateToPrevious","navigateToNext","copyCode","openInEditor","window","on","data","handleCodeContent","show","nodeData","add","updateHeader","loadCode","updateNavigation","remove","textContent","name","path","type","lines","complexity","codeContent","cacheKey","line","has","displayCode","get","emit","displayMockCode","success","displayError","error","set","content","code","codeElement","language","detectLanguage","className","Prism","highlightElement","plugins","lineNumbers","resize","mockCode","docstring","params","join","map","p","returns","message","py","js","ts","jsx","tsx","css","html","json","yaml","yml","md","sh","bash","sql","go","rs","cpp","c","h","hpp","java","rb","php","split","pop","toLowerCase","disabled","navigator","clipboard","writeText","button","originalText","setTimeout","err","alert","CodeViewer"],"mappings":"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"}