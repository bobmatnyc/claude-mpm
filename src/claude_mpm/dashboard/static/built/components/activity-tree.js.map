{"version":3,"file":"activity-tree.js","sources":["../../js/components/activity-tree.js"],"sourcesContent":["/**\n * Activity Tree Component - Linear Tree View\n * \n * HTML/CSS-based linear tree visualization for showing PM activity hierarchy.\n * Replaces D3.js with simpler, cleaner linear tree structure.\n */\n\nclass ActivityTree {\n    constructor() {\n        this.container = null;\n        this.events = [];\n        this.sessions = new Map();\n        this.currentSession = null;\n        this.selectedSessionFilter = 'all';\n        this.timeRange = '30min';\n        this.searchTerm = '';\n        this.initialized = false;\n        this.expandedSessions = new Set();\n        this.expandedAgents = new Set();\n        this.expandedTools = new Set();\n        this.selectedItem = null;\n    }\n\n    /**\n     * Initialize the activity tree\n     */\n    initialize() {\n        console.log('ActivityTree.initialize() called, initialized:', this.initialized);\n        \n        if (this.initialized) {\n            console.log('Activity tree already initialized, skipping');\n            return;\n        }\n        \n        this.container = document.getElementById('activity-tree-container');\n        if (!this.container) {\n            this.container = document.getElementById('activity-tree');\n            if (!this.container) {\n                console.error('Activity tree container not found in DOM');\n                return;\n            }\n        }\n        \n        // Check if the container is visible before initializing\n        const tabPanel = document.getElementById('activity-tab');\n        if (!tabPanel) {\n            console.error('Activity tab panel (#activity-tab) not found in DOM');\n            return;\n        }\n        \n        // Initialize even if tab is not active\n        if (!tabPanel.classList.contains('active')) {\n            console.log('Activity tab not active, initializing but deferring render');\n            this.setupControls();\n            this.subscribeToEvents();\n            this.initialized = true;\n            return;\n        }\n\n        this.setupControls();\n        this.createLinearTreeView();\n        this.subscribeToEvents();\n        \n        this.initialized = true;\n        console.log('Activity tree initialization complete');\n    }\n\n    /**\n     * Force show the tree visualization\n     */\n    forceShow() {\n        console.log('ActivityTree.forceShow() called');\n        \n        if (!this.container) {\n            this.container = document.getElementById('activity-tree-container') || document.getElementById('activity-tree');\n            if (!this.container) {\n                console.error('Cannot find activity tree container');\n                return;\n            }\n        }\n        \n        this.createLinearTreeView();\n        this.renderTree();\n    }\n    \n    /**\n     * Render the visualization when tab becomes visible\n     */\n    renderWhenVisible() {\n        console.log('ActivityTree.renderWhenVisible() called');\n        \n        if (!this.initialized) {\n            console.log('Not initialized yet, calling initialize...');\n            this.initialize();\n            return;\n        }\n        \n        this.createLinearTreeView();\n        this.renderTree();\n    }\n\n    /**\n     * Setup control handlers\n     */\n    setupControls() {\n        // Time range filter dropdown\n        const timeRangeSelect = document.getElementById('time-range');\n        if (timeRangeSelect) {\n            timeRangeSelect.addEventListener('change', (e) => {\n                this.timeRange = e.target.value;\n                console.log(`ActivityTree: Time range changed to: ${this.timeRange}`);\n                this.renderTree();\n            });\n        }\n\n        // Listen for session filter changes from SessionManager\n        document.addEventListener('sessionFilterChanged', (e) => {\n            this.selectedSessionFilter = e.detail.sessionId || 'all';\n            console.log(`ActivityTree: Session filter changed to: ${this.selectedSessionFilter} (from SessionManager)`);\n            this.renderTree();\n        });\n\n        // Also listen for sessionChanged for backward compatibility\n        document.addEventListener('sessionChanged', (e) => {\n            this.selectedSessionFilter = e.detail.sessionId || 'all';\n            console.log(`ActivityTree: Session changed to: ${this.selectedSessionFilter} (from SessionManager - backward compat)`);\n            this.renderTree();\n        });\n\n        // Initialize with current session filter from SessionManager\n        setTimeout(() => {\n            if (window.sessionManager) {\n                const currentFilter = window.sessionManager.getCurrentFilter();\n                if (currentFilter !== this.selectedSessionFilter) {\n                    this.selectedSessionFilter = currentFilter || 'all';\n                    console.log(`ActivityTree: Initialized with current session filter: ${this.selectedSessionFilter}`);\n                    this.renderTree();\n                }\n            }\n        }, 100); // Small delay to ensure SessionManager is initialized\n\n        // Expand all button - expand all sessions\n        const expandAllBtn = document.getElementById('expand-all');\n        if (expandAllBtn) {\n            expandAllBtn.addEventListener('click', () => this.expandAllSessions());\n        }\n\n        // Collapse all button - collapse all sessions\n        const collapseAllBtn = document.getElementById('collapse-all');\n        if (collapseAllBtn) {\n            collapseAllBtn.addEventListener('click', () => this.collapseAllSessions());\n        }\n\n        // Reset zoom button functionality\n        const resetZoomBtn = document.getElementById('reset-zoom');\n        if (resetZoomBtn) {\n            resetZoomBtn.style.display = 'inline-block';\n            resetZoomBtn.addEventListener('click', () => this.resetZoom());\n        }\n\n        // Search input\n        const searchInput = document.getElementById('activity-search');\n        if (searchInput) {\n            searchInput.addEventListener('input', (e) => {\n                this.searchTerm = e.target.value.toLowerCase();\n                this.renderTree();\n            });\n        }\n    }\n\n    /**\n     * Create the linear tree view container\n     */\n    createLinearTreeView() {\n        console.log('Creating linear tree view');\n        \n        // Clear container\n        this.container.innerHTML = '';\n        \n        // Create main tree container\n        const treeContainer = document.createElement('div');\n        treeContainer.id = 'linear-tree';\n        treeContainer.className = 'linear-tree';\n        \n        this.container.appendChild(treeContainer);\n        \n        console.log('Linear tree view created');\n    }\n\n    /**\n     * Subscribe to socket events\n     */\n    subscribeToEvents() {\n        if (!window.socketClient) {\n            console.warn('Socket client not available for activity tree');\n            setTimeout(() => this.subscribeToEvents(), 1000);\n            return;\n        }\n\n        console.log('ActivityTree: Setting up event subscription');\n\n        // Subscribe to event updates from the socket client\n        // FIXED: Now correctly receives both events AND sessions from socket client\n        window.socketClient.onEventUpdate((events, sessions) => {\n            console.log(`ActivityTree: onEventUpdate called with ${events.length} total events and ${sessions.size} sessions`);\n            \n            // Use the authoritative sessions from socket client instead of building our own\n            this.sessions.clear();\n            \n            // Convert authoritative sessions Map to our format\n            for (const [sessionId, sessionData] of sessions.entries()) {\n                const activitySession = {\n                    id: sessionId,\n                    timestamp: new Date(sessionData.lastActivity || sessionData.startTime || new Date()),\n                    expanded: this.expandedSessions.has(sessionId) || true, // Preserve expansion state\n                    agents: new Map(),\n                    todos: [],\n                    userInstructions: [],\n                    tools: [],\n                    status: 'active',\n                    currentTodoTool: null,\n                    // Preserve additional session metadata\n                    working_directory: sessionData.working_directory,\n                    git_branch: sessionData.git_branch,\n                    eventCount: sessionData.eventCount\n                };\n                this.sessions.set(sessionId, activitySession);\n            }\n            \n            // Process only the new events since last update\n            const newEventCount = events.length - this.events.length;\n            if (newEventCount > 0) {\n                const newEvents = events.slice(this.events.length);\n                console.log(`ActivityTree: Processing ${newEventCount} new events`, newEvents);\n                \n                newEvents.forEach(event => {\n                    this.processEvent(event);\n                });\n            }\n                \n            this.events = [...events];\n            this.renderTree();\n            \n            // Debug: Log session state after processing\n            console.log(`ActivityTree: Sessions after sync with socket client:`, Array.from(this.sessions.entries()));\n        });\n\n        // Load existing data from socket client\n        const socketState = window.socketClient?.getState();\n        \n        if (socketState && socketState.events.length > 0) {\n            console.log(`ActivityTree: Loading existing data - ${socketState.events.length} events, ${socketState.sessions.size} sessions`);\n            \n            // Initialize from existing socket client data\n            this.sessions.clear();\n            \n            // Convert authoritative sessions Map to our format\n            for (const [sessionId, sessionData] of socketState.sessions.entries()) {\n                const activitySession = {\n                    id: sessionId,\n                    timestamp: new Date(sessionData.lastActivity || sessionData.startTime || new Date()),\n                    expanded: this.expandedSessions.has(sessionId) || true,\n                    agents: new Map(),\n                    todos: [],\n                    userInstructions: [],\n                    tools: [],\n                    status: 'active',\n                    currentTodoTool: null,\n                    working_directory: sessionData.working_directory,\n                    git_branch: sessionData.git_branch,\n                    eventCount: sessionData.eventCount\n                };\n                this.sessions.set(sessionId, activitySession);\n            }\n            \n            // Process existing events to populate activity data\n            socketState.events.forEach(event => {\n                this.processEvent(event);\n            });\n            this.events = [...socketState.events];\n            this.renderTree();\n            \n            // Debug: Log initial session state\n            console.log(`ActivityTree: Initial sessions state:`, Array.from(this.sessions.entries()));\n        } else {\n            console.log('ActivityTree: No existing events found');\n            this.events = [];\n            this.sessions.clear();\n            this.renderTree();\n        }\n    }\n\n    /**\n     * Process an event and update the session structure\n     */\n    processEvent(event) {\n        if (!event) {\n            console.log('ActivityTree: Ignoring null event');\n            return;\n        }\n        \n        // Determine event type\n        let eventType = this.getEventType(event);\n        if (!eventType) {\n            return;\n        }\n        \n        console.log(`ActivityTree: Processing event: ${eventType}`, event);\n        \n        // Fix timestamp processing - ensure we get a valid date\n        let timestamp;\n        if (event.timestamp) {\n            // Handle both ISO strings and already parsed dates\n            timestamp = new Date(event.timestamp);\n            // Check if date is valid\n            if (isNaN(timestamp.getTime())) {\n                console.warn('ActivityTree: Invalid timestamp, using current time:', event.timestamp);\n                timestamp = new Date();\n            }\n        } else {\n            console.warn('ActivityTree: No timestamp found, using current time');\n            timestamp = new Date();\n        }\n        \n        // Get session ID from event - this should match the authoritative sessions\n        const sessionId = event.session_id || event.data?.session_id;\n        \n        // Skip events without session ID - they can't be properly categorized\n        if (!sessionId) {\n            console.log(`ActivityTree: Skipping event without session_id: ${eventType}`);\n            return;\n        }\n        \n        // Find the session - it should already exist from authoritative sessions\n        if (!this.sessions.has(sessionId)) {\n            console.warn(`ActivityTree: Session ${sessionId} not found in authoritative sessions - skipping event`);\n            return;\n        }\n        \n        const session = this.sessions.get(sessionId);\n        \n        switch (eventType) {\n            case 'Start':\n                // New PM session started\n                this.currentSession = session;\n                break;\n            case 'user_prompt':\n                this.processUserInstruction(event, session);\n                break;\n            case 'TodoWrite':\n                this.processTodoWrite(event, session);\n                break;\n            case 'SubagentStart':\n                this.processSubagentStart(event, session);\n                break;\n            case 'SubagentStop':\n                this.processSubagentStop(event, session);\n                break;\n            case 'PreToolUse':\n                this.processToolUse(event, session);\n                break;\n            case 'PostToolUse':\n                this.updateToolStatus(event, session, 'completed');\n                break;\n        }\n        \n        this.updateStats();\n    }\n\n    /**\n     * Get event type from event data\n     */\n    getEventType(event) {\n        if (event.hook_event_name) {\n            return event.hook_event_name;\n        }\n        \n        if (event.type === 'hook' && event.subtype) {\n            const mapping = {\n                'pre_tool': 'PreToolUse',\n                'post_tool': 'PostToolUse',\n                'subagent_start': 'SubagentStart',\n                'subagent_stop': 'SubagentStop',\n                'todo_write': 'TodoWrite'\n            };\n            return mapping[event.subtype];\n        }\n        \n        if (event.type === 'todo' && event.subtype === 'updated') {\n            return 'TodoWrite';\n        }\n        \n        if (event.type === 'subagent') {\n            if (event.subtype === 'started') return 'SubagentStart';\n            if (event.subtype === 'stopped') return 'SubagentStop';\n        }\n        \n        if (event.type === 'start') {\n            return 'Start';\n        }\n        \n        if (event.type === 'user_prompt' || event.subtype === 'user_prompt') {\n            return 'user_prompt';\n        }\n        \n        return null;\n    }\n\n    // getSessionId method removed - now using authoritative session IDs directly from socket client\n\n    /**\n     * Process user instruction/prompt event\n     */\n    processUserInstruction(event, session) {\n        const promptText = event.prompt_text || event.data?.prompt_text || event.prompt || '';\n        if (!promptText) return;\n        \n        const instruction = {\n            id: `instruction-${session.id}-${Date.now()}`,\n            text: promptText,\n            preview: promptText.length > 100 ? promptText.substring(0, 100) + '...' : promptText,\n            timestamp: event.timestamp || new Date().toISOString(),\n            type: 'user_instruction'\n        };\n        \n        // Add to session's user instructions\n        session.userInstructions.push(instruction);\n        \n        // Keep only last 5 instructions to prevent memory bloat\n        if (session.userInstructions.length > 5) {\n            session.userInstructions = session.userInstructions.slice(-5);\n        }\n    }\n\n    /**\n     * Process TodoWrite event - attach TODOs to session and active agent\n     */\n    processTodoWrite(event, session) {\n        let todos = event.todos || event.data?.todos || event.data || [];\n        \n        if (todos && typeof todos === 'object' && todos.todos) {\n            todos = todos.todos;\n        }\n        \n        if (!Array.isArray(todos) || todos.length === 0) {\n            return;\n        }\n\n        // Update session's todos directly for overall checklist view\n        session.todos = todos.map(todo => ({\n            content: todo.content,\n            activeForm: todo.activeForm,\n            status: todo.status,\n            timestamp: event.timestamp\n        }));\n        \n        // Create TodoWrite tool for session-level display\n        const sessionTodoTool = {\n            id: `todo-session-${session.id}-${Date.now()}`,\n            name: 'TodoWrite',\n            type: 'tool',\n            icon: '📝',\n            timestamp: event.timestamp,\n            status: 'active',\n            params: {\n                todos: todos\n            },\n            isPrioritizedTool: true\n        };\n        \n        // Update session-level TodoWrite tool\n        session.tools = session.tools.filter(t => t.name !== 'TodoWrite');\n        session.tools.unshift(sessionTodoTool);\n        session.currentTodoTool = sessionTodoTool;\n\n        // ALSO attach TodoWrite to the active agent that triggered it\n        const agentSessionId = event.session_id || event.data?.session_id;\n        let targetAgent = null;\n        \n        // Find the appropriate agent to attach this TodoWrite to\n        // First try to find by session ID\n        if (agentSessionId && session.agents.has(agentSessionId)) {\n            targetAgent = session.agents.get(agentSessionId);\n        } else {\n            // Fall back to most recent active agent\n            const activeAgents = Array.from(session.agents.values())\n                .filter(agent => agent.status === 'active' || agent.status === 'in_progress')\n                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n            \n            if (activeAgents.length > 0) {\n                targetAgent = activeAgents[0];\n            } else {\n                // If no active agents, use the most recently used agent\n                const allAgents = Array.from(session.agents.values())\n                    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n                if (allAgents.length > 0) {\n                    targetAgent = allAgents[0];\n                }\n            }\n        }\n\n        // Create agent-specific TodoWrite tool\n        if (targetAgent) {\n            const agentTodoTool = {\n                id: `todo-agent-${targetAgent.id}-${Date.now()}`,\n                name: 'TodoWrite',\n                type: 'tool',\n                icon: '📝',\n                timestamp: event.timestamp,\n                status: 'active',\n                params: {\n                    todos: todos\n                },\n                isPrioritizedTool: true\n            };\n            \n            // Remove existing TodoWrite tool from agent and add the updated one\n            targetAgent.tools = targetAgent.tools.filter(t => t.name !== 'TodoWrite');\n            targetAgent.tools.unshift(agentTodoTool);\n        }\n    }\n\n    /**\n     * Process SubagentStart event\n     */\n    processSubagentStart(event, session) {\n        const agentName = event.agent_name || event.data?.agent_name || event.data?.agent_type || event.agent_type || event.agent || 'unknown';\n        const agentSessionId = event.session_id || event.data?.session_id;\n        \n        // Use session ID as unique agent identifier, or create unique ID\n        const agentId = agentSessionId || `agent-${Date.now()}-${Math.random()}`;\n        \n        // Check if agent already exists in this session\n        if (!session.agents.has(agentId)) {\n            const agent = {\n                id: agentId,\n                name: agentName,\n                type: 'agent',\n                icon: this.getAgentIcon(agentName),\n                timestamp: event.timestamp,\n                status: 'active',\n                tools: [],\n                sessionId: agentSessionId,\n                isPM: false\n            };\n            \n            session.agents.set(agentId, agent);\n        } else {\n            // Update existing agent status to active\n            const existingAgent = session.agents.get(agentId);\n            existingAgent.status = 'active';\n            existingAgent.timestamp = event.timestamp; // Update timestamp\n        }\n    }\n\n    /**\n     * Process SubagentStop event\n     */\n    processSubagentStop(event, session) {\n        const agentSessionId = event.session_id || event.data?.session_id;\n        \n        // Find and mark agent as completed\n        if (agentSessionId && session.agents.has(agentSessionId)) {\n            const agent = session.agents.get(agentSessionId);\n            agent.status = 'completed';\n        }\n    }\n\n    /**\n     * Process tool use event\n     */\n    processToolUse(event, session) {\n        const toolName = event.tool_name || event.data?.tool_name || event.tool || event.data?.tool || 'unknown';\n        const params = event.tool_parameters || event.data?.tool_parameters || event.parameters || event.data?.parameters || {};\n        const agentSessionId = event.session_id || event.data?.session_id;\n        \n        const tool = {\n            id: `tool-${Date.now()}-${Math.random()}`,\n            name: toolName,\n            type: 'tool',\n            icon: this.getToolIcon(toolName),\n            timestamp: event.timestamp,\n            status: 'in_progress',\n            params: params,\n            eventId: event.id\n        };\n\n        // Find the appropriate agent to attach this tool to\n        let targetAgent = null;\n        \n        // First try to find by session ID\n        if (agentSessionId && session.agents.has(agentSessionId)) {\n            targetAgent = session.agents.get(agentSessionId);\n        } else {\n            // Fall back to most recent active agent\n            const activeAgents = Array.from(session.agents.values())\n                .filter(agent => agent.status === 'active')\n                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n            \n            if (activeAgents.length > 0) {\n                targetAgent = activeAgents[0];\n            } else {\n                // If no active agents, attach to session (PM level)\n                session.tools.push(tool);\n                return;\n            }\n        }\n\n        if (targetAgent) {\n            targetAgent.tools.push(tool);\n        }\n    }\n\n    /**\n     * Update tool status after completion\n     */\n    updateToolStatus(event, session, status) {\n        // Find and update tool status across all agents\n        const findAndUpdateTool = (agent) => {\n            if (agent.tools) {\n                const tool = agent.tools.find(t => t.eventId === event.id);\n                if (tool) {\n                    tool.status = status;\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Check all agents in session\n        for (let agent of session.agents.values()) {\n            if (findAndUpdateTool(agent)) return;\n        }\n        \n        // Check session-level tools (PM level)\n        if (session.tools && findAndUpdateTool(session)) return;\n    }\n\n    /**\n     * Render the linear tree view\n     */\n    renderTree() {\n        const treeContainer = document.getElementById('linear-tree');\n        if (!treeContainer) return;\n        \n        // Clear tree\n        treeContainer.innerHTML = '';\n        \n        // Add sessions directly (no project root)\n        const sortedSessions = Array.from(this.sessions.values())\n            .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n        \n        for (let session of sortedSessions) {\n            if (this.selectedSessionFilter !== 'all' && this.selectedSessionFilter !== session.id) {\n                continue;\n            }\n            \n            const sessionElement = this.createSessionElement(session);\n            treeContainer.appendChild(sessionElement);\n        }\n        \n        // Session filtering is now handled by the main session selector via event listeners\n    }\n\n\n    /**\n     * Create session element\n     */\n    createSessionElement(session) {\n        const isExpanded = this.expandedSessions.has(session.id) || session.expanded;\n        \n        // Ensure timestamp is valid and format it consistently\n        let sessionTime;\n        try {\n            const sessionDate = session.timestamp instanceof Date ? session.timestamp : new Date(session.timestamp);\n            if (isNaN(sessionDate.getTime())) {\n                sessionTime = 'Invalid Date';\n                console.warn('ActivityTree: Invalid session timestamp:', session.timestamp);\n            } else {\n                sessionTime = sessionDate.toLocaleString();\n            }\n        } catch (error) {\n            sessionTime = 'Invalid Date';\n            console.error('ActivityTree: Error formatting session timestamp:', error, session.timestamp);\n        }\n        \n        const element = document.createElement('div');\n        element.className = 'tree-node session';\n        element.dataset.sessionId = session.id;\n        \n        const expandIcon = isExpanded ? '▼' : '▶';\n        const agentCount = session.agents ? session.agents.size : 0;\n        const todoCount = session.todos ? session.todos.length : 0;\n        const instructionCount = session.userInstructions ? session.userInstructions.length : 0;\n        \n        console.log(`ActivityTree: Rendering session ${session.id}: ${agentCount} agents, ${instructionCount} instructions, ${todoCount} todos at ${sessionTime}`);\n        \n        element.innerHTML = `\n            <div class=\"tree-node-content\" onclick=\"window.activityTreeInstance.toggleSession('${session.id}')\">\n                <span class=\"tree-expand-icon\">${expandIcon}</span>\n                <span class=\"tree-icon\">🎯</span>\n                <span class=\"tree-label\">PM Session</span>\n                <span class=\"tree-meta\">${sessionTime} • ${agentCount} agent(s) • ${instructionCount} instruction(s) • ${todoCount} todo(s)</span>\n            </div>\n            <div class=\"tree-children\" style=\"display: ${isExpanded ? 'block' : 'none'}\">\n                ${this.renderSessionContent(session)}\n            </div>\n        `;\n        \n        return element;\n    }\n\n    /**\n     * Render session content (user instructions, todos, agents, tools)\n     */\n    renderSessionContent(session) {\n        let html = '';\n        \n        // Render user instructions first\n        if (session.userInstructions && session.userInstructions.length > 0) {\n            for (let instruction of session.userInstructions.slice(-3)) { // Show last 3 instructions\n                html += this.renderUserInstructionElement(instruction, 1);\n            }\n        }\n        \n        // Render TODOs as checklist directly under session\n        if (session.todos && session.todos.length > 0) {\n            html += this.renderTodoChecklistElement(session.todos, 1);\n        }\n        \n        // Render session-level tools (PM tools)\n        if (session.tools && session.tools.length > 0) {\n            for (let tool of session.tools) {\n                // Show all tools including TodoWrite - both checklist and tool views are useful\n                html += this.renderToolElement(tool, 1);\n            }\n        }\n        \n        // Render agents\n        const agents = Array.from(session.agents.values())\n            .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n        \n        for (let agent of agents) {\n            html += this.renderAgentElement(agent, 1);\n        }\n        \n        return html;\n    }\n\n    /**\n     * Render user instruction element\n     */\n    renderUserInstructionElement(instruction, level) {\n        const isSelected = this.selectedItem && this.selectedItem.type === 'instruction' && this.selectedItem.data.id === instruction.id;\n        const selectedClass = isSelected ? 'selected' : '';\n        \n        return `\n            <div class=\"tree-node user-instruction ${selectedClass}\" data-level=\"${level}\">\n                <div class=\"tree-node-content\">\n                    <span class=\"tree-expand-icon\"></span>\n                    <span class=\"tree-icon\">💬</span>\n                    <span class=\"tree-label clickable\" onclick=\"window.activityTreeInstance.selectItem(${this.escapeJson(instruction)}, 'instruction', event)\">User: \"${this.escapeHtml(instruction.preview)}\"</span>\n                    <span class=\"tree-status status-active\">instruction</span>\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Render TODO checklist element\n     */\n    renderTodoChecklistElement(todos, level) {\n        const checklistId = `checklist-${Date.now()}`;\n        const isExpanded = this.expandedTools.has(checklistId) !== false; // Default to expanded\n        const expandIcon = isExpanded ? '▼' : '▶';\n        \n        // Calculate status summary\n        let completedCount = 0;\n        let inProgressCount = 0;\n        let pendingCount = 0;\n        \n        todos.forEach(todo => {\n            if (todo.status === 'completed') completedCount++;\n            else if (todo.status === 'in_progress') inProgressCount++;\n            else pendingCount++;\n        });\n        \n        let statusSummary = '';\n        if (inProgressCount > 0) {\n            statusSummary = `${inProgressCount} in progress, ${completedCount} completed`;\n        } else if (completedCount === todos.length && todos.length > 0) {\n            statusSummary = `All ${todos.length} completed`;\n        } else {\n            statusSummary = `${todos.length} todo(s)`;\n        }\n        \n        let html = `\n            <div class=\"tree-node todo-checklist\" data-level=\"${level}\">\n                <div class=\"tree-node-content\">\n                    <span class=\"tree-expand-icon\" onclick=\"window.activityTreeInstance.toggleTodoChecklist('${checklistId}'); event.stopPropagation();\">${expandIcon}</span>\n                    <span class=\"tree-icon\">☑️</span>\n                    <span class=\"tree-label\">TODOs</span>\n                    <span class=\"tree-params\">${statusSummary}</span>\n                    <span class=\"tree-status status-active\">checklist</span>\n                </div>\n        `;\n        \n        // Show expanded todo items if expanded\n        if (isExpanded) {\n            html += '<div class=\"tree-children\">';\n            for (let todo of todos) {\n                const statusIcon = this.getCheckboxIcon(todo.status);\n                const statusClass = `status-${todo.status}`;\n                const displayText = todo.status === 'in_progress' ? todo.activeForm : todo.content;\n                \n                html += `\n                    <div class=\"tree-node todo-item ${statusClass}\" data-level=\"${level + 1}\">\n                        <div class=\"tree-node-content\">\n                            <span class=\"tree-expand-icon\"></span>\n                            <span class=\"tree-icon\">${statusIcon}</span>\n                            <span class=\"tree-label\">${this.escapeHtml(displayText)}</span>\n                            <span class=\"tree-status ${statusClass}\">${todo.status.replace('_', ' ')}</span>\n                        </div>\n                    </div>\n                `;\n            }\n            html += '</div>';\n        }\n        \n        html += '</div>';\n        return html;\n    }\n\n    /**\n     * Render agent element\n     */\n    renderAgentElement(agent, level) {\n        const statusClass = agent.status === 'active' ? 'status-active' : 'status-completed';\n        const isExpanded = this.expandedAgents.has(agent.id);\n        const hasTools = agent.tools && agent.tools.length > 0;\n        const isSelected = this.selectedItem && this.selectedItem.type === 'agent' && this.selectedItem.data.id === agent.id;\n        \n        const expandIcon = hasTools ? (isExpanded ? '▼' : '▶') : '';\n        const selectedClass = isSelected ? 'selected' : '';\n        \n        let html = `\n            <div class=\"tree-node agent ${statusClass} ${selectedClass}\" data-level=\"${level}\">\n                <div class=\"tree-node-content\">\n                    ${expandIcon ? `<span class=\"tree-expand-icon\" onclick=\"window.activityTreeInstance.toggleAgent('${agent.id}'); event.stopPropagation();\">${expandIcon}</span>` : '<span class=\"tree-expand-icon\"></span>'}\n                    <span class=\"tree-icon\">${agent.icon}</span>\n                    <span class=\"tree-label clickable\" onclick=\"window.activityTreeInstance.selectItem(${this.escapeJson(agent)}, 'agent', event)\">${agent.name}</span>\n                    <span class=\"tree-status ${statusClass}\">${agent.status}</span>\n                </div>\n        `;\n        \n        // Render tools under this agent\n        if (hasTools && isExpanded) {\n            html += '<div class=\"tree-children\">';\n            for (let tool of agent.tools) {\n                html += this.renderToolElement(tool, level + 1);\n            }\n            html += '</div>';\n        }\n        \n        html += '</div>';\n        return html;\n    }\n\n    /**\n     * Render tool element (non-expandable, clickable to show data)\n     */\n    renderToolElement(tool, level) {\n        const statusClass = `status-${tool.status}`;\n        const params = this.getToolParams(tool);\n        const isSelected = this.selectedItem && this.selectedItem.type === 'tool' && this.selectedItem.data.id === tool.id;\n        const selectedClass = isSelected ? 'selected' : '';\n        \n        let html = `\n            <div class=\"tree-node tool ${statusClass} ${selectedClass}\" data-level=\"${level}\">\n                <div class=\"tree-node-content\">\n                    <span class=\"tree-expand-icon\"></span>\n                    <span class=\"tree-icon\">${tool.icon}</span>\n                    <span class=\"tree-label clickable\" onclick=\"window.activityTreeInstance.selectItem(${this.escapeJson(tool)}, 'tool', event)\">${tool.name} (click to view details)</span>\n                    <span class=\"tree-params\">${params}</span>\n                    <span class=\"tree-status ${statusClass}\">${tool.status}</span>\n                </div>\n            </div>\n        `;\n        \n        return html;\n    }\n\n    /**\n     * Get formatted tool parameters\n     */\n    getToolParams(tool) {\n        if (!tool.params) return '';\n        \n        if (tool.name === 'Read' && tool.params.file_path) {\n            return tool.params.file_path;\n        }\n        if (tool.name === 'Edit' && tool.params.file_path) {\n            return tool.params.file_path;\n        }\n        if (tool.name === 'Write' && tool.params.file_path) {\n            return tool.params.file_path;\n        }\n        if (tool.name === 'Bash' && tool.params.command) {\n            const cmd = tool.params.command;\n            return cmd.length > 50 ? cmd.substring(0, 50) + '...' : cmd;\n        }\n        if (tool.name === 'WebFetch' && tool.params.url) {\n            return tool.params.url;\n        }\n        \n        return '';\n    }\n\n    /**\n     * Get status icon for todo status\n     */\n    getStatusIcon(status) {\n        const icons = {\n            'pending': '⏸️',\n            'in_progress': '🔄',\n            'completed': '✅'\n        };\n        return icons[status] || '❓';\n    }\n\n    /**\n     * Get checkbox icon for todo checklist items\n     */\n    getCheckboxIcon(status) {\n        const icons = {\n            'pending': '⏳',\n            'in_progress': '🔄',\n            'completed': '✅'\n        };\n        return icons[status] || '❓';\n    }\n\n    /**\n     * Get agent icon based on name\n     */\n    getAgentIcon(agentName) {\n        const icons = {\n            'engineer': '👷',\n            'research': '🔬',\n            'qa': '🧪',\n            'ops': '⚙️',\n            'pm': '📊',\n            'architect': '🏗️'\n        };\n        return icons[agentName.toLowerCase()] || '🤖';\n    }\n\n    /**\n     * Get tool icon based on name\n     */\n    getToolIcon(toolName) {\n        const icons = {\n            'read': '👁️',\n            'write': '✍️',\n            'edit': '✏️',\n            'bash': '💻',\n            'webfetch': '🌐',\n            'grep': '🔍',\n            'glob': '📂',\n            'todowrite': '📝'\n        };\n        return icons[toolName.toLowerCase()] || '🔧';\n    }\n\n    /**\n     * Toggle session expansion\n     */\n    toggleSession(sessionId) {\n        if (this.expandedSessions.has(sessionId)) {\n            this.expandedSessions.delete(sessionId);\n        } else {\n            this.expandedSessions.add(sessionId);\n        }\n        \n        // Update the session in the data structure\n        const session = this.sessions.get(sessionId);\n        if (session) {\n            session.expanded = this.expandedSessions.has(sessionId);\n        }\n        \n        this.renderTree();\n    }\n\n    /**\n     * Expand all sessions\n     */\n    expandAllSessions() {\n        for (let sessionId of this.sessions.keys()) {\n            this.expandedSessions.add(sessionId);\n            const session = this.sessions.get(sessionId);\n            if (session) session.expanded = true;\n        }\n        this.renderTree();\n    }\n\n    /**\n     * Collapse all sessions\n     */\n    collapseAllSessions() {\n        this.expandedSessions.clear();\n        for (let session of this.sessions.values()) {\n            session.expanded = false;\n        }\n        this.renderTree();\n    }\n\n\n    /**\n     * Update statistics\n     */\n    updateStats() {\n        const totalNodes = this.countTotalNodes();\n        const activeNodes = this.countActiveNodes();\n        const maxDepth = this.calculateMaxDepth();\n\n        const nodeCountEl = document.getElementById('node-count');\n        const activeCountEl = document.getElementById('active-count');\n        const depthEl = document.getElementById('tree-depth');\n        \n        if (nodeCountEl) nodeCountEl.textContent = totalNodes;\n        if (activeCountEl) activeCountEl.textContent = activeNodes;\n        if (depthEl) depthEl.textContent = maxDepth;\n        \n        console.log(`ActivityTree: Stats updated - Nodes: ${totalNodes}, Active: ${activeNodes}, Depth: ${maxDepth}`);\n    }\n\n    /**\n     * Count total nodes across all sessions\n     */\n    countTotalNodes() {\n        let count = 0; // No project root anymore\n        for (let session of this.sessions.values()) {\n            count += 1; // Session\n            count += session.agents.size; // Agents\n            \n            // Count user instructions\n            if (session.userInstructions) {\n                count += session.userInstructions.length;\n            }\n            \n            // Count todos\n            if (session.todos) {\n                count += session.todos.length;\n            }\n            \n            // Count session-level tools\n            if (session.tools) {\n                count += session.tools.length;\n            }\n            \n            // Count tools in agents\n            for (let agent of session.agents.values()) {\n                if (agent.tools) {\n                    count += agent.tools.length;\n                }\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Count active nodes (in progress)\n     */\n    countActiveNodes() {\n        let count = 0;\n        for (let session of this.sessions.values()) {\n            // Count active session\n            if (session.status === 'active') count++;\n            \n            // Count active todos\n            if (session.todos) {\n                for (let todo of session.todos) {\n                    if (todo.status === 'in_progress') count++;\n                }\n            }\n            \n            // Count session-level tools\n            if (session.tools) {\n                for (let tool of session.tools) {\n                    if (tool.status === 'in_progress') count++;\n                }\n            }\n            \n            // Count agents and their tools\n            for (let agent of session.agents.values()) {\n                if (agent.status === 'active') count++;\n                if (agent.tools) {\n                    for (let tool of agent.tools) {\n                        if (tool.status === 'in_progress') count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Calculate maximum depth\n     */\n    calculateMaxDepth() {\n        let maxDepth = 0; // No project root anymore\n        for (let session of this.sessions.values()) {\n            let sessionDepth = 1; // Session level (now root level)\n            \n            // Check session content (instructions, todos, tools)\n            if (session.userInstructions && session.userInstructions.length > 0) {\n                sessionDepth = Math.max(sessionDepth, 2); // Instruction level\n            }\n            \n            if (session.todos && session.todos.length > 0) {\n                sessionDepth = Math.max(sessionDepth, 3); // Todo checklist -> todo items\n            }\n            \n            if (session.tools && session.tools.length > 0) {\n                sessionDepth = Math.max(sessionDepth, 2); // Tool level\n            }\n            \n            // Check agents\n            for (let agent of session.agents.values()) {\n                if (agent.tools && agent.tools.length > 0) {\n                    sessionDepth = Math.max(sessionDepth, 3); // Tool level under agents\n                }\n            }\n            \n            maxDepth = Math.max(maxDepth, sessionDepth);\n        }\n        return maxDepth;\n    }\n\n    /**\n     * Toggle agent expansion\n     */\n    toggleAgent(agentId) {\n        if (this.expandedAgents.has(agentId)) {\n            this.expandedAgents.delete(agentId);\n        } else {\n            this.expandedAgents.add(agentId);\n        }\n        this.renderTree();\n    }\n    \n    /**\n     * Toggle tool expansion (deprecated - tools are no longer expandable)\n     */\n    toggleTool(toolId) {\n        // Tools are no longer expandable - this method is kept for compatibility\n        console.log('Tool expansion is disabled. Tools now show data in the left pane when clicked.');\n    }\n\n    /**\n     * Toggle TODO checklist expansion\n     */\n    toggleTodoChecklist(checklistId) {\n        if (this.expandedTools.has(checklistId)) {\n            this.expandedTools.delete(checklistId);\n        } else {\n            this.expandedTools.add(checklistId);\n        }\n        this.renderTree();\n    }\n\n    /**\n     * Handle item click to show data in left pane\n     */\n    selectItem(item, itemType, event) {\n        // Stop event propagation to prevent expand/collapse when clicking on label\n        if (event) {\n            event.stopPropagation();\n        }\n        \n        this.selectedItem = { data: item, type: itemType };\n        this.displayItemData(item, itemType);\n        this.renderTree(); // Re-render to show selection highlight\n    }\n\n    /**\n     * Display item data in left pane\n     */\n    displayItemData(item, itemType) {\n        const moduleContent = document.getElementById('module-data-content');\n        if (!moduleContent) return;\n        \n        let html = '';\n        let title = '';\n        \n        switch (itemType) {\n            case 'agent':\n                title = `🤖 Agent: ${item.name}`;\n                html = this.formatAgentData(item);\n                break;\n            case 'tool':\n                title = `🔧 Tool: ${item.name}`;\n                html = this.formatToolData(item);\n                break;\n            case 'instruction':\n                title = `💬 User Instruction`;\n                html = this.formatInstructionData(item);\n                break;\n            default:\n                title = '📊 Item Details';\n                html = this.formatGenericData(item);\n        }\n        \n        moduleContent.innerHTML = `\n            <div class=\"module-item-details\">\n                <div class=\"module-item-header\">\n                    <h6>${title}</h6>\n                    <span class=\"module-item-timestamp\">${new Date(item.timestamp).toLocaleString()}</span>\n                </div>\n                <div class=\"module-item-content\">\n                    ${html}\n                </div>\n            </div>\n        `;\n        \n        // Update module header\n        const moduleHeader = document.querySelector('.module-data-header h5');\n        if (moduleHeader) {\n            moduleHeader.textContent = title;\n        }\n    }\n\n    /**\n     * Format agent data for display\n     */\n    formatAgentData(agent) {\n        return `\n            <div class=\"agent-details\">\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Name:</span>\n                    <span class=\"detail-value\">${agent.name}</span>\n                </div>\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Status:</span>\n                    <span class=\"detail-value status-${agent.status}\">${agent.status}</span>\n                </div>\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Session ID:</span>\n                    <span class=\"detail-value\">${agent.sessionId || 'N/A'}</span>\n                </div>\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Tools Used:</span>\n                    <span class=\"detail-value\">${agent.tools ? agent.tools.length : 0}</span>\n                </div>\n                ${agent.tools && agent.tools.length > 0 ? `\n                    <div class=\"detail-section\">\n                        <span class=\"detail-section-title\">Tools:</span>\n                        <div class=\"tools-list\">\n                            ${agent.tools.map(tool => `\n                                <div class=\"tool-summary\">\n                                    <span class=\"tool-icon\">${this.getToolIcon(tool.name)}</span>\n                                    <span class=\"tool-name\">${tool.name}</span>\n                                    <span class=\"tool-status status-${tool.status}\">${tool.status}</span>\n                                </div>\n                            `).join('')}\n                        </div>\n                    </div>\n                ` : ''}\n            </div>\n        `;\n    }\n\n    /**\n     * Format tool data for display\n     */\n    formatToolData(tool) {\n        const paramKeys = tool.params ? Object.keys(tool.params) : [];\n        \n        return `\n            <div class=\"tool-details\">\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Tool:</span>\n                    <span class=\"detail-value\">${tool.icon} ${tool.name}</span>\n                </div>\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Status:</span>\n                    <span class=\"detail-value\">\n                        <span class=\"status-badge status-${tool.status}\">${tool.status.replace('_', ' ')}</span>\n                    </span>\n                </div>\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Timestamp:</span>\n                    <span class=\"detail-value\">${new Date(tool.timestamp).toLocaleString()}</span>\n                </div>\n                ${paramKeys.length > 0 ? `\n                    <div class=\"detail-section\">\n                        <span class=\"detail-section-title\">Parameters (${paramKeys.length}):</span>\n                        <div class=\"params-list\">\n                            ${paramKeys.map(key => {\n                                const value = tool.params[key];\n                                const displayValue = this.formatDetailedParamValue(value);\n                                return `\n                                    <div class=\"param-item\">\n                                        <div class=\"param-key\">${key}:</div>\n                                        <div class=\"param-value\">${displayValue}</div>\n                                    </div>\n                                `;\n                            }).join('')}\n                        </div>\n                    </div>\n                ` : `\n                    <div class=\"detail-section\">\n                        <span class=\"detail-section-title\">Parameters:</span>\n                        <div class=\"params-list\">\n                            <div class=\"param-item\">\n                                <div class=\"param-value\">No parameters</div>\n                            </div>\n                        </div>\n                    </div>\n                `}\n                ${tool.result ? `\n                    <div class=\"detail-section\">\n                        <span class=\"detail-section-title\">Result:</span>\n                        <pre class=\"tool-result\">${this.escapeHtml(JSON.stringify(tool.result, null, 2))}</pre>\n                    </div>\n                ` : ''}\n            </div>\n        `;\n    }\n\n    /**\n     * Format parameter value for display (brief version for tree)\n     */\n    formatParamValue(value) {\n        if (typeof value === 'string' && value.length > 100) {\n            return value.substring(0, 100) + '...';\n        }\n        if (typeof value === 'object') {\n            return JSON.stringify(value);\n        }\n        return String(value);\n    }\n\n    /**\n     * Format parameter value for detailed display in data viewer\n     */\n    formatDetailedParamValue(value) {\n        if (typeof value === 'string') {\n            // Handle long strings with proper line breaks\n            if (value.length > 500) {\n                return `<pre class=\"param-text-long\">${this.escapeHtml(value.substring(0, 500) + '...\\n\\n[Content truncated - ' + value.length + ' total characters]')}</pre>`;\n            } else if (value.length > 100) {\n                return `<pre class=\"param-text\">${this.escapeHtml(value)}</pre>`;\n            } else {\n                return `<span class=\"param-text-short\">${this.escapeHtml(value)}</span>`;\n            }\n        } else if (typeof value === 'object') {\n            try {\n                return `<pre class=\"param-json\">${this.escapeHtml(JSON.stringify(value, null, 2))}</pre>`;\n            } catch (e) {\n                return `<span class=\"param-error\">Error displaying object</span>`;\n            }\n        } else {\n            return `<span class=\"param-primitive\">${this.escapeHtml(String(value))}</span>`;\n        }\n    }\n\n    /**\n     * Format instruction data for display\n     */\n    formatInstructionData(instruction) {\n        return `\n            <div class=\"instruction-details\">\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Text:</span>\n                    <span class=\"detail-value\">${this.escapeHtml(instruction.text)}</span>\n                </div>\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Timestamp:</span>\n                    <span class=\"detail-value\">${new Date(instruction.timestamp).toLocaleString()}</span>\n                </div>\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Length:</span>\n                    <span class=\"detail-value\">${instruction.text.length} characters</span>\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Format generic data for display (clean, no raw JSON)\n     */\n    formatGenericData(item) {\n        if (typeof item === 'object') {\n            let html = '<div class=\"generic-details\">';\n            \n            // Display only meaningful properties, avoid raw JSON\n            const meaningfulProps = ['id', 'name', 'type', 'status', 'timestamp', 'text', 'content'];\n            \n            for (let prop of meaningfulProps) {\n                if (item[prop] !== undefined) {\n                    let value = item[prop];\n                    if (typeof value === 'string' && value.length > 200) {\n                        value = value.substring(0, 200) + '...';\n                    }\n                    \n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">${prop}:</span>\n                            <span class=\"detail-value\">${this.escapeHtml(String(value))}</span>\n                        </div>\n                    `;\n                }\n            }\n            \n            html += '</div>';\n            return html;\n        } else {\n            return `<div class=\"simple-value\">${this.escapeHtml(String(item))}</div>`;\n        }\n    }\n\n    /**\n     * Escape HTML for safe display\n     */\n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n\n    /**\n     * Reset zoom and pan to initial state\n     */\n    resetZoom() {\n        if (this.svg && this.zoom) {\n            this.svg.transition()\n                .duration(this.duration)\n                .call(this.zoom.transform, d3.zoomIdentity);\n        }\n    }\n    \n    /**\n     * Escape JSON for safe inclusion in HTML attributes\n     */\n    escapeJson(obj) {\n        return JSON.stringify(obj).replace(/'/g, '&apos;').replace(/\"/g, '&quot;');\n    }\n}\n\n// Make ActivityTree globally available\nwindow.ActivityTree = ActivityTree;\n\n// Initialize when the Activity tab is selected\nconst setupActivityTreeListeners = () => {\n    let activityTree = null;\n\n    const initializeActivityTree = () => {\n        if (!activityTree) {\n            console.log('Creating new Activity Tree instance...');\n            activityTree = new ActivityTree();\n            window.activityTreeInstance = activityTree;\n            window.activityTree = () => activityTree; // For debugging\n        }\n        \n        setTimeout(() => {\n            console.log('Attempting to initialize Activity Tree visualization...');\n            activityTree.initialize();\n        }, 100);\n    };\n\n    // Tab switching logic\n    document.querySelectorAll('.tab-button').forEach(button => {\n        button.addEventListener('click', (e) => {\n            const tabName = e.target.getAttribute('data-tab');\n            \n            if (tabName === 'activity') {\n                console.log('Activity tab button clicked, initializing tree...');\n                initializeActivityTree();\n                if (activityTree) {\n                    setTimeout(() => {\n                        activityTree.renderWhenVisible();\n                        activityTree.forceShow();\n                    }, 150);\n                }\n            }\n        });\n    });\n\n    // Listen for custom tab change events\n    document.addEventListener('tabChanged', (e) => {\n        if (e.detail && e.detail.newTab === 'activity') {\n            console.log('Tab changed to activity, initializing tree...');\n            initializeActivityTree();\n            if (activityTree) {\n                setTimeout(() => {\n                    activityTree.renderWhenVisible();\n                    activityTree.forceShow();\n                }, 150);\n            }\n        }\n    });\n\n    // Check if activity tab is already active on load\n    const activeTab = document.querySelector('.tab-button.active');\n    if (activeTab && activeTab.getAttribute('data-tab') === 'activity') {\n        console.log('Activity tab is active on load, initializing tree...');\n        initializeActivityTree();\n    }\n    \n    const activityPanel = document.getElementById('activity-tab');\n    if (activityPanel && activityPanel.classList.contains('active')) {\n        console.log('Activity panel is active on load, initializing tree...');\n        if (!activityTree) {\n            initializeActivityTree();\n        }\n    }\n};\n\n// Set up listeners when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', setupActivityTreeListeners);\n} else {\n    setupActivityTreeListeners();\n}\n\nexport { ActivityTree };\nexport default ActivityTree;"],"names":["ActivityTree","constructor","this","container","events","sessions","Map","currentSession","selectedSessionFilter","timeRange","searchTerm","initialized","expandedSessions","Set","expandedAgents","expandedTools","selectedItem","initialize","console","log","document","getElementById","error","tabPanel","classList","contains","setupControls","subscribeToEvents","createLinearTreeView","forceShow","renderTree","renderWhenVisible","timeRangeSelect","addEventListener","e","target","value","detail","sessionId","setTimeout","window","sessionManager","currentFilter","getCurrentFilter","expandAllBtn","expandAllSessions","collapseAllBtn","collapseAllSessions","resetZoomBtn","style","display","resetZoom","searchInput","toLowerCase","innerHTML","treeContainer","createElement","id","className","appendChild","socketClient","warn","onEventUpdate","length","size","clear","sessionData","entries","activitySession","timestamp","Date","lastActivity","startTime","expanded","has","agents","todos","userInstructions","tools","status","currentTodoTool","working_directory","git_branch","eventCount","set","newEventCount","newEvents","slice","forEach","event","processEvent","Array","from","socketState","getState","eventType","getEventType","isNaN","getTime","session_id","data","session","get","processUserInstruction","processTodoWrite","processSubagentStart","processSubagentStop","processToolUse","updateToolStatus","updateStats","hook_event_name","type","subtype","pre_tool","post_tool","subagent_start","subagent_stop","todo_write","promptText","prompt_text","prompt","instruction","now","text","preview","substring","toISOString","push","isArray","map","todo","content","activeForm","sessionTodoTool","name","icon","params","isPrioritizedTool","filter","t","unshift","agentSessionId","targetAgent","activeAgents","values","agent","sort","a","b","allAgents","agentTodoTool","agentName","agent_name","agent_type","agentId","Math","random","existingAgent","getAgentIcon","isPM","toolName","tool_name","tool","tool_parameters","parameters","getToolIcon","eventId","findAndUpdateTool","find","sortedSessions","sessionElement","createSessionElement","isExpanded","sessionTime","sessionDate","toLocaleString","element","dataset","expandIcon","agentCount","todoCount","instructionCount","renderSessionContent","html","renderUserInstructionElement","renderTodoChecklistElement","renderToolElement","renderAgentElement","level","escapeJson","escapeHtml","checklistId","completedCount","inProgressCount","statusSummary","statusIcon","getCheckboxIcon","statusClass","displayText","replace","hasTools","getToolParams","file_path","command","cmd","url","getStatusIcon","pending","in_progress","completed","engineer","research","qa","ops","pm","architect","read","write","edit","bash","webfetch","grep","glob","todowrite","toggleSession","delete","add","keys","totalNodes","countTotalNodes","activeNodes","countActiveNodes","maxDepth","calculateMaxDepth","nodeCountEl","activeCountEl","depthEl","textContent","count","sessionDepth","max","toggleAgent","toggleTool","toolId","toggleTodoChecklist","selectItem","item","itemType","stopPropagation","displayItemData","moduleContent","title","formatAgentData","formatToolData","formatInstructionData","formatGenericData","moduleHeader","querySelector","join","paramKeys","Object","key","formatDetailedParamValue","result","JSON","stringify","formatParamValue","String","meaningfulProps","prop","div","svg","zoom","transition","duration","call","transform","d3","zoomIdentity","obj","setupActivityTreeListeners","activityTree","initializeActivityTree","activityTreeInstance","querySelectorAll","button","getAttribute","newTab","activeTab","activityPanel","readyState"],"mappings":"AAOA,MAAMA,EACF,WAAAC,GACIC,KAAKC,UAAY,KACjBD,KAAKE,OAAS,GACdF,KAAKG,aAAeC,IACpBJ,KAAKK,eAAiB,KACtBL,KAAKM,sBAAwB,MAC7BN,KAAKO,UAAY,QACjBP,KAAKQ,WAAa,GAClBR,KAAKS,aAAc,EACnBT,KAAKU,qBAAuBC,IAC5BX,KAAKY,mBAAqBD,IAC1BX,KAAKa,kBAAoBF,IACzBX,KAAKc,aAAe,IACxB,CAKA,UAAAC,GAGI,GAFAC,QAAQC,IAAI,iDAAkDjB,KAAKS,aAE/DT,KAAKS,YAEL,YADAO,QAAQC,IAAI,+CAKhB,GADAjB,KAAKC,UAAYiB,SAASC,eAAe,4BACpCnB,KAAKC,YACND,KAAKC,UAAYiB,SAASC,eAAe,kBACpCnB,KAAKC,WAEN,YADAe,QAAQI,MAAM,4CAMtB,MAAMC,EAAWH,SAASC,eAAe,gBACzC,GAAKE,EAAL,CAMA,IAAKA,EAASC,UAAUC,SAAS,UAK7B,OAJAP,QAAQC,IAAI,8DACZjB,KAAKwB,gBACLxB,KAAKyB,yBACLzB,KAAKS,aAAc,GAIvBT,KAAKwB,gBACLxB,KAAK0B,uBACL1B,KAAKyB,oBAELzB,KAAKS,aAAc,EACnBO,QAAQC,IAAI,wCAhBZ,MAFID,QAAQI,MAAM,sDAmBtB,CAKA,SAAAO,GACIX,QAAQC,IAAI,mCAEPjB,KAAKC,YACND,KAAKC,UAAYiB,SAASC,eAAe,4BAA8BD,SAASC,eAAe,iBAC1FnB,KAAKC,YAMdD,KAAK0B,uBACL1B,KAAK4B,cANGZ,QAAQI,MAAM,sCAO1B,CAKA,iBAAAS,GAGI,GAFAb,QAAQC,IAAI,4CAEPjB,KAAKS,YAGN,OAFAO,QAAQC,IAAI,mDACZjB,KAAKe,aAITf,KAAK0B,uBACL1B,KAAK4B,YACT,CAKA,aAAAJ,GAEI,MAAMM,EAAkBZ,SAASC,eAAe,cAC5CW,GACAA,EAAgBC,iBAAiB,SAAWC,IACxChC,KAAKO,UAAYyB,EAAEC,OAAOC,MAC1BlB,QAAQC,IAAI,wCAAwCjB,KAAKO,aACzDP,KAAK4B,eAKbV,SAASa,iBAAiB,uBAAyBC,IAC/ChC,KAAKM,sBAAwB0B,EAAEG,OAAOC,WAAa,MACnDpB,QAAQC,IAAI,4CAA4CjB,KAAKM,+CAC7DN,KAAK4B,eAITV,SAASa,iBAAiB,iBAAmBC,IACzChC,KAAKM,sBAAwB0B,EAAEG,OAAOC,WAAa,MACnDpB,QAAQC,IAAI,qCAAqCjB,KAAKM,iEACtDN,KAAK4B,eAITS,WAAW,KACP,GAAIC,OAAOC,eAAgB,CACvB,MAAMC,EAAgBF,OAAOC,eAAeE,mBACxCD,IAAkBxC,KAAKM,wBACvBN,KAAKM,sBAAwBkC,GAAiB,MAC9CxB,QAAQC,IAAI,0DAA0DjB,KAAKM,yBAC3EN,KAAK4B,aAEb,GACD,KAGH,MAAMc,EAAexB,SAASC,eAAe,cACzCuB,GACAA,EAAaX,iBAAiB,QAAS,IAAM/B,KAAK2C,qBAItD,MAAMC,EAAiB1B,SAASC,eAAe,gBAC3CyB,GACAA,EAAeb,iBAAiB,QAAS,IAAM/B,KAAK6C,uBAIxD,MAAMC,EAAe5B,SAASC,eAAe,cACzC2B,IACAA,EAAaC,MAAMC,QAAU,eAC7BF,EAAaf,iBAAiB,QAAS,IAAM/B,KAAKiD,cAItD,MAAMC,EAAchC,SAASC,eAAe,mBACxC+B,GACAA,EAAYnB,iBAAiB,QAAUC,IACnChC,KAAKQ,WAAawB,EAAEC,OAAOC,MAAMiB,cACjCnD,KAAK4B,cAGjB,CAKA,oBAAAF,GACIV,QAAQC,IAAI,6BAGZjB,KAAKC,UAAUmD,UAAY,GAG3B,MAAMC,EAAgBnC,SAASoC,cAAc,OAC7CD,EAAcE,GAAK,cACnBF,EAAcG,UAAY,cAE1BxD,KAAKC,UAAUwD,YAAYJ,GAE3BrC,QAAQC,IAAI,2BAChB,CAKA,iBAAAQ,GACI,IAAKa,OAAOoB,aAGR,OAFA1C,QAAQ2C,KAAK,sDACbtB,WAAW,IAAMrC,KAAKyB,oBAAqB,KAI/CT,QAAQC,IAAI,+CAIZqB,OAAOoB,aAAaE,cAAc,CAAC1D,EAAQC,KACvCa,QAAQC,IAAI,2CAA2Cf,EAAO2D,2BAA2B1D,EAAS2D,iBAGlG9D,KAAKG,SAAS4D,QAGd,IAAA,MAAY3B,EAAW4B,KAAgB7D,EAAS8D,UAAW,CACvD,MAAMC,EAAkB,CACpBX,GAAInB,EACJ+B,UAAW,IAAIC,KAAKJ,EAAYK,cAAgBL,EAAYM,WAAa,IAAIF,MAC7EG,SAAUvE,KAAKU,iBAAiB8D,IAAIpC,KAAc,EAClDqC,WAAYrE,IACZsE,MAAO,GACPC,iBAAkB,GAClBC,MAAO,GACPC,OAAQ,SACRC,gBAAiB,KAEjBC,kBAAmBf,EAAYe,kBAC/BC,WAAYhB,EAAYgB,WACxBC,WAAYjB,EAAYiB,YAE5BjF,KAAKG,SAAS+E,IAAI9C,EAAW8B,EACjC,CAGA,MAAMiB,EAAgBjF,EAAO2D,OAAS7D,KAAKE,OAAO2D,OAClD,GAAIsB,EAAgB,EAAG,CACnB,MAAMC,EAAYlF,EAAOmF,MAAMrF,KAAKE,OAAO2D,QAC3C7C,QAAQC,IAAI,4BAA4BkE,eAA4BC,GAEpEA,EAAUE,QAAQC,IACdvF,KAAKwF,aAAaD,IAE1B,CAEAvF,KAAKE,OAAS,IAAIA,GAClBF,KAAK4B,aAGLZ,QAAQC,IAAI,wDAAyDwE,MAAMC,KAAK1F,KAAKG,SAAS8D,cAIlG,MAAM0B,EAAcrD,OAAOoB,cAAckC,WAEzC,GAAID,GAAeA,EAAYzF,OAAO2D,OAAS,EAAG,CAC9C7C,QAAQC,IAAI,yCAAyC0E,EAAYzF,OAAO2D,kBAAkB8B,EAAYxF,SAAS2D,iBAG/G9D,KAAKG,SAAS4D,QAGd,IAAA,MAAY3B,EAAW4B,KAAgB2B,EAAYxF,SAAS8D,UAAW,CACnE,MAAMC,EAAkB,CACpBX,GAAInB,EACJ+B,UAAW,IAAIC,KAAKJ,EAAYK,cAAgBL,EAAYM,WAAa,IAAIF,MAC7EG,SAAUvE,KAAKU,iBAAiB8D,IAAIpC,KAAc,EAClDqC,WAAYrE,IACZsE,MAAO,GACPC,iBAAkB,GAClBC,MAAO,GACPC,OAAQ,SACRC,gBAAiB,KACjBC,kBAAmBf,EAAYe,kBAC/BC,WAAYhB,EAAYgB,WACxBC,WAAYjB,EAAYiB,YAE5BjF,KAAKG,SAAS+E,IAAI9C,EAAW8B,EACjC,CAGAyB,EAAYzF,OAAOoF,QAAQC,IACvBvF,KAAKwF,aAAaD,KAEtBvF,KAAKE,OAAS,IAAIyF,EAAYzF,QAC9BF,KAAK4B,aAGLZ,QAAQC,IAAI,wCAAyCwE,MAAMC,KAAK1F,KAAKG,SAAS8D,WAClF,MACIjD,QAAQC,IAAI,0CACZjB,KAAKE,OAAS,GACdF,KAAKG,SAAS4D,QACd/D,KAAK4B,YAEb,CAKA,YAAA4D,CAAaD,GACT,IAAKA,EAED,YADAvE,QAAQC,IAAI,qCAKhB,IAQIkD,EARA0B,EAAY7F,KAAK8F,aAAaP,GAClC,IAAKM,EACD,OAGJ7E,QAAQC,IAAI,mCAAmC4E,IAAaN,GAIxDA,EAAMpB,WAENA,EAAY,IAAIC,KAAKmB,EAAMpB,WAEvB4B,MAAM5B,EAAU6B,aAChBhF,QAAQ2C,KAAK,uDAAwD4B,EAAMpB,WAC3EA,MAAgBC,QAGpBpD,QAAQ2C,KAAK,wDACbQ,MAAgBC,MAIpB,MAAMhC,EAAYmD,EAAMU,YAAcV,EAAMW,MAAMD,WAGlD,IAAK7D,EAED,YADApB,QAAQC,IAAI,oDAAoD4E,KAKpE,IAAK7F,KAAKG,SAASqE,IAAIpC,GAEnB,YADApB,QAAQ2C,KAAK,yBAAyBvB,0DAI1C,MAAM+D,EAAUnG,KAAKG,SAASiG,IAAIhE,GAElC,OAAQyD,GACJ,IAAK,QAED7F,KAAKK,eAAiB8F,EACtB,MACJ,IAAK,cACDnG,KAAKqG,uBAAuBd,EAAOY,GACnC,MACJ,IAAK,YACDnG,KAAKsG,iBAAiBf,EAAOY,GAC7B,MACJ,IAAK,gBACDnG,KAAKuG,qBAAqBhB,EAAOY,GACjC,MACJ,IAAK,eACDnG,KAAKwG,oBAAoBjB,EAAOY,GAChC,MACJ,IAAK,aACDnG,KAAKyG,eAAelB,EAAOY,GAC3B,MACJ,IAAK,cACDnG,KAAK0G,iBAAiBnB,EAAOY,EAAS,aAI9CnG,KAAK2G,aACT,CAKA,YAAAb,CAAaP,GACT,GAAIA,EAAMqB,gBACN,OAAOrB,EAAMqB,gBAGjB,GAAmB,SAAfrB,EAAMsB,MAAmBtB,EAAMuB,QAAS,CAQxC,MAPgB,CACZC,SAAY,aACZC,UAAa,cACbC,eAAkB,gBAClBC,cAAiB,eACjBC,WAAc,aAEH5B,EAAMuB,QACzB,CAEA,GAAmB,SAAfvB,EAAMsB,MAAqC,YAAlBtB,EAAMuB,QAC/B,MAAO,YAGX,GAAmB,aAAfvB,EAAMsB,KAAqB,CAC3B,GAAsB,YAAlBtB,EAAMuB,QAAuB,MAAO,gBACxC,GAAsB,YAAlBvB,EAAMuB,QAAuB,MAAO,cAC5C,CAEA,MAAmB,UAAfvB,EAAMsB,KACC,QAGQ,gBAAftB,EAAMsB,MAA4C,gBAAlBtB,EAAMuB,QAC/B,cAGJ,IACX,CAOA,sBAAAT,CAAuBd,EAAOY,GAC1B,MAAMiB,EAAa7B,EAAM8B,aAAe9B,EAAMW,MAAMmB,aAAe9B,EAAM+B,QAAU,GACnF,IAAKF,EAAY,OAEjB,MAAMG,EAAc,CAChBhE,GAAI,eAAe4C,EAAQ5C,MAAMa,KAAKoD,QACtCC,KAAML,EACNM,QAASN,EAAWvD,OAAS,IAAMuD,EAAWO,UAAU,EAAG,KAAO,MAAQP,EAC1EjD,UAAWoB,EAAMpB,YAAA,IAAiBC,MAAOwD,cACzCf,KAAM,oBAIVV,EAAQxB,iBAAiBkD,KAAKN,GAG1BpB,EAAQxB,iBAAiBd,OAAS,IAClCsC,EAAQxB,iBAAmBwB,EAAQxB,iBAAiBU,OAAM,GAElE,CAKA,gBAAAiB,CAAiBf,EAAOY,GACpB,IAAIzB,EAAQa,EAAMb,OAASa,EAAMW,MAAMxB,OAASa,EAAMW,MAAQ,GAM9D,GAJIxB,GAA0B,iBAAVA,GAAsBA,EAAMA,QAC5CA,EAAQA,EAAMA,QAGbe,MAAMqC,QAAQpD,IAA2B,IAAjBA,EAAMb,OAC/B,OAIJsC,EAAQzB,MAAQA,EAAMqD,IAAIC,IAAA,CACtBC,QAASD,EAAKC,QACdC,WAAYF,EAAKE,WACjBrD,OAAQmD,EAAKnD,OACbV,UAAWoB,EAAMpB,aAIrB,MAAMgE,EAAkB,CACpB5E,GAAI,gBAAgB4C,EAAQ5C,MAAMa,KAAKoD,QACvCY,KAAM,YACNvB,KAAM,OACNwB,KAAM,KACNlE,UAAWoB,EAAMpB,UACjBU,OAAQ,SACRyD,OAAQ,CACJ5D,SAEJ6D,mBAAmB,GAIvBpC,EAAQvB,MAAQuB,EAAQvB,MAAM4D,OAAOC,GAAgB,cAAXA,EAAEL,MAC5CjC,EAAQvB,MAAM8D,QAAQP,GACtBhC,EAAQrB,gBAAkBqD,EAG1B,MAAMQ,EAAiBpD,EAAMU,YAAcV,EAAMW,MAAMD,WACvD,IAAI2C,EAAc,KAIlB,GAAID,GAAkBxC,EAAQ1B,OAAOD,IAAImE,GACrCC,EAAczC,EAAQ1B,OAAO2B,IAAIuC,OAC9B,CAEH,MAAME,EAAepD,MAAMC,KAAKS,EAAQ1B,OAAOqE,UAC1CN,OAAOO,GAA0B,WAAjBA,EAAMlE,QAAwC,gBAAjBkE,EAAMlE,QACnDmE,KAAK,CAACC,EAAGC,IAAM,IAAI9E,KAAK8E,EAAE/E,WAAa,IAAIC,KAAK6E,EAAE9E,YAEvD,GAAI0E,EAAahF,OAAS,EACtB+E,EAAcC,EAAa,OACxB,CAEH,MAAMM,EAAY1D,MAAMC,KAAKS,EAAQ1B,OAAOqE,UACvCE,KAAK,CAACC,EAAGC,IAAM,IAAI9E,KAAK8E,EAAE/E,WAAa,IAAIC,KAAK6E,EAAE9E,YACnDgF,EAAUtF,OAAS,IACnB+E,EAAcO,EAAU,GAEhC,CACJ,CAGA,GAAIP,EAAa,CACb,MAAMQ,EAAgB,CAClB7F,GAAI,cAAcqF,EAAYrF,MAAMa,KAAKoD,QACzCY,KAAM,YACNvB,KAAM,OACNwB,KAAM,KACNlE,UAAWoB,EAAMpB,UACjBU,OAAQ,SACRyD,OAAQ,CACJ5D,SAEJ6D,mBAAmB,GAIvBK,EAAYhE,MAAQgE,EAAYhE,MAAM4D,OAAOC,GAAgB,cAAXA,EAAEL,MACpDQ,EAAYhE,MAAM8D,QAAQU,EAC9B,CACJ,CAKA,oBAAA7C,CAAqBhB,EAAOY,GACxB,MAAMkD,EAAY9D,EAAM+D,YAAc/D,EAAMW,MAAMoD,YAAc/D,EAAMW,MAAMqD,YAAchE,EAAMgE,YAAchE,EAAMwD,OAAS,UACvHJ,EAAiBpD,EAAMU,YAAcV,EAAMW,MAAMD,WAGjDuD,EAAUb,GAAkB,SAASvE,KAAKoD,SAASiC,KAAKC,WAG9D,GAAKvD,EAAQ1B,OAAOD,IAAIgF,GAcjB,CAEH,MAAMG,EAAgBxD,EAAQ1B,OAAO2B,IAAIoD,GACzCG,EAAc9E,OAAS,SACvB8E,EAAcxF,UAAYoB,EAAMpB,SACpC,KAnBkC,CAC9B,MAAM4E,EAAQ,CACVxF,GAAIiG,EACJpB,KAAMiB,EACNxC,KAAM,QACNwB,KAAMrI,KAAK4J,aAAaP,GACxBlF,UAAWoB,EAAMpB,UACjBU,OAAQ,SACRD,MAAO,GACPxC,UAAWuG,EACXkB,MAAM,GAGV1D,EAAQ1B,OAAOS,IAAIsE,EAAST,EAChC,CAMJ,CAKA,mBAAAvC,CAAoBjB,EAAOY,GACvB,MAAMwC,EAAiBpD,EAAMU,YAAcV,EAAMW,MAAMD,WAGvD,GAAI0C,GAAkBxC,EAAQ1B,OAAOD,IAAImE,GAAiB,CACxCxC,EAAQ1B,OAAO2B,IAAIuC,GAC3B9D,OAAS,WACnB,CACJ,CAKA,cAAA4B,CAAelB,EAAOY,GAClB,MAAM2D,EAAWvE,EAAMwE,WAAaxE,EAAMW,MAAM6D,WAAaxE,EAAMyE,MAAQzE,EAAMW,MAAM8D,MAAQ,UACzF1B,EAAS/C,EAAM0E,iBAAmB1E,EAAMW,MAAM+D,iBAAmB1E,EAAM2E,YAAc3E,EAAMW,MAAMgE,YAAc,CAAA,EAC/GvB,EAAiBpD,EAAMU,YAAcV,EAAMW,MAAMD,WAEjD+D,EAAO,CACTzG,GAAI,QAAQa,KAAKoD,SAASiC,KAAKC,WAC/BtB,KAAM0B,EACNjD,KAAM,OACNwB,KAAMrI,KAAKmK,YAAYL,GACvB3F,UAAWoB,EAAMpB,UACjBU,OAAQ,cACRyD,SACA8B,QAAS7E,EAAMhC,IAInB,IAAIqF,EAAc,KAGlB,GAAID,GAAkBxC,EAAQ1B,OAAOD,IAAImE,GACrCC,EAAczC,EAAQ1B,OAAO2B,IAAIuC,OAC9B,CAEH,MAAME,EAAepD,MAAMC,KAAKS,EAAQ1B,OAAOqE,UAC1CN,OAAOO,GAA0B,WAAjBA,EAAMlE,QACtBmE,KAAK,CAACC,EAAGC,IAAM,IAAI9E,KAAK8E,EAAE/E,WAAa,IAAIC,KAAK6E,EAAE9E,YAEvD,KAAI0E,EAAahF,OAAS,GAKtB,YADAsC,EAAQvB,MAAMiD,KAAKmC,GAHnBpB,EAAcC,EAAa,EAMnC,CAEID,GACAA,EAAYhE,MAAMiD,KAAKmC,EAE/B,CAKA,gBAAAtD,CAAiBnB,EAAOY,EAAStB,GAE7B,MAAMwF,EAAqBtB,IACvB,GAAIA,EAAMnE,MAAO,CACb,MAAMoF,EAAOjB,EAAMnE,MAAM0F,QAAU7B,EAAE2B,UAAY7E,EAAMhC,IACvD,GAAIyG,EAEA,OADAA,EAAKnF,OAASA,GACP,CAEf,CACA,OAAO,GAIX,IAAA,IAASkE,KAAS5C,EAAQ1B,OAAOqE,SAC7B,GAAIuB,EAAkBtB,GAAQ,QAI9B5C,EAAQvB,OAASyF,EAAkBlE,EAC3C,CAKA,UAAAvE,GACI,MAAMyB,EAAgBnC,SAASC,eAAe,eAC9C,IAAKkC,EAAe,OAGpBA,EAAcD,UAAY,GAG1B,MAAMmH,EAAiB9E,MAAMC,KAAK1F,KAAKG,SAAS2I,UAC3CE,KAAK,CAACC,EAAGC,IAAM,IAAI9E,KAAK8E,EAAE/E,WAAa,IAAIC,KAAK6E,EAAE9E,YAEvD,IAAA,IAASgC,KAAWoE,EAAgB,CAChC,GAAmC,QAA/BvK,KAAKM,uBAAmCN,KAAKM,wBAA0B6F,EAAQ5C,GAC/E,SAGJ,MAAMiH,EAAiBxK,KAAKyK,qBAAqBtE,GACjD9C,EAAcI,YAAY+G,EAC9B,CAGJ,CAMA,oBAAAC,CAAqBtE,GACjB,MAAMuE,EAAa1K,KAAKU,iBAAiB8D,IAAI2B,EAAQ5C,KAAO4C,EAAQ5B,SAGpE,IAAIoG,EACJ,IACI,MAAMC,EAAczE,EAAQhC,qBAAqBC,KAAO+B,EAAQhC,UAAY,IAAIC,KAAK+B,EAAQhC,WACzF4B,MAAM6E,EAAY5E,YAClB2E,EAAc,eACd3J,QAAQ2C,KAAK,2CAA4CwC,EAAQhC,YAEjEwG,EAAcC,EAAYC,gBAElC,OAASzJ,GACLuJ,EAAc,eACd3J,QAAQI,MAAM,oDAAqDA,EAAO+E,EAAQhC,UACtF,CAEA,MAAM2G,EAAU5J,SAASoC,cAAc,OACvCwH,EAAQtH,UAAY,oBACpBsH,EAAQC,QAAQ3I,UAAY+D,EAAQ5C,GAEpC,MAAMyH,EAAaN,EAAa,IAAM,IAChCO,EAAa9E,EAAQ1B,OAAS0B,EAAQ1B,OAAOX,KAAO,EACpDoH,EAAY/E,EAAQzB,MAAQyB,EAAQzB,MAAMb,OAAS,EACnDsH,EAAmBhF,EAAQxB,iBAAmBwB,EAAQxB,iBAAiBd,OAAS,EAgBtF,OAdA7C,QAAQC,IAAI,mCAAmCkF,EAAQ5C,OAAO0H,aAAsBE,mBAAkCD,cAAsBP,KAE5IG,EAAQ1H,UAAY,oGACqE+C,EAAQ5C,0DACxDyH,oKAGPL,OAAiBM,gBAAyBE,sBAAqCD,gGAEhER,EAAa,QAAU,6BAC9D1K,KAAKoL,qBAAqBjF,mCAI7B2E,CACX,CAKA,oBAAAM,CAAqBjF,GACjB,IAAIkF,EAAO,GAGX,GAAIlF,EAAQxB,kBAAoBwB,EAAQxB,iBAAiBd,OAAS,EAC9D,IAAA,IAAS0D,KAAepB,EAAQxB,iBAAiBU,UAC7CgG,GAAQrL,KAAKsL,6BAA6B/D,EAAa,GAU/D,GALIpB,EAAQzB,OAASyB,EAAQzB,MAAMb,OAAS,IACxCwH,GAAQrL,KAAKuL,2BAA2BpF,EAAQzB,MAAO,IAIvDyB,EAAQvB,OAASuB,EAAQvB,MAAMf,OAAS,EACxC,IAAA,IAASmG,KAAQ7D,EAAQvB,MAErByG,GAAQrL,KAAKwL,kBAAkBxB,EAAM,GAK7C,MAAMvF,EAASgB,MAAMC,KAAKS,EAAQ1B,OAAOqE,UACpCE,KAAK,CAACC,EAAGC,IAAM,IAAI9E,KAAK8E,EAAE/E,WAAa,IAAIC,KAAK6E,EAAE9E,YAEvD,IAAA,IAAS4E,KAAStE,EACd4G,GAAQrL,KAAKyL,mBAAmB1C,EAAO,GAG3C,OAAOsC,CACX,CAKA,4BAAAC,CAA6B/D,EAAamE,GAItC,MAAO,wDAHY1L,KAAKc,cAA2C,gBAA3Bd,KAAKc,aAAa+F,MAA0B7G,KAAKc,aAAaoF,KAAK3C,KAAOgE,EAAYhE,GAC3F,WAAa,mBAG2BmI,mRAIsB1L,KAAK2L,WAAWpE,qCAA+CvH,KAAK4L,WAAWrE,EAAYG,wJAKhM,CAKA,0BAAA6D,CAA2B7G,EAAOgH,GAC9B,MAAMG,EAAc,aAAazH,KAAKoD,QAChCkD,GAAqD,IAAxC1K,KAAKa,cAAc2D,IAAIqH,GACpCb,EAAaN,EAAa,IAAM,IAGtC,IAAIoB,EAAiB,EACjBC,EAAkB,EAGtBrH,EAAMY,QAAQ0C,IACU,cAAhBA,EAAKnD,OAAwBiH,IACR,gBAAhB9D,EAAKnD,QAA0BkH,MAI5C,IAAIC,EAAgB,GAEhBA,EADAD,EAAkB,EACF,GAAGA,kBAAgCD,cAC5CA,IAAmBpH,EAAMb,QAAUa,EAAMb,OAAS,EACzC,OAAOa,EAAMb,mBAEb,GAAGa,EAAMb,iBAG7B,IAAIwH,EAAO,mEAC6CK,sKAE+CG,kCAA4Cb,6KAG3GgB,2HAMxC,GAAItB,EAAY,CACZW,GAAQ,8BACR,IAAA,IAASrD,KAAQtD,EAAO,CACpB,MAAMuH,EAAajM,KAAKkM,gBAAgBlE,EAAKnD,QACvCsH,EAAc,UAAUnE,EAAKnD,SAC7BuH,EAA8B,gBAAhBpE,EAAKnD,OAA2BmD,EAAKE,WAAaF,EAAKC,QAE3EoD,GAAQ,yDAC8Bc,kBAA4BT,EAAQ,yLAGpCO,kEACCjM,KAAK4L,WAAWQ,mEAChBD,MAAgBnE,EAAKnD,OAAOwH,QAAQ,IAAK,2FAIpF,CACAhB,GAAQ,QACZ,CAGA,OADAA,GAAQ,SACDA,CACX,CAKA,kBAAAI,CAAmB1C,EAAO2C,GACtB,MAAMS,EAA+B,WAAjBpD,EAAMlE,OAAsB,gBAAkB,mBAC5D6F,EAAa1K,KAAKY,eAAe4D,IAAIuE,EAAMxF,IAC3C+I,EAAWvD,EAAMnE,OAASmE,EAAMnE,MAAMf,OAAS,EAG/CmH,EAAasB,EAAY5B,EAAa,IAAM,IAAO,GAGzD,IAAIW,EAAO,6CACuBc,KANfnM,KAAKc,cAA2C,UAA3Bd,KAAKc,aAAa+F,MAAoB7G,KAAKc,aAAaoF,KAAK3C,KAAOwF,EAAMxF,GAG/E,WAAa,mBAG+BmI,6EAEjEV,EAAa,oFAAoFjC,EAAMxF,mCAAmCyH,WAAsB,yFACxIjC,EAAMV,uHACqDrI,KAAK2L,WAAW5C,wBAA4BA,EAAMX,6DAC5G+D,MAAgBpD,EAAMlE,kDAK7D,GAAIyH,GAAY5B,EAAY,CACxBW,GAAQ,8BACR,IAAA,IAASrB,KAAQjB,EAAMnE,MACnByG,GAAQrL,KAAKwL,kBAAkBxB,EAAM0B,EAAQ,GAEjDL,GAAQ,QACZ,CAGA,OADAA,GAAQ,SACDA,CACX,CAKA,iBAAAG,CAAkBxB,EAAM0B,GACpB,MAAMS,EAAc,UAAUnC,EAAKnF,SAC7ByD,EAAStI,KAAKuM,cAAcvC,GAgBlC,MAZW,4CACsBmC,KAJdnM,KAAKc,cAA2C,SAA3Bd,KAAKc,aAAa+F,MAAmB7G,KAAKc,aAAaoF,KAAK3C,KAAOyG,EAAKzG,GAC7E,WAAa,mBAG8BmI,iKAGxC1B,EAAK3B,uHACsDrI,KAAK2L,WAAW3B,uBAA0BA,EAAK5B,sFACxGE,0DACD6D,MAAgBnC,EAAKnF,qEAMhE,CAKA,aAAA0H,CAAcvC,GACV,IAAKA,EAAK1B,OAAQ,MAAO,GAEzB,GAAkB,SAAd0B,EAAK5B,MAAmB4B,EAAK1B,OAAOkE,UACpC,OAAOxC,EAAK1B,OAAOkE,UAEvB,GAAkB,SAAdxC,EAAK5B,MAAmB4B,EAAK1B,OAAOkE,UACpC,OAAOxC,EAAK1B,OAAOkE,UAEvB,GAAkB,UAAdxC,EAAK5B,MAAoB4B,EAAK1B,OAAOkE,UACrC,OAAOxC,EAAK1B,OAAOkE,UAEvB,GAAkB,SAAdxC,EAAK5B,MAAmB4B,EAAK1B,OAAOmE,QAAS,CAC7C,MAAMC,EAAM1C,EAAK1B,OAAOmE,QACxB,OAAOC,EAAI7I,OAAS,GAAK6I,EAAI/E,UAAU,EAAG,IAAM,MAAQ+E,CAC5D,CACA,MAAkB,aAAd1C,EAAK5B,MAAuB4B,EAAK1B,OAAOqE,IACjC3C,EAAK1B,OAAOqE,IAGhB,EACX,CAKA,aAAAC,CAAc/H,GAMV,MALc,CACVgI,QAAW,KACXC,YAAe,KACfC,UAAa,KAEJlI,IAAW,GAC5B,CAKA,eAAAqH,CAAgBrH,GAMZ,MALc,CACVgI,QAAW,IACXC,YAAe,KACfC,UAAa,KAEJlI,IAAW,GAC5B,CAKA,YAAA+E,CAAaP,GAST,MARc,CACV2D,SAAY,KACZC,SAAY,KACZC,GAAM,KACNC,IAAO,KACPC,GAAM,KACNC,UAAa,OAEJhE,EAAUlG,gBAAkB,IAC7C,CAKA,WAAAgH,CAAYL,GAWR,MAVc,CACVwD,KAAQ,MACRC,MAAS,KACTC,KAAQ,KACRC,KAAQ,KACRC,SAAY,KACZC,KAAQ,KACRC,KAAQ,KACRC,UAAa,MAEJ/D,EAAS3G,gBAAkB,IAC5C,CAKA,aAAA2K,CAAc1L,GACNpC,KAAKU,iBAAiB8D,IAAIpC,GAC1BpC,KAAKU,iBAAiBqN,OAAO3L,GAE7BpC,KAAKU,iBAAiBsN,IAAI5L,GAI9B,MAAM+D,EAAUnG,KAAKG,SAASiG,IAAIhE,GAC9B+D,IACAA,EAAQ5B,SAAWvE,KAAKU,iBAAiB8D,IAAIpC,IAGjDpC,KAAK4B,YACT,CAKA,iBAAAe,GACI,IAAA,IAASP,KAAapC,KAAKG,SAAS8N,OAAQ,CACxCjO,KAAKU,iBAAiBsN,IAAI5L,GAC1B,MAAM+D,EAAUnG,KAAKG,SAASiG,IAAIhE,GAC9B+D,MAAiB5B,UAAW,EACpC,CACAvE,KAAK4B,YACT,CAKA,mBAAAiB,GACI7C,KAAKU,iBAAiBqD,QACtB,IAAA,IAASoC,KAAWnG,KAAKG,SAAS2I,SAC9B3C,EAAQ5B,UAAW,EAEvBvE,KAAK4B,YACT,CAMA,WAAA+E,GACI,MAAMuH,EAAalO,KAAKmO,kBAClBC,EAAcpO,KAAKqO,mBACnBC,EAAWtO,KAAKuO,oBAEhBC,EAActN,SAASC,eAAe,cACtCsN,EAAgBvN,SAASC,eAAe,gBACxCuN,EAAUxN,SAASC,eAAe,cAEpCqN,MAAyBG,YAAcT,GACvCO,MAA6BE,YAAcP,GAC3CM,MAAiBC,YAAcL,GAEnCtN,QAAQC,IAAI,wCAAwCiN,cAAuBE,aAAuBE,IACtG,CAKA,eAAAH,GACI,IAAIS,EAAQ,EACZ,IAAA,IAASzI,KAAWnG,KAAKG,SAAS2I,SAAU,CACxC8F,GAAS,EACTA,GAASzI,EAAQ1B,OAAOX,KAGpBqC,EAAQxB,mBACRiK,GAASzI,EAAQxB,iBAAiBd,QAIlCsC,EAAQzB,QACRkK,GAASzI,EAAQzB,MAAMb,QAIvBsC,EAAQvB,QACRgK,GAASzI,EAAQvB,MAAMf,QAI3B,IAAA,IAASkF,KAAS5C,EAAQ1B,OAAOqE,SACzBC,EAAMnE,QACNgK,GAAS7F,EAAMnE,MAAMf,OAGjC,CACA,OAAO+K,CACX,CAKA,gBAAAP,GACI,IAAIO,EAAQ,EACZ,IAAA,IAASzI,KAAWnG,KAAKG,SAAS2I,SAAU,CAKxC,GAHuB,WAAnB3C,EAAQtB,QAAqB+J,IAG7BzI,EAAQzB,MACR,IAAA,IAASsD,KAAQ7B,EAAQzB,MACD,gBAAhBsD,EAAKnD,QAA0B+J,IAK3C,GAAIzI,EAAQvB,MACR,IAAA,IAASoF,KAAQ7D,EAAQvB,MACD,gBAAhBoF,EAAKnF,QAA0B+J,IAK3C,IAAA,IAAS7F,KAAS5C,EAAQ1B,OAAOqE,SAE7B,GADqB,WAAjBC,EAAMlE,QAAqB+J,IAC3B7F,EAAMnE,MACN,IAAA,IAASoF,KAAQjB,EAAMnE,MACC,gBAAhBoF,EAAKnF,QAA0B+J,GAInD,CACA,OAAOA,CACX,CAKA,iBAAAL,GACI,IAAID,EAAW,EACf,IAAA,IAASnI,KAAWnG,KAAKG,SAAS2I,SAAU,CACxC,IAAI+F,EAAe,EAGf1I,EAAQxB,kBAAoBwB,EAAQxB,iBAAiBd,OAAS,IAC9DgL,EAAepF,KAAKqF,IAAID,EAAc,IAGtC1I,EAAQzB,OAASyB,EAAQzB,MAAMb,OAAS,IACxCgL,EAAepF,KAAKqF,IAAID,EAAc,IAGtC1I,EAAQvB,OAASuB,EAAQvB,MAAMf,OAAS,IACxCgL,EAAepF,KAAKqF,IAAID,EAAc,IAI1C,IAAA,IAAS9F,KAAS5C,EAAQ1B,OAAOqE,SACzBC,EAAMnE,OAASmE,EAAMnE,MAAMf,OAAS,IACpCgL,EAAepF,KAAKqF,IAAID,EAAc,IAI9CP,EAAW7E,KAAKqF,IAAIR,EAAUO,EAClC,CACA,OAAOP,CACX,CAKA,WAAAS,CAAYvF,GACJxJ,KAAKY,eAAe4D,IAAIgF,GACxBxJ,KAAKY,eAAemN,OAAOvE,GAE3BxJ,KAAKY,eAAeoN,IAAIxE,GAE5BxJ,KAAK4B,YACT,CAKA,UAAAoN,CAAWC,GAEPjO,QAAQC,IAAI,iFAChB,CAKA,mBAAAiO,CAAoBrD,GACZ7L,KAAKa,cAAc2D,IAAIqH,GACvB7L,KAAKa,cAAckN,OAAOlC,GAE1B7L,KAAKa,cAAcmN,IAAInC,GAE3B7L,KAAK4B,YACT,CAKA,UAAAuN,CAAWC,EAAMC,EAAU9J,GAEnBA,GACAA,EAAM+J,kBAGVtP,KAAKc,aAAe,CAAEoF,KAAMkJ,EAAMvI,KAAMwI,GACxCrP,KAAKuP,gBAAgBH,EAAMC,GAC3BrP,KAAK4B,YACT,CAKA,eAAA2N,CAAgBH,EAAMC,GAClB,MAAMG,EAAgBtO,SAASC,eAAe,uBAC9C,IAAKqO,EAAe,OAEpB,IAAInE,EAAO,GACPoE,EAAQ,GAEZ,OAAQJ,GACJ,IAAK,QACDI,EAAQ,aAAaL,EAAKhH,OAC1BiD,EAAOrL,KAAK0P,gBAAgBN,GAC5B,MACJ,IAAK,OACDK,EAAQ,YAAYL,EAAKhH,OACzBiD,EAAOrL,KAAK2P,eAAeP,GAC3B,MACJ,IAAK,cACDK,EAAQ,sBACRpE,EAAOrL,KAAK4P,sBAAsBR,GAClC,MACJ,QACIK,EAAQ,kBACRpE,EAAOrL,KAAK6P,kBAAkBT,GAGtCI,EAAcpM,UAAY,8HAGRqM,mEACgC,IAAIrL,KAAKgL,EAAKjL,WAAW0G,2HAG7DQ,0DAMd,MAAMyE,EAAe5O,SAAS6O,cAAc,0BACxCD,IACAA,EAAanB,YAAcc,EAEnC,CAKA,eAAAC,CAAgB3G,GACZ,MAAO,oMAIkCA,EAAMX,sMAIAW,EAAMlE,WAAWkE,EAAMlE,sMAI7BkE,EAAM3G,WAAa,qMAInB2G,EAAMnE,MAAQmE,EAAMnE,MAAMf,OAAS,qDAElEkF,EAAMnE,OAASmE,EAAMnE,MAAMf,OAAS,EAAI,+MAI5BkF,EAAMnE,MAAMmD,IAAIiC,GAAQ,6HAEQhK,KAAKmK,YAAYH,EAAK5B,6EACtB4B,EAAK5B,oFACG4B,EAAKnF,WAAWmF,EAAKnF,uFAE5DmL,KAAK,oFAGhB,kCAGhB,CAKA,cAAAL,CAAe3F,GACX,MAAMiG,EAAYjG,EAAK1B,OAAS4H,OAAOjC,KAAKjE,EAAK1B,QAAU,GAE3D,MAAO,mMAIkC0B,EAAK3B,QAAQ2B,EAAK5B,2PAKR4B,EAAKnF,WAAWmF,EAAKnF,OAAOwH,QAAQ,IAAK,gOAKnD,IAAIjI,KAAK4F,EAAK7F,WAAW0G,oEAExDoF,EAAUpM,OAAS,EAAI,8HAEgCoM,EAAUpM,mGAErDoM,EAAUlI,IAAIoI,IACZ,MAAMjO,EAAQ8H,EAAK1B,OAAO6H,GAE1B,MAAO,kIAE0BA,8EAHZnQ,KAAKoQ,yBAAyBlO,2FAOpD8N,KAAK,oFAGhB,icAUFhG,EAAKqG,OAAS,mLAGmBrQ,KAAK4L,WAAW0E,KAAKC,UAAUvG,EAAKqG,OAAQ,KAAM,0DAEjF,kCAGhB,CAKA,gBAAAG,CAAiBtO,GACb,MAAqB,iBAAVA,GAAsBA,EAAM2B,OAAS,IACrC3B,EAAMyF,UAAU,EAAG,KAAO,MAEhB,iBAAVzF,EACAoO,KAAKC,UAAUrO,GAEnBuO,OAAOvO,EAClB,CAKA,wBAAAkO,CAAyBlO,GACrB,GAAqB,iBAAVA,EAEP,OAAIA,EAAM2B,OAAS,IACR,gCAAgC7D,KAAK4L,WAAW1J,EAAMyF,UAAU,EAAG,KAAO,+BAAiCzF,EAAM2B,OAAS,8BAC1H3B,EAAM2B,OAAS,IACf,2BAA2B7D,KAAK4L,WAAW1J,WAE3C,kCAAkClC,KAAK4L,WAAW1J,YAEjE,GAA4B,iBAAVA,EAOd,MAAO,iCAAiClC,KAAK4L,WAAW6E,OAAOvO,aAN/D,IACI,MAAO,2BAA2BlC,KAAK4L,WAAW0E,KAAKC,UAAUrO,EAAO,KAAM,WAClF,OAASF,GACL,MAAO,0DACX,CAIR,CAKA,qBAAA4N,CAAsBrI,GAClB,MAAO,0MAIkCvH,KAAK4L,WAAWrE,EAAYE,oMAI5B,IAAIrD,KAAKmD,EAAYpD,WAAW0G,4MAIhCtD,EAAYE,KAAK5D,gFAI9D,CAKA,iBAAAgM,CAAkBT,GACd,GAAoB,iBAATA,EAAmB,CAC1B,IAAI/D,EAAO,gCAGX,MAAMqF,EAAkB,CAAC,KAAM,OAAQ,OAAQ,SAAU,YAAa,OAAQ,WAE9E,IAAA,IAASC,KAAQD,EACb,QAAmB,IAAftB,EAAKuB,GAAqB,CAC1B,IAAIzO,EAAQkN,EAAKuB,GACI,iBAAVzO,GAAsBA,EAAM2B,OAAS,MAC5C3B,EAAQA,EAAMyF,UAAU,EAAG,KAAO,OAGtC0D,GAAQ,8GAE6BsF,qEACA3Q,KAAK4L,WAAW6E,OAAOvO,kEAGhE,CAIJ,OADAmJ,GAAQ,SACDA,CACX,CACI,MAAO,6BAA6BrL,KAAK4L,WAAW6E,OAAOrB,WAEnE,CAKA,UAAAxD,CAAWnE,GACP,MAAMmJ,EAAM1P,SAASoC,cAAc,OAEnC,OADAsN,EAAIjC,YAAclH,EACXmJ,EAAIxN,SACf,CAKA,SAAAH,GACQjD,KAAK6Q,KAAO7Q,KAAK8Q,MACjB9Q,KAAK6Q,IAAIE,aACJC,SAAShR,KAAKgR,UACdC,KAAKjR,KAAK8Q,KAAKI,UAAWC,GAAGC,aAE1C,CAKA,UAAAzF,CAAW0F,GACP,OAAOf,KAAKC,UAAUc,GAAKhF,QAAQ,KAAM,UAAUA,QAAQ,KAAM,SACrE,EAIJ/J,OAAOxC,aAAeA,EAGtB,MAAMwR,EAA6B,KAC/B,IAAIC,EAAe,KAEnB,MAAMC,EAAyB,KACtBD,IACDvQ,QAAQC,IAAI,0CACZsQ,EAAe,IAAIzR,EACnBwC,OAAOmP,qBAAuBF,EAC9BjP,OAAOiP,aAAe,IAAMA,GAGhClP,WAAW,KACPrB,QAAQC,IAAI,2DACZsQ,EAAaxQ,cACd,MAIPG,SAASwQ,iBAAiB,eAAepM,QAAQqM,IAC7CA,EAAO5P,iBAAiB,QAAUC,IAGd,aAFAA,EAAEC,OAAO2P,aAAa,cAGlC5Q,QAAQC,IAAI,qDACZuQ,IACID,GACAlP,WAAW,KACPkP,EAAa1P,oBACb0P,EAAa5P,aACd,UAOnBT,SAASa,iBAAiB,aAAeC,IACjCA,EAAEG,QAA8B,aAApBH,EAAEG,OAAO0P,SACrB7Q,QAAQC,IAAI,iDACZuQ,IACID,GACAlP,WAAW,KACPkP,EAAa1P,oBACb0P,EAAa5P,aACd,QAMf,MAAMmQ,EAAY5Q,SAAS6O,cAAc,sBACrC+B,GAAoD,aAAvCA,EAAUF,aAAa,cACpC5Q,QAAQC,IAAI,wDACZuQ,KAGJ,MAAMO,EAAgB7Q,SAASC,eAAe,gBAC1C4Q,GAAiBA,EAAczQ,UAAUC,SAAS,YAClDP,QAAQC,IAAI,0DACPsQ,GACDC,MAMgB,YAAxBtQ,SAAS8Q,WACT9Q,SAASa,iBAAiB,mBAAoBuP,GAE9CA"}