{"version":3,"file":"activity-tree.js","sources":["../../js/components/activity-tree.js"],"sourcesContent":["/**\n * Activity Tree Component\n * \n * D3.js-based collapsible tree visualization for showing PM activity hierarchy.\n * Displays PM actions, TodoWrite delegations, agent assignments, and tool usage.\n */\n\nclass ActivityTree {\n    constructor() {\n        this.container = null;\n        this.svg = null;\n        this.treeData = null;\n        this.root = null;\n        this.treeLayout = null;\n        this.treeGroup = null;\n        this.events = [];\n        this.todoWriteStack = [];\n        this.activeAgent = null;\n        this.activeAgentStack = [];\n        this.margin = {top: 20, right: 120, bottom: 20, left: 120};\n        this.width = 960 - this.margin.left - this.margin.right;\n        this.height = 500 - this.margin.top - this.margin.bottom;\n        this.nodeId = 0;\n        this.duration = 750;\n        this.timeRange = '30min';\n        this.searchTerm = '';\n        this.tooltip = null;\n        this.initialized = false;\n    }\n\n    /**\n     * Initialize the activity tree visualization\n     */\n    initialize() {\n        console.log('ActivityTree.initialize() called, initialized:', this.initialized);\n        \n        // Check if already initialized\n        if (this.initialized) {\n            console.log('Activity tree already initialized, skipping');\n            return;\n        }\n        \n        // First try to find the container\n        this.container = document.getElementById('activity-tree-container');\n        if (!this.container) {\n            // Fall back to the inner div if container not found\n            this.container = document.getElementById('activity-tree');\n            if (!this.container) {\n                console.error('Activity tree container not found in DOM');\n                return;\n            }\n        }\n        \n        // Clear any existing text content that might be in the container\n        if (this.container.textContent && this.container.textContent.trim()) {\n            console.log('Clearing existing text content from container:', this.container.textContent);\n            this.container.textContent = '';\n        }\n        \n        console.log('Activity tree container found:', this.container);\n        \n        // Check if the container is visible before initializing\n        const tabPanel = document.getElementById('activity-tab');\n        if (!tabPanel) {\n            console.error('Activity tab panel (#activity-tab) not found in DOM');\n            return;\n        }\n        \n        // Initialize even if tab is not active, but don't render until visible\n        if (!tabPanel.classList.contains('active')) {\n            console.log('Activity tab not active, initializing but deferring render');\n            // Clear any text content that might be showing\n            if (this.container.textContent && this.container.textContent.trim()) {\n                this.container.textContent = '';\n            }\n            // Set up basic structure but defer visualization\n            this.setupControls();\n            this.initializeTreeData();\n            this.subscribeToEvents();\n            this.initialized = true;\n            return;\n        }\n\n        // Clear container before creating visualization\n        if (this.container.textContent && this.container.textContent.trim()) {\n            console.log('Clearing container text before creating visualization');\n            this.container.textContent = '';\n        }\n        \n        this.setupControls();\n        this.createVisualization();\n        \n        if (!this.svg || !this.treeGroup) {\n            console.error('Failed to create D3 visualization elements');\n            // Show error message in container\n            if (this.container) {\n                this.container.innerHTML = '<div style=\"padding: 20px; text-align: center; color: #e53e3e;\">⚠️ Failed to create visualization. Please refresh the page.</div>';\n            }\n            return;\n        }\n        \n        this.initializeTreeData();\n        \n        // Only update if we have a valid root\n        if (this.root) {\n            this.update(this.root);\n        } else {\n            console.warn('Root not created, skipping initial update');\n        }\n        \n        this.subscribeToEvents();\n        \n        this.initialized = true;\n        console.log('Activity tree initialization complete');\n    }\n\n    /**\n     * Force show the tree visualization\n     */\n    forceShow() {\n        console.log('ActivityTree.forceShow() called');\n        \n        // Ensure container is available\n        if (!this.container) {\n            this.container = document.getElementById('activity-tree-container') || document.getElementById('activity-tree');\n            if (!this.container) {\n                console.error('Cannot find activity tree container');\n                return;\n            }\n        }\n        \n        // Clear any text content\n        if (this.container.textContent && this.container.textContent.trim()) {\n            console.log('Clearing text from container:', this.container.textContent);\n            this.container.innerHTML = '';\n        }\n        \n        // Create visualization if needed\n        if (!this.svg) {\n            this.createVisualization();\n        }\n        \n        // Initialize tree data if needed\n        if (!this.root) {\n            this.initializeTreeData();\n        }\n        \n        // Update the tree\n        if (this.root && this.svg && this.treeGroup) {\n            this.update(this.root);\n        }\n        \n        // Ensure the SVG is visible\n        if (this.svg) {\n            const svgNode = this.svg.node();\n            if (svgNode) {\n                svgNode.style.display = 'block';\n                svgNode.style.visibility = 'visible';\n            }\n        }\n    }\n    \n    /**\n     * Render the visualization when tab becomes visible (called when switching to Activity tab)\n     */\n    renderWhenVisible() {\n        console.log('ActivityTree.renderWhenVisible() called');\n        \n        // Ensure the container is clean\n        if (this.container && this.container.textContent && this.container.textContent.trim() && !this.svg) {\n            console.log('Clearing text content before rendering:', this.container.textContent);\n            this.container.textContent = '';\n        }\n        \n        if (!this.initialized) {\n            console.log('Not initialized yet, calling initialize...');\n            this.initialize();\n            return;\n        }\n        \n        // If already initialized but no visualization, create it\n        if (!this.svg) {\n            console.log('Creating deferred visualization...');\n            this.createVisualization();\n            if (this.svg && this.treeGroup && this.root) {\n                this.update(this.root);\n            } else if (!this.root) {\n                console.warn('No root node available, initializing tree data...');\n                this.initializeTreeData();\n                if (this.root && this.svg && this.treeGroup) {\n                    this.update(this.root);\n                }\n            }\n        }\n        \n        // Force update to ensure tree is rendered with current data\n        if (this.root && this.svg) {\n            console.log('Updating tree with current data...');\n            this.update(this.root);\n        } else {\n            console.warn('Cannot update tree - missing components:', {\n                hasRoot: !!this.root,\n                hasSvg: !!this.svg,\n                hasTreeGroup: !!this.treeGroup\n            });\n        }\n    }\n\n    /**\n     * Setup control handlers\n     */\n    setupControls() {\n        // Expand all button\n        const expandAllBtn = document.getElementById('expand-all');\n        if (expandAllBtn) {\n            expandAllBtn.addEventListener('click', () => this.expandAll());\n        }\n\n        // Collapse all button\n        const collapseAllBtn = document.getElementById('collapse-all');\n        if (collapseAllBtn) {\n            collapseAllBtn.addEventListener('click', () => this.collapseAll());\n        }\n\n        // Reset zoom button\n        const resetZoomBtn = document.getElementById('reset-zoom');\n        if (resetZoomBtn) {\n            resetZoomBtn.addEventListener('click', () => this.resetZoom());\n        }\n\n        // Time range selector\n        const timeRangeSelect = document.getElementById('time-range');\n        if (timeRangeSelect) {\n            timeRangeSelect.addEventListener('change', (e) => {\n                this.timeRange = e.target.value;\n                this.filterEventsByTime();\n            });\n        }\n\n        // Search input\n        const searchInput = document.getElementById('activity-search');\n        if (searchInput) {\n            searchInput.addEventListener('input', (e) => {\n                this.searchTerm = e.target.value.toLowerCase();\n                this.highlightSearchResults();\n            });\n        }\n    }\n\n    /**\n     * Create the D3 visualization\n     */\n    createVisualization() {\n        // Check if D3 is available\n        if (typeof d3 === 'undefined') {\n            console.error('D3.js is not loaded! Cannot create activity tree visualization.');\n            // Try to display an error message in the container\n            if (this.container) {\n                this.container.innerHTML = '<div style=\"padding: 20px; text-align: center; color: #e53e3e;\">⚠️ D3.js is not loaded. Cannot create visualization.</div>';\n            }\n            return;\n        }\n\n        // Calculate dimensions based on container\n        const containerRect = this.container.getBoundingClientRect();\n        this.width = containerRect.width - this.margin.left - this.margin.right;\n        this.height = Math.max(500, containerRect.height - this.margin.top - this.margin.bottom);\n\n        console.log('Creating D3 visualization with dimensions:', { width: this.width, height: this.height });\n\n        // Clear any existing content (including text)\n        d3.select(this.container).selectAll('*').remove();\n\n        // Create SVG\n        this.svg = d3.select(this.container)\n            .append('svg')\n            .attr('width', '100%')\n            .attr('height', '100%')\n            .attr('viewBox', `0 0 ${this.width + this.margin.left + this.margin.right} ${this.height + this.margin.top + this.margin.bottom}`);\n\n        // Create main group for tree positioning\n        this.treeGroup = this.svg.append('g')\n            .attr('class', 'tree-group')\n            .attr('transform', `translate(${this.margin.left},${this.margin.top})`);\n\n        // Add zoom behavior\n        const zoom = d3.zoom()\n            .scaleExtent([0.1, 3])\n            .on('zoom', (event) => {\n                this.treeGroup.attr('transform', \n                    `translate(${this.margin.left + event.transform.x},${this.margin.top + event.transform.y}) scale(${event.transform.k})`\n                );\n            });\n\n        this.svg.call(zoom);\n\n        // Create tree layout\n        this.treeLayout = d3.tree()\n            .size([this.height, this.width]);\n        \n        console.log('ActivityTree: Tree layout created:', this.treeLayout);\n\n        // Create tooltip\n        this.tooltip = d3.select('body').append('div')\n            .attr('class', 'activity-tooltip')\n            .style('opacity', 0);\n        \n        console.log('ActivityTree: Visualization complete, svg:', this.svg, 'treeGroup:', this.treeGroup);\n    }\n\n    /**\n     * Initialize tree data structure\n     */\n    initializeTreeData() {\n        console.log('ActivityTree: Initializing tree data');\n        \n        this.treeData = {\n            name: 'PM',\n            type: 'pm',\n            icon: '🎯',\n            children: [],\n            _children: null\n        };\n\n        // Check if D3 is available\n        if (typeof d3 === 'undefined') {\n            console.error('ActivityTree: D3 is not available - cannot create hierarchy!');\n            // Try to display an error message\n            if (this.container) {\n                this.container.innerHTML = '<div style=\"padding: 20px; text-align: center; color: #e53e3e;\">⚠️ Waiting for D3.js to load...</div>';\n            }\n            return;\n        }\n\n        this.root = d3.hierarchy(this.treeData);\n        this.root.x0 = this.height / 2;\n        this.root.y0 = 0;\n        \n        console.log('ActivityTree: Root node created:', this.root);\n        \n        // Update stats immediately after creating root\n        this.updateStats();\n    }\n\n    /**\n     * Subscribe to socket events\n     */\n    subscribeToEvents() {\n        if (!window.socketClient) {\n            console.warn('Socket client not available for activity tree');\n            setTimeout(() => this.subscribeToEvents(), 1000);\n            return;\n        }\n\n        console.log('ActivityTree: Setting up event subscription');\n\n        // Subscribe to event updates from the socket client\n        // Process ALL events and determine their type internally\n        window.socketClient.onEventUpdate((events) => {\n            console.log(`ActivityTree: onEventUpdate called with ${events.length} total events`);\n            \n            // Process only the new events since last update\n            const newEventCount = events.length - this.events.length;\n            if (newEventCount > 0) {\n                // Process only the new events\n                const newEvents = events.slice(this.events.length);\n                \n                console.log(`ActivityTree: Processing ${newEventCount} new events`, newEvents);\n                \n                // Process all events, regardless of format\n                newEvents.forEach(event => {\n                    this.processEvent(event);\n                });\n                \n                // Update our event count\n                this.events = [...events];\n            }\n        });\n\n        // Load existing events if available\n        const existingEvents = window.socketClient?.events || window.eventViewer?.events || [];\n        \n        if (existingEvents.length > 0) {\n            console.log(`ActivityTree: Processing ${existingEvents.length} existing events`, existingEvents);\n            existingEvents.forEach(event => {\n                this.processEvent(event);\n            });\n            this.events = [...existingEvents];\n        } else {\n            console.log('ActivityTree: No existing events found');\n            this.events = [];\n        }\n    }\n\n    /**\n     * Process an event and update the tree\n     */\n    processEvent(event) {\n        if (!event) {\n            console.log('ActivityTree: Ignoring null event');\n            return;\n        }\n        \n        // Handle events with the actual format from the server\n        let eventType = null;\n        \n        // First check if hook_event_name exists (from transformation)\n        if (event.hook_event_name) {\n            eventType = event.hook_event_name;\n        }\n        // Map from type/subtype for hook events\n        else if (event.type === 'hook' && event.subtype) {\n            const mapping = {\n                'pre_tool': 'PreToolUse',\n                'post_tool': 'PostToolUse',\n                'subagent_start': 'SubagentStart',\n                'subagent_stop': 'SubagentStop',\n                'todo_write': 'TodoWrite'\n            };\n            eventType = mapping[event.subtype];\n        }\n        // Handle todo events\n        else if (event.type === 'todo' && event.subtype === 'updated') {\n            eventType = 'TodoWrite';\n        }\n        // Handle subagent events\n        else if (event.type === 'subagent') {\n            if (event.subtype === 'started') {\n                eventType = 'SubagentStart';\n            } else if (event.subtype === 'stopped') {\n                eventType = 'SubagentStop';\n            }\n        }\n        // Handle start event\n        else if (event.type === 'start') {\n            eventType = 'Start';\n        }\n        \n        if (!eventType) {\n            // Only log if it's a potentially relevant event\n            if (event.type === 'hook' || event.type === 'todo' || event.type === 'subagent') {\n                console.log('ActivityTree: Cannot determine event type for:', event);\n            }\n            return;\n        }\n        \n        console.log(`ActivityTree: Processing event: ${eventType}`, event);\n        \n        const timestamp = new Date(event.timestamp);\n        if (!this.isEventInTimeRange(timestamp)) {\n            return;\n        }\n        \n        switch (eventType) {\n            case 'TodoWrite':\n                this.processTodoWrite(event);\n                break;\n            case 'SubagentStart':\n                this.processSubagentStart(event);\n                break;\n            case 'SubagentStop':\n                this.processSubagentStop(event);\n                break;\n            case 'PreToolUse':\n                this.processToolUse(event);\n                break;\n            case 'PostToolUse':\n                this.updateToolStatus(event, 'completed');\n                break;\n            case 'Start':\n                this.initializeTreeData();\n                this.update(this.root);\n                break;\n        }\n        \n        this.updateStats();\n    }\n\n    /**\n     * Process TodoWrite event\n     */\n    processTodoWrite(event) {\n        console.log('ActivityTree: Processing TodoWrite event:', event);\n        \n        // Look for todos in multiple places for compatibility\n        let todos = event.todos || \n                    event.data?.todos || \n                    event.data ||  // Sometimes todos are directly in data\n                    [];\n        \n        // Handle case where todos might be an object with todos property\n        if (todos && typeof todos === 'object' && todos.todos) {\n            todos = todos.todos;\n        }\n        \n        // Ensure todos is an array\n        if (!Array.isArray(todos)) {\n            console.log('ActivityTree: Invalid todos format in event:', event);\n            return;\n        }\n        \n        if (todos.length === 0) {\n            console.log('ActivityTree: No todos in event');\n            return;\n        }\n\n        // Find in-progress todo\n        const activeTodo = todos.find(t => t.status === 'in_progress');\n        if (!activeTodo) {\n            console.log('ActivityTree: No in-progress todo found');\n            return;\n        }\n\n        console.log('ActivityTree: Found active todo:', activeTodo);\n\n        // Create TodoWrite node\n        const todoNode = {\n            name: activeTodo.activeForm || activeTodo.content,\n            type: 'todowrite',\n            icon: '📝',\n            content: activeTodo.content,\n            status: activeTodo.status,\n            timestamp: event.timestamp,\n            children: [],\n            _children: null,\n            eventId: event.id\n        };\n\n        // Add to PM root\n        if (!this.root) {\n            console.error('ActivityTree: No root node!');\n            return;\n        }\n        \n        if (!this.root.data) {\n            console.error('ActivityTree: Root has no data!');\n            return;\n        }\n        \n        if (!this.root.data.children) {\n            this.root.data.children = [];\n        }\n        \n        console.log('ActivityTree: Adding TodoWrite node to root');\n        this.root.data.children.push(todoNode);\n\n        // Track this TodoWrite\n        this.todoWriteStack.push({\n            node: todoNode,\n            content: activeTodo.content\n        });\n\n        console.log('ActivityTree: Calling update with root:', this.root);\n        this.update(this.root);\n        console.log('ActivityTree: Update complete');\n    }\n\n    /**\n     * Process SubagentStart event\n     */\n    processSubagentStart(event) {\n        // Look for agent_name in multiple places for compatibility\n        const agentName = event.agent_name || \n                         event.data?.agent_name || \n                         event.data?.agent_type || \n                         event.agent_type ||  // Check direct agent_type field\n                         event.agent ||        // Check agent field\n                         'unknown';\n        const agentIcon = this.getAgentIcon(agentName);\n\n        // Create agent node\n        const agentNode = {\n            name: agentName,\n            type: 'agent',\n            icon: agentIcon,\n            timestamp: event.timestamp,\n            children: [],\n            _children: null,\n            eventId: event.id,\n            sessionId: event.session_id || event.data?.session_id\n        };\n\n        // Find parent - either last TodoWrite or PM root\n        let parent = null;\n        if (this.todoWriteStack.length > 0) {\n            // Check if TodoWrite mentions this agent\n            const todoWrite = this.todoWriteStack[this.todoWriteStack.length - 1];\n            if (todoWrite.content && todoWrite.content.toLowerCase().includes(agentName.toLowerCase())) {\n                parent = todoWrite.node;\n            }\n        }\n\n        if (!parent) {\n            parent = this.root.data;\n        }\n\n        if (!parent.children) {\n            parent.children = [];\n        }\n        parent.children.push(agentNode);\n\n        // Track active agent\n        this.activeAgent = agentNode;\n        this.activeAgentStack.push(agentNode);\n\n        this.update(this.root);\n    }\n\n    /**\n     * Process SubagentStop event\n     */\n    processSubagentStop(event) {\n        // Mark agent as completed (look for session_id in multiple places)\n        const sessionId = event.session_id || event.data?.session_id;\n        if (this.activeAgent && this.activeAgent.sessionId === sessionId) {\n            this.activeAgent.status = 'completed';\n            this.activeAgentStack.pop();\n            this.activeAgent = this.activeAgentStack.length > 0 ? \n                this.activeAgentStack[this.activeAgentStack.length - 1] : null;\n        }\n\n        this.update(this.root);\n    }\n\n    /**\n     * Process tool use event\n     */\n    processToolUse(event) {\n        // Get tool name from various possible locations\n        const toolName = event.tool_name || \n                        event.data?.tool_name || \n                        event.tool ||           // Check event.tool field\n                        event.data?.tool ||\n                        'unknown';\n        \n        const toolIcon = this.getToolIcon(toolName);\n        \n        // Get parameters from various possible locations\n        const params = event.tool_parameters || \n                      event.data?.tool_parameters || \n                      event.parameters ||          // Check event.parameters field\n                      event.data?.parameters ||\n                      {};\n\n        // Create tool node\n        const toolNode = {\n            name: toolName,\n            type: 'tool',\n            icon: toolIcon,\n            timestamp: event.timestamp,\n            status: 'in_progress',\n            children: [],\n            _children: null,\n            eventId: event.id\n        };\n\n        // Add file/command as child if applicable\n        if (toolName === 'Read' && params.file_path) {\n            toolNode.children.push({\n                name: params.file_path,\n                type: 'file',\n                icon: '📄',\n                timestamp: event.timestamp\n            });\n        } else if (toolName === 'Edit' && params.file_path) {\n            toolNode.children.push({\n                name: params.file_path,\n                type: 'file',\n                icon: '✏️',\n                timestamp: event.timestamp\n            });\n        } else if (toolName === 'Write' && params.file_path) {\n            toolNode.children.push({\n                name: params.file_path,\n                type: 'file',\n                icon: '💾',\n                timestamp: event.timestamp\n            });\n        } else if (toolName === 'Bash' && params.command) {\n            toolNode.children.push({\n                name: params.command.substring(0, 50) + (params.command.length > 50 ? '...' : ''),\n                type: 'command',\n                icon: '⚡',\n                timestamp: event.timestamp\n            });\n        } else if (toolName === 'WebFetch' && params.url) {\n            toolNode.children.push({\n                name: params.url,\n                type: 'url',\n                icon: '🌐',\n                timestamp: event.timestamp\n            });\n        }\n\n        // Find parent - active agent or PM root\n        let parent = this.activeAgent || this.root.data;\n        if (!parent.children) {\n            parent.children = [];\n        }\n        parent.children.push(toolNode);\n\n        this.update(this.root);\n    }\n\n    /**\n     * Update tool status after completion\n     */\n    updateToolStatus(event, status) {\n        // Find tool node by event ID and update status\n        const findAndUpdate = (node) => {\n            if (node.eventId === event.id) {\n                node.status = status;\n                return true;\n            }\n            if (node.children) {\n                for (let child of node.children) {\n                    if (findAndUpdate(child)) return true;\n                }\n            }\n            if (node._children) {\n                for (let child of node._children) {\n                    if (findAndUpdate(child)) return true;\n                }\n            }\n            return false;\n        };\n\n        findAndUpdate(this.root.data);\n        this.update(this.root);\n    }\n\n    /**\n     * Get agent icon based on name\n     */\n    getAgentIcon(agentName) {\n        const icons = {\n            'engineer': '👷',\n            'research': '🔬',\n            'qa': '🧪',\n            'ops': '⚙️',\n            'pm': '📊',\n            'architect': '🏗️'\n        };\n        return icons[agentName.toLowerCase()] || '🤖';\n    }\n\n    /**\n     * Get tool icon based on name\n     */\n    getToolIcon(toolName) {\n        const icons = {\n            'read': '👁️',\n            'write': '✍️',\n            'edit': '✏️',\n            'bash': '💻',\n            'webfetch': '🌐',\n            'grep': '🔍',\n            'glob': '📂',\n            'todowrite': '📝'\n        };\n        return icons[toolName.toLowerCase()] || '🔧';\n    }\n\n    /**\n     * Update the tree visualization\n     */\n    update(source) {\n        console.log('ActivityTree: update() called with source:', source);\n        \n        // Check if D3 is available\n        if (typeof d3 === 'undefined') {\n            console.error('ActivityTree: Cannot update - D3.js not loaded');\n            return;\n        }\n        \n        // Check if visualization is ready\n        if (!this.svg || !this.treeGroup) {\n            console.warn('ActivityTree: Cannot update - SVG not initialized');\n            // Try to create visualization if container exists\n            if (this.container) {\n                console.log('Attempting to create visualization from update()');\n                this.createVisualization();\n                // Check again after creation attempt\n                if (!this.svg || !this.treeGroup) {\n                    console.error('Failed to create visualization in update()');\n                    return;\n                }\n            } else {\n                return;\n            }\n        }\n        \n        if (!this.treeLayout) {\n            console.warn('ActivityTree: Cannot update - tree layout not initialized');\n            // Try to create tree layout\n            if (typeof d3 !== 'undefined') {\n                this.treeLayout = d3.tree().size([this.height, this.width]);\n                console.log('Created tree layout in update()');\n            } else {\n                return;\n            }\n        }\n        \n        // Ensure source has valid data\n        if (!source || !source.data) {\n            console.error('ActivityTree: Invalid source in update()', source);\n            return;\n        }\n        \n        // Ensure we have a valid root\n        if (!this.root) {\n            console.error('ActivityTree: No root node available for update');\n            return;\n        }\n        \n        // Compute the new tree layout\n        let treeData;\n        try {\n            treeData = this.treeLayout(this.root);\n        } catch (error) {\n            console.error('ActivityTree: Error computing tree layout:', error);\n            return;\n        }\n        \n        const nodes = treeData.descendants();\n        const links = treeData.links();\n        \n        console.log(`ActivityTree: Updating tree with ${nodes.length} nodes`);\n        \n        // Check if we actually have the tree container\n        if (nodes.length === 1 && this.container) {\n            // Only root node exists, ensure container shows the tree\n            const svgElement = this.container.querySelector('svg');\n            if (!svgElement) {\n                console.warn('SVG element not found in container after update');\n            }\n        }\n\n        // Normalize for fixed-depth\n        nodes.forEach((d) => {\n            d.y = d.depth * 180;\n        });\n\n        // Update nodes\n        const node = this.treeGroup.selectAll('g.node')\n            .data(nodes, (d) => d.id || (d.id = ++this.nodeId));\n\n        // Enter new nodes\n        const nodeEnter = node.enter().append('g')\n            .attr('class', 'node')\n            .attr('transform', (d) => `translate(${source.y0},${source.x0})`)\n            .on('click', (event, d) => this.click(d));\n\n        // Add circles for nodes\n        nodeEnter.append('circle')\n            .attr('class', (d) => `node-circle ${d.data.type}`)\n            .attr('r', 1e-6)\n            .style('fill', (d) => d._children ? this.getNodeColor(d.data.type) : '#fff')\n            .style('stroke', (d) => this.getNodeColor(d.data.type));\n\n        // Add icons\n        nodeEnter.append('text')\n            .attr('class', 'node-icon')\n            .attr('dy', '.35em')\n            .attr('text-anchor', 'middle')\n            .style('font-size', '14px')\n            .text((d) => d.data.icon || '');\n\n        // Add labels\n        nodeEnter.append('text')\n            .attr('class', 'node-label')\n            .attr('dy', '.35em')\n            .attr('x', (d) => d.children || d._children ? -25 : 25)\n            .attr('text-anchor', (d) => d.children || d._children ? 'end' : 'start')\n            .text((d) => d.data.name)\n            .style('fill-opacity', 1e-6);\n\n        // Add tooltips\n        nodeEnter.on('mouseover', (event, d) => this.showTooltip(event, d))\n            .on('mouseout', () => this.hideTooltip());\n\n        // Update existing nodes\n        const nodeUpdate = nodeEnter.merge(node);\n\n        // Transition nodes to new position\n        nodeUpdate.transition()\n            .duration(this.duration)\n            .attr('transform', (d) => `translate(${d.y},${d.x})`);\n\n        nodeUpdate.select('circle.node-circle')\n            .attr('r', 10)\n            .style('fill', (d) => {\n                if (d.data.status === 'in_progress') {\n                    return this.getNodeColor(d.data.type);\n                }\n                return d._children ? this.getNodeColor(d.data.type) : '#fff';\n            })\n            .attr('class', (d) => {\n                let classes = `node-circle ${d.data.type}`;\n                if (d.data.status === 'in_progress') classes += ' pulsing';\n                if (d.data.status === 'failed') classes += ' failed';\n                return classes;\n            });\n\n        nodeUpdate.select('text.node-label')\n            .style('fill-opacity', 1);\n\n        // Remove exiting nodes\n        const nodeExit = node.exit().transition()\n            .duration(this.duration)\n            .attr('transform', (d) => `translate(${source.y},${source.x})`)\n            .remove();\n\n        nodeExit.select('circle')\n            .attr('r', 1e-6);\n\n        nodeExit.select('text')\n            .style('fill-opacity', 1e-6);\n\n        // Update links\n        const link = this.treeGroup.selectAll('path.link')\n            .data(links, (d) => d.target.id);\n\n        // Enter new links\n        const linkEnter = link.enter().insert('path', 'g')\n            .attr('class', 'link')\n            .attr('d', (d) => {\n                const o = {x: source.x0, y: source.y0};\n                return this.diagonal({source: o, target: o});\n            });\n\n        // Update existing links\n        const linkUpdate = linkEnter.merge(link);\n\n        linkUpdate.transition()\n            .duration(this.duration)\n            .attr('d', this.diagonal);\n\n        // Remove exiting links\n        link.exit().transition()\n            .duration(this.duration)\n            .attr('d', (d) => {\n                const o = {x: source.x, y: source.y};\n                return this.diagonal({source: o, target: o});\n            })\n            .remove();\n\n        // Store old positions for transition\n        nodes.forEach((d) => {\n            d.x0 = d.x;\n            d.y0 = d.y;\n        });\n\n        // Update breadcrumb on node click\n        this.updateBreadcrumb(source);\n    }\n\n    /**\n     * Create diagonal path for links\n     */\n    diagonal(d) {\n        return `M ${d.source.y} ${d.source.x}\n                C ${(d.source.y + d.target.y) / 2} ${d.source.x},\n                  ${(d.source.y + d.target.y) / 2} ${d.target.x},\n                  ${d.target.y} ${d.target.x}`;\n    }\n\n    /**\n     * Handle node click for expand/collapse\n     */\n    click(d) {\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n        this.update(d);\n        this.updateBreadcrumb(d);\n    }\n\n    /**\n     * Get node color based on type\n     */\n    getNodeColor(type) {\n        const colors = {\n            'pm': '#4299e1',\n            'todowrite': '#48bb78',\n            'agent': '#ed8936',\n            'tool': '#9f7aea',\n            'file': '#38b2ac',\n            'command': '#f56565',\n            'url': '#4299e1'\n        };\n        return colors[type] || '#718096';\n    }\n\n    /**\n     * Show tooltip\n     */\n    showTooltip(event, d) {\n        const content = `\n            <strong>${d.data.name}</strong><br>\n            Type: ${d.data.type}<br>\n            ${d.data.timestamp ? `Time: ${new Date(d.data.timestamp).toLocaleTimeString()}` : ''}\n            ${d.data.status ? `<br>Status: ${d.data.status}` : ''}\n        `;\n\n        this.tooltip.transition()\n            .duration(200)\n            .style('opacity', .9);\n        \n        this.tooltip.html(content)\n            .style('left', (event.pageX + 10) + 'px')\n            .style('top', (event.pageY - 28) + 'px');\n    }\n\n    /**\n     * Hide tooltip\n     */\n    hideTooltip() {\n        this.tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n    }\n\n    /**\n     * Expand all nodes\n     */\n    expandAll() {\n        const expand = (d) => {\n            if (d._children) {\n                d.children = d._children;\n                d._children = null;\n            }\n            if (d.children) {\n                d.children.forEach(expand);\n            }\n        };\n        \n        expand(this.root);\n        this.update(this.root);\n    }\n\n    /**\n     * Collapse all nodes\n     */\n    collapseAll() {\n        const collapse = (d) => {\n            if (d.children) {\n                d._children = d.children;\n                d._children.forEach(collapse);\n                d.children = null;\n            }\n        };\n        \n        this.root.children?.forEach(collapse);\n        this.update(this.root);\n    }\n\n    /**\n     * Reset zoom\n     */\n    resetZoom() {\n        if (!this.svg) {\n            console.warn('Cannot reset zoom: SVG not initialized');\n            return;\n        }\n        \n        const zoom = d3.zoom()\n            .scaleExtent([0.1, 3])\n            .on('zoom', (event) => {\n                this.treeGroup.attr('transform', \n                    `translate(${this.margin.left + event.transform.x},${this.margin.top + event.transform.y}) scale(${event.transform.k})`\n                );\n            });\n        \n        this.svg.transition()\n            .duration(750)\n            .call(zoom.transform, d3.zoomIdentity);\n        \n        // Reset the tree group transform\n        this.treeGroup.transition()\n            .duration(750)\n            .attr('transform', `translate(${this.margin.left},${this.margin.top})`);\n    }\n\n    /**\n     * Check if event is in time range\n     */\n    isEventInTimeRange(timestamp) {\n        if (this.timeRange === 'all') return true;\n\n        const now = new Date();\n        const diff = now - timestamp;\n        const minutes = diff / (1000 * 60);\n\n        switch (this.timeRange) {\n            case '10min': return minutes <= 10;\n            case '30min': return minutes <= 30;\n            case 'hour': return minutes <= 60;\n            default: return true;\n        }\n    }\n\n    /**\n     * Filter events by time\n     */\n    filterEventsByTime() {\n        this.initializeTreeData();\n        \n        // Reprocess all events with new time filter\n        if (window.eventViewer && window.eventViewer.events) {\n            window.eventViewer.events.forEach(event => {\n                this.processEvent(event);\n            });\n        }\n    }\n\n    /**\n     * Update statistics\n     */\n    updateStats() {\n        // Check if we have a valid root node\n        if (!this.root || !this.root.data) {\n            console.warn('ActivityTree: Cannot update stats - root not initialized');\n            // Set default values\n            const nodeCountEl = document.getElementById('node-count');\n            const activeCountEl = document.getElementById('active-count');\n            const depthEl = document.getElementById('tree-depth');\n            \n            if (nodeCountEl) nodeCountEl.textContent = '1';\n            if (activeCountEl) activeCountEl.textContent = '0';\n            if (depthEl) depthEl.textContent = '0';\n            return;\n        }\n        \n        const nodeCount = this.countNodes(this.root);\n        const activeCount = this.countActiveNodes(this.root.data);\n        const depth = this.getTreeDepth(this.root);\n\n        const nodeCountEl = document.getElementById('node-count');\n        const activeCountEl = document.getElementById('active-count');\n        const depthEl = document.getElementById('tree-depth');\n        \n        if (nodeCountEl) nodeCountEl.textContent = nodeCount;\n        if (activeCountEl) activeCountEl.textContent = activeCount;\n        if (depthEl) depthEl.textContent = depth;\n        \n        console.log(`ActivityTree: Stats updated - Nodes: ${nodeCount}, Active: ${activeCount}, Depth: ${depth}`);\n    }\n\n    /**\n     * Count total nodes\n     */\n    countNodes(node) {\n        let count = 1;\n        if (node.children) {\n            node.children.forEach(child => {\n                count += this.countNodes(child);\n            });\n        }\n        if (node._children) {\n            node._children.forEach(child => {\n                count += this.countNodes(child);\n            });\n        }\n        return count;\n    }\n\n    /**\n     * Count active nodes\n     */\n    countActiveNodes(node) {\n        let count = node.status === 'in_progress' ? 1 : 0;\n        if (node.children) {\n            node.children.forEach(child => {\n                count += this.countActiveNodes(child);\n            });\n        }\n        if (node._children) {\n            node._children.forEach(child => {\n                count += this.countActiveNodes(child);\n            });\n        }\n        return count;\n    }\n\n    /**\n     * Get tree depth\n     */\n    getTreeDepth(node) {\n        if (!node.children && !node._children) return 0;\n        \n        const children = node.children || node._children;\n        const depths = children.map(child => this.getTreeDepth(child));\n        return Math.max(...depths) + 1;\n    }\n\n    /**\n     * Update breadcrumb\n     */\n    updateBreadcrumb(node) {\n        const path = [];\n        let current = node;\n        \n        while (current) {\n            path.unshift(current.data.name);\n            current = current.parent;\n        }\n        \n        const breadcrumb = document.getElementById('activity-breadcrumb');\n        if (breadcrumb) {\n            breadcrumb.textContent = path.join(' > ');\n        }\n    }\n\n    /**\n     * Highlight search results\n     */\n    highlightSearchResults() {\n        // Clear previous highlights\n        this.treeGroup.selectAll('.node-label')\n            .style('font-weight', 'normal')\n            .style('fill', '#2d3748');\n\n        if (!this.searchTerm) return;\n\n        // Highlight matching nodes\n        this.treeGroup.selectAll('.node-label')\n            .style('font-weight', d => {\n                return d.data.name.toLowerCase().includes(this.searchTerm) ? 'bold' : 'normal';\n            })\n            .style('fill', d => {\n                return d.data.name.toLowerCase().includes(this.searchTerm) ? '#e53e3e' : '#2d3748';\n            });\n    }\n}\n\n// Make ActivityTree globally available immediately when module loads\nwindow.ActivityTree = ActivityTree;\n\n// Initialize when the Activity tab is selected\n// Only set up event listeners when DOM is ready, but expose class immediately\nconst setupActivityTreeListeners = () => {\n    let activityTree = null;\n\n    // Function to initialize the tree\n    const initializeActivityTree = () => {\n        if (!activityTree) {\n            console.log('Creating new Activity Tree instance...');\n            activityTree = new ActivityTree();\n            // Store instance globally for dashboard access\n            window.activityTreeInstance = activityTree;\n        }\n        \n        // Ensure the container is ready and clear any text\n        const container = document.getElementById('activity-tree-container') || document.getElementById('activity-tree');\n        if (container && container.textContent && container.textContent.trim()) {\n            console.log('Clearing text from activity tree container before init:', container.textContent);\n            container.textContent = '';\n        }\n        \n        // Always try to initialize when tab becomes active, even if instance exists\n        // Small delay to ensure DOM is ready and tab is visible\n        setTimeout(() => {\n            console.log('Attempting to initialize Activity Tree visualization...');\n            activityTree.initialize();\n        }, 100);\n    };\n\n    // Tab switching logic\n    document.querySelectorAll('.tab-button').forEach(button => {\n        button.addEventListener('click', (e) => {\n            const tabName = e.target.getAttribute('data-tab');\n            \n            if (tabName === 'activity') {\n                console.log('Activity tab button clicked, initializing tree...');\n                initializeActivityTree();\n                // Also call renderWhenVisible and forceShow to ensure proper rendering\n                if (activityTree) {\n                    setTimeout(() => {\n                        activityTree.renderWhenVisible();\n                        // Force show to ensure SVG is visible\n                        activityTree.forceShow();\n                    }, 150);\n                }\n            }\n        });\n    });\n\n    // Also listen for custom tab change events\n    document.addEventListener('tabChanged', (e) => {\n        if (e.detail && e.detail.newTab === 'activity') {\n            console.log('Tab changed to activity, initializing tree...');\n            initializeActivityTree();\n            // Also call renderWhenVisible and forceShow to ensure proper rendering\n            if (activityTree) {\n                setTimeout(() => {\n                    activityTree.renderWhenVisible();\n                    // Force show to ensure SVG is visible\n                    activityTree.forceShow();\n                }, 150);\n            }\n        }\n    });\n\n    // Check if activity tab is already active on load\n    const activeTab = document.querySelector('.tab-button.active');\n    if (activeTab && activeTab.getAttribute('data-tab') === 'activity') {\n        console.log('Activity tab is active on load, initializing tree...');\n        initializeActivityTree();\n    }\n    \n    // Also check the tab panel directly\n    const activityPanel = document.getElementById('activity-tab');\n    if (activityPanel && activityPanel.classList.contains('active')) {\n        console.log('Activity panel is active on load, initializing tree...');\n        if (!activityTree) {\n            initializeActivityTree();\n        }\n    }\n\n    // Export for debugging\n    window.activityTree = () => activityTree;  // Expose instance getter for debugging\n};\n\n// Set up listeners when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', setupActivityTreeListeners);\n} else {\n    // DOM already loaded\n    setupActivityTreeListeners();\n}\n\nexport { ActivityTree };\nexport default ActivityTree;"],"names":["ActivityTree","constructor","this","container","svg","treeData","root","treeLayout","treeGroup","events","todoWriteStack","activeAgent","activeAgentStack","margin","top","right","bottom","left","width","height","nodeId","duration","timeRange","searchTerm","tooltip","initialized","initialize","console","log","document","getElementById","error","textContent","trim","tabPanel","classList","contains","setupControls","initializeTreeData","subscribeToEvents","createVisualization","innerHTML","update","warn","forceShow","svgNode","node","style","display","visibility","renderWhenVisible","hasRoot","hasSvg","hasTreeGroup","expandAllBtn","addEventListener","expandAll","collapseAllBtn","collapseAll","resetZoomBtn","resetZoom","timeRangeSelect","e","target","value","filterEventsByTime","searchInput","toLowerCase","highlightSearchResults","d3","containerRect","getBoundingClientRect","Math","max","select","selectAll","remove","append","attr","zoom","scaleExtent","on","event","transform","x","y","k","call","tree","size","name","type","icon","children","_children","hierarchy","x0","y0","updateStats","window","socketClient","setTimeout","onEventUpdate","length","newEventCount","newEvents","slice","forEach","processEvent","existingEvents","eventViewer","eventType","hook_event_name","subtype","pre_tool","post_tool","subagent_start","subagent_stop","todo_write","timestamp","Date","isEventInTimeRange","processTodoWrite","processSubagentStart","processSubagentStop","processToolUse","updateToolStatus","todos","data","Array","isArray","activeTodo","find","t","status","todoNode","activeForm","content","eventId","id","push","agentName","agent_name","agent_type","agent","agentNode","getAgentIcon","sessionId","session_id","parent","todoWrite","includes","pop","toolName","tool_name","tool","toolIcon","getToolIcon","params","tool_parameters","parameters","toolNode","file_path","command","substring","url","findAndUpdate","child","engineer","research","qa","ops","pm","architect","read","write","edit","bash","webfetch","grep","glob","todowrite","source","nodes","descendants","links","querySelector","d","depth","nodeEnter","enter","click","getNodeColor","text","showTooltip","hideTooltip","nodeUpdate","merge","transition","classes","nodeExit","exit","link","insert","o","diagonal","updateBreadcrumb","file","toLocaleTimeString","html","pageX","pageY","expand","collapse","zoomIdentity","minutes","nodeCountEl","activeCountEl","depthEl","nodeCount","countNodes","activeCount","countActiveNodes","getTreeDepth","count","depths","map","path","current","unshift","breadcrumb","join","setupActivityTreeListeners","activityTree","initializeActivityTree","activityTreeInstance","querySelectorAll","button","getAttribute","detail","newTab","activeTab","activityPanel","readyState"],"mappings":"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"}