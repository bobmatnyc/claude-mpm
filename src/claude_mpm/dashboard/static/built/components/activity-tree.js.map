{"version":3,"file":"activity-tree.js","sources":["../../js/components/activity-tree.js"],"sourcesContent":["/**\n * Activity Tree Component\n * \n * D3.js-based collapsible tree visualization for showing PM activity hierarchy.\n * Displays PM actions, TodoWrite delegations, agent assignments, and tool usage.\n */\n\nclass ActivityTree {\n    constructor() {\n        this.container = null;\n        this.svg = null;\n        this.treeData = null;\n        this.root = null;\n        this.treeLayout = null;\n        this.treeGroup = null;\n        this.events = [];\n        this.todoWriteStack = [];\n        this.activeAgent = null;\n        this.activeAgentStack = [];\n        this.margin = {top: 20, right: 120, bottom: 20, left: 120};\n        this.width = 960 - this.margin.left - this.margin.right;\n        this.height = 500 - this.margin.top - this.margin.bottom;\n        this.nodeId = 0;\n        this.duration = 750;\n        this.timeRange = '30min';\n        this.searchTerm = '';\n        this.tooltip = null;\n        this.initialized = false;\n    }\n\n    /**\n     * Initialize the activity tree visualization\n     */\n    initialize() {\n        console.log('ActivityTree.initialize() called, initialized:', this.initialized);\n        \n        // Check if already initialized\n        if (this.initialized) {\n            console.log('Activity tree already initialized, skipping');\n            return;\n        }\n        \n        this.container = document.getElementById('activity-tree');\n        if (!this.container) {\n            console.error('Activity tree container (#activity-tree) not found in DOM');\n            return;\n        }\n        \n        console.log('Activity tree container found:', this.container);\n        \n        // Check if the container is visible before initializing\n        const tabPanel = document.getElementById('activity-tab');\n        if (!tabPanel) {\n            console.error('Activity tab panel (#activity-tab) not found in DOM');\n            return;\n        }\n        \n        // Initialize even if tab is not active, but don't render until visible\n        if (!tabPanel.classList.contains('active')) {\n            console.log('Activity tab not active, initializing but deferring render');\n            // Set up basic structure but defer visualization\n            this.setupControls();\n            this.initializeTreeData();\n            this.subscribeToEvents();\n            this.initialized = true;\n            return;\n        }\n\n        this.setupControls();\n        this.createVisualization();\n        \n        if (!this.svg || !this.treeGroup) {\n            console.error('Failed to create D3 visualization elements');\n            return;\n        }\n        \n        this.initializeTreeData();\n        this.update(this.root);\n        this.subscribeToEvents();\n        \n        this.initialized = true;\n        console.log('Activity tree initialization complete');\n    }\n\n    /**\n     * Render the visualization when tab becomes visible (called when switching to Activity tab)\n     */\n    renderWhenVisible() {\n        console.log('ActivityTree.renderWhenVisible() called');\n        \n        if (!this.initialized) {\n            console.log('Not initialized yet, calling initialize...');\n            this.initialize();\n            return;\n        }\n        \n        // If already initialized but no visualization, create it\n        if (!this.svg) {\n            console.log('Creating deferred visualization...');\n            this.createVisualization();\n            if (this.svg && this.treeGroup) {\n                this.update(this.root);\n            }\n        }\n        \n        // Force update to ensure tree is rendered with current data\n        if (this.root && this.svg) {\n            console.log('Updating tree with current data...');\n            this.update(this.root);\n        }\n    }\n\n    /**\n     * Setup control handlers\n     */\n    setupControls() {\n        // Expand all button\n        const expandAllBtn = document.getElementById('expand-all');\n        if (expandAllBtn) {\n            expandAllBtn.addEventListener('click', () => this.expandAll());\n        }\n\n        // Collapse all button\n        const collapseAllBtn = document.getElementById('collapse-all');\n        if (collapseAllBtn) {\n            collapseAllBtn.addEventListener('click', () => this.collapseAll());\n        }\n\n        // Reset zoom button\n        const resetZoomBtn = document.getElementById('reset-zoom');\n        if (resetZoomBtn) {\n            resetZoomBtn.addEventListener('click', () => this.resetZoom());\n        }\n\n        // Time range selector\n        const timeRangeSelect = document.getElementById('time-range');\n        if (timeRangeSelect) {\n            timeRangeSelect.addEventListener('change', (e) => {\n                this.timeRange = e.target.value;\n                this.filterEventsByTime();\n            });\n        }\n\n        // Search input\n        const searchInput = document.getElementById('activity-search');\n        if (searchInput) {\n            searchInput.addEventListener('input', (e) => {\n                this.searchTerm = e.target.value.toLowerCase();\n                this.highlightSearchResults();\n            });\n        }\n    }\n\n    /**\n     * Create the D3 visualization\n     */\n    createVisualization() {\n        // Check if D3 is available\n        if (typeof d3 === 'undefined') {\n            console.error('D3.js is not loaded! Cannot create activity tree visualization.');\n            return;\n        }\n\n        // Calculate dimensions based on container\n        const containerRect = this.container.getBoundingClientRect();\n        this.width = containerRect.width - this.margin.left - this.margin.right;\n        this.height = Math.max(500, containerRect.height - this.margin.top - this.margin.bottom);\n\n        console.log('Creating D3 visualization with dimensions:', { width: this.width, height: this.height });\n\n        // Clear any existing SVG\n        d3.select(this.container).select('svg').remove();\n\n        // Create SVG\n        this.svg = d3.select(this.container)\n            .append('svg')\n            .attr('width', '100%')\n            .attr('height', '100%')\n            .attr('viewBox', `0 0 ${this.width + this.margin.left + this.margin.right} ${this.height + this.margin.top + this.margin.bottom}`);\n\n        // Create main group for tree positioning\n        this.treeGroup = this.svg.append('g')\n            .attr('class', 'tree-group')\n            .attr('transform', `translate(${this.margin.left},${this.margin.top})`);\n\n        // Add zoom behavior\n        const zoom = d3.zoom()\n            .scaleExtent([0.1, 3])\n            .on('zoom', (event) => {\n                this.treeGroup.attr('transform', \n                    `translate(${this.margin.left + event.transform.x},${this.margin.top + event.transform.y}) scale(${event.transform.k})`\n                );\n            });\n\n        this.svg.call(zoom);\n\n        // Create tree layout\n        this.treeLayout = d3.tree()\n            .size([this.height, this.width]);\n\n        // Create tooltip\n        this.tooltip = d3.select('body').append('div')\n            .attr('class', 'activity-tooltip')\n            .style('opacity', 0);\n    }\n\n    /**\n     * Initialize tree data structure\n     */\n    initializeTreeData() {\n        this.treeData = {\n            name: 'PM',\n            type: 'pm',\n            icon: '🎯',\n            children: [],\n            _children: null\n        };\n\n        this.root = d3.hierarchy(this.treeData);\n        this.root.x0 = this.height / 2;\n        this.root.y0 = 0;\n    }\n\n    /**\n     * Subscribe to socket events\n     */\n    subscribeToEvents() {\n        if (!window.socketClient) {\n            console.warn('Socket client not available for activity tree');\n            setTimeout(() => this.subscribeToEvents(), 1000);\n            return;\n        }\n\n        // Subscribe to event updates from the socket client\n        // This receives ALL events, and we'll filter for the ones with hook_event_name\n        window.socketClient.onEventUpdate((events) => {\n            // Process only the new events since last update\n            // The events array contains ALL events, so we need to track what we've processed\n            const newEventCount = events.length - this.events.length;\n            if (newEventCount > 0) {\n                // Process only the new events\n                const newEvents = events.slice(this.events.length);\n                \n                // Debug: Log new events to see their structure\n                console.log('ActivityTree: Received new events:', newEvents.map(e => ({\n                    type: e.type,\n                    subtype: e.subtype,\n                    hook_event_name: e.hook_event_name,\n                    tool_name: e.tool_name,\n                    originalEventName: e.originalEventName\n                })));\n                \n                // Count events with hook_event_name\n                const eventsWithHookName = newEvents.filter(e => e.hook_event_name).length;\n                const hookTypeEvents = newEvents.filter(e => e.type === 'hook' || e.type === 'todo' || e.type === 'subagent').length;\n                console.log(`ActivityTree: ${eventsWithHookName}/${newEventCount} new events have hook_event_name, ${hookTypeEvents} are hook/todo/subagent type`);\n                \n                newEvents.forEach(event => {\n                    if (event.hook_event_name) {\n                        this.processEvent(event);\n                    } else if (event.type === 'hook' || event.type === 'todo' || event.type === 'subagent') {\n                        // Log events that should have hook_event_name but don't\n                        console.warn('ActivityTree: Missing hook_event_name for relevant event:', {\n                            type: event.type,\n                            subtype: event.subtype,\n                            tool_name: event.tool_name\n                        });\n                    }\n                });\n                // Update our event count\n                this.events = [...events];\n            }\n        });\n\n        // Load existing events if available from socketClient directly\n        if (window.socketClient && window.socketClient.events) {\n            console.log(`Processing ${window.socketClient.events.length} existing events for activity tree`);\n            \n            // Debug: Check how many events have hook_event_name\n            const eventsWithHookName = window.socketClient.events.filter(e => e.hook_event_name).length;\n            const hookTypeEvents = window.socketClient.events.filter(e => e.type === 'hook' || e.type === 'todo' || e.type === 'subagent').length;\n            console.log(`ActivityTree: ${eventsWithHookName}/${window.socketClient.events.length} existing events have hook_event_name, ${hookTypeEvents} are hook/todo/subagent type`);\n            \n            // Log a sample of events to see their structure\n            const sampleEvents = window.socketClient.events.slice(0, 5);\n            console.log('ActivityTree: Sample of existing events:', sampleEvents.map(e => ({\n                type: e.type,\n                subtype: e.subtype,\n                hook_event_name: e.hook_event_name,\n                tool_name: e.tool_name,\n                originalEventName: e.originalEventName\n            })));\n            \n            window.socketClient.events.forEach(event => {\n                if (event.hook_event_name) {\n                    this.processEvent(event);\n                }\n            });\n            // Store the initial events\n            this.events = [...window.socketClient.events];\n        } else if (window.eventViewer && window.eventViewer.events) {\n            // Fallback to eventViewer if socketClient events not available\n            console.log(`Processing ${window.eventViewer.events.length} existing events for activity tree (from eventViewer)`);\n            window.eventViewer.events.forEach(event => {\n                if (event.hook_event_name) {\n                    this.processEvent(event);\n                }\n            });\n            this.events = [...window.eventViewer.events];\n        } else {\n            console.log('No existing events found for activity tree');\n            this.events = [];\n        }\n    }\n\n    /**\n     * Process an event and update the tree\n     */\n    processEvent(event) {\n        if (!event || !event.hook_event_name) {\n            console.log('ActivityTree: Ignoring invalid event', event);\n            return;\n        }\n        \n        console.log(`ActivityTree: Processing event: ${event.hook_event_name}`, event);\n\n        const eventName = event.hook_event_name;\n        const timestamp = new Date(event.timestamp);\n\n        // Filter by time range if necessary\n        if (!this.isEventInTimeRange(timestamp)) return;\n\n        switch (eventName) {\n            case 'TodoWrite':\n                this.processTodoWrite(event);\n                break;\n            case 'SubagentStart':\n                this.processSubagentStart(event);\n                break;\n            case 'SubagentStop':\n                this.processSubagentStop(event);\n                break;\n            case 'PreToolUse':\n                this.processToolUse(event);\n                break;\n            case 'PostToolUse':\n                // Update tool status to completed\n                this.updateToolStatus(event, 'completed');\n                break;\n            case 'Start':\n                // PM session start\n                this.initializeTreeData();\n                this.update(this.root);\n                break;\n        }\n\n        this.updateStats();\n    }\n\n    /**\n     * Process TodoWrite event\n     */\n    processTodoWrite(event) {\n        // Look for todos in multiple places for compatibility\n        const todos = event.todos || event.data?.todos || [];\n        if (todos.length === 0) return;\n\n        // Find in-progress todo\n        const activeTodo = todos.find(t => t.status === 'in_progress');\n        if (!activeTodo) return;\n\n        // Create TodoWrite node\n        const todoNode = {\n            name: activeTodo.activeForm || activeTodo.content,\n            type: 'todowrite',\n            icon: '📝',\n            content: activeTodo.content,\n            status: activeTodo.status,\n            timestamp: event.timestamp,\n            children: [],\n            _children: null,\n            eventId: event.id\n        };\n\n        // Add to PM root\n        if (!this.root.data.children) {\n            this.root.data.children = [];\n        }\n        this.root.data.children.push(todoNode);\n\n        // Track this TodoWrite\n        this.todoWriteStack.push({\n            node: todoNode,\n            content: activeTodo.content\n        });\n\n        this.update(this.root);\n    }\n\n    /**\n     * Process SubagentStart event\n     */\n    processSubagentStart(event) {\n        // Look for agent_name in multiple places for compatibility\n        const agentName = event.agent_name || event.data?.agent_name || event.data?.agent_type || 'unknown';\n        const agentIcon = this.getAgentIcon(agentName);\n\n        // Create agent node\n        const agentNode = {\n            name: agentName,\n            type: 'agent',\n            icon: agentIcon,\n            timestamp: event.timestamp,\n            children: [],\n            _children: null,\n            eventId: event.id,\n            sessionId: event.session_id || event.data?.session_id\n        };\n\n        // Find parent - either last TodoWrite or PM root\n        let parent = null;\n        if (this.todoWriteStack.length > 0) {\n            // Check if TodoWrite mentions this agent\n            const todoWrite = this.todoWriteStack[this.todoWriteStack.length - 1];\n            if (todoWrite.content && todoWrite.content.toLowerCase().includes(agentName.toLowerCase())) {\n                parent = todoWrite.node;\n            }\n        }\n\n        if (!parent) {\n            parent = this.root.data;\n        }\n\n        if (!parent.children) {\n            parent.children = [];\n        }\n        parent.children.push(agentNode);\n\n        // Track active agent\n        this.activeAgent = agentNode;\n        this.activeAgentStack.push(agentNode);\n\n        this.update(this.root);\n    }\n\n    /**\n     * Process SubagentStop event\n     */\n    processSubagentStop(event) {\n        // Mark agent as completed (look for session_id in multiple places)\n        const sessionId = event.session_id || event.data?.session_id;\n        if (this.activeAgent && this.activeAgent.sessionId === sessionId) {\n            this.activeAgent.status = 'completed';\n            this.activeAgentStack.pop();\n            this.activeAgent = this.activeAgentStack.length > 0 ? \n                this.activeAgentStack[this.activeAgentStack.length - 1] : null;\n        }\n\n        this.update(this.root);\n    }\n\n    /**\n     * Process tool use event\n     */\n    processToolUse(event) {\n        // Look for tool_name in multiple places for compatibility\n        const toolName = event.tool_name || event.data?.tool_name || 'unknown';\n        const toolIcon = this.getToolIcon(toolName);\n        // Look for tool parameters in multiple places (tool_parameters is the actual field name)\n        const params = event.tool_parameters || event.data?.tool_parameters || event.data?.tool_params || {};\n\n        // Create tool node\n        const toolNode = {\n            name: toolName,\n            type: 'tool',\n            icon: toolIcon,\n            timestamp: event.timestamp,\n            status: 'in_progress',\n            children: [],\n            _children: null,\n            eventId: event.id\n        };\n\n        // Add file/command as child if applicable\n        if (toolName === 'Read' && params.file_path) {\n            toolNode.children.push({\n                name: params.file_path,\n                type: 'file',\n                icon: '📄',\n                timestamp: event.timestamp\n            });\n        } else if (toolName === 'Edit' && params.file_path) {\n            toolNode.children.push({\n                name: params.file_path,\n                type: 'file',\n                icon: '✏️',\n                timestamp: event.timestamp\n            });\n        } else if (toolName === 'Write' && params.file_path) {\n            toolNode.children.push({\n                name: params.file_path,\n                type: 'file',\n                icon: '💾',\n                timestamp: event.timestamp\n            });\n        } else if (toolName === 'Bash' && params.command) {\n            toolNode.children.push({\n                name: params.command.substring(0, 50) + (params.command.length > 50 ? '...' : ''),\n                type: 'command',\n                icon: '⚡',\n                timestamp: event.timestamp\n            });\n        } else if (toolName === 'WebFetch' && params.url) {\n            toolNode.children.push({\n                name: params.url,\n                type: 'url',\n                icon: '🌐',\n                timestamp: event.timestamp\n            });\n        }\n\n        // Find parent - active agent or PM root\n        let parent = this.activeAgent || this.root.data;\n        if (!parent.children) {\n            parent.children = [];\n        }\n        parent.children.push(toolNode);\n\n        this.update(this.root);\n    }\n\n    /**\n     * Update tool status after completion\n     */\n    updateToolStatus(event, status) {\n        // Find tool node by event ID and update status\n        const findAndUpdate = (node) => {\n            if (node.eventId === event.id) {\n                node.status = status;\n                return true;\n            }\n            if (node.children) {\n                for (let child of node.children) {\n                    if (findAndUpdate(child)) return true;\n                }\n            }\n            if (node._children) {\n                for (let child of node._children) {\n                    if (findAndUpdate(child)) return true;\n                }\n            }\n            return false;\n        };\n\n        findAndUpdate(this.root.data);\n        this.update(this.root);\n    }\n\n    /**\n     * Get agent icon based on name\n     */\n    getAgentIcon(agentName) {\n        const icons = {\n            'engineer': '👷',\n            'research': '🔬',\n            'qa': '🧪',\n            'ops': '⚙️',\n            'pm': '📊',\n            'architect': '🏗️'\n        };\n        return icons[agentName.toLowerCase()] || '🤖';\n    }\n\n    /**\n     * Get tool icon based on name\n     */\n    getToolIcon(toolName) {\n        const icons = {\n            'read': '👁️',\n            'write': '✍️',\n            'edit': '✏️',\n            'bash': '💻',\n            'webfetch': '🌐',\n            'grep': '🔍',\n            'glob': '📂',\n            'todowrite': '📝'\n        };\n        return icons[toolName.toLowerCase()] || '🔧';\n    }\n\n    /**\n     * Update the tree visualization\n     */\n    update(source) {\n        // Compute the new tree layout\n        const treeData = this.treeLayout(this.root);\n        const nodes = treeData.descendants();\n        const links = treeData.links();\n\n        // Normalize for fixed-depth\n        nodes.forEach((d) => {\n            d.y = d.depth * 180;\n        });\n\n        // Update nodes\n        const node = this.treeGroup.selectAll('g.node')\n            .data(nodes, (d) => d.id || (d.id = ++this.nodeId));\n\n        // Enter new nodes\n        const nodeEnter = node.enter().append('g')\n            .attr('class', 'node')\n            .attr('transform', (d) => `translate(${source.y0},${source.x0})`)\n            .on('click', (event, d) => this.click(d));\n\n        // Add circles for nodes\n        nodeEnter.append('circle')\n            .attr('class', (d) => `node-circle ${d.data.type}`)\n            .attr('r', 1e-6)\n            .style('fill', (d) => d._children ? this.getNodeColor(d.data.type) : '#fff')\n            .style('stroke', (d) => this.getNodeColor(d.data.type));\n\n        // Add icons\n        nodeEnter.append('text')\n            .attr('class', 'node-icon')\n            .attr('dy', '.35em')\n            .attr('text-anchor', 'middle')\n            .style('font-size', '14px')\n            .text((d) => d.data.icon || '');\n\n        // Add labels\n        nodeEnter.append('text')\n            .attr('class', 'node-label')\n            .attr('dy', '.35em')\n            .attr('x', (d) => d.children || d._children ? -25 : 25)\n            .attr('text-anchor', (d) => d.children || d._children ? 'end' : 'start')\n            .text((d) => d.data.name)\n            .style('fill-opacity', 1e-6);\n\n        // Add tooltips\n        nodeEnter.on('mouseover', (event, d) => this.showTooltip(event, d))\n            .on('mouseout', () => this.hideTooltip());\n\n        // Update existing nodes\n        const nodeUpdate = nodeEnter.merge(node);\n\n        // Transition nodes to new position\n        nodeUpdate.transition()\n            .duration(this.duration)\n            .attr('transform', (d) => `translate(${d.y},${d.x})`);\n\n        nodeUpdate.select('circle.node-circle')\n            .attr('r', 10)\n            .style('fill', (d) => {\n                if (d.data.status === 'in_progress') {\n                    return this.getNodeColor(d.data.type);\n                }\n                return d._children ? this.getNodeColor(d.data.type) : '#fff';\n            })\n            .attr('class', (d) => {\n                let classes = `node-circle ${d.data.type}`;\n                if (d.data.status === 'in_progress') classes += ' pulsing';\n                if (d.data.status === 'failed') classes += ' failed';\n                return classes;\n            });\n\n        nodeUpdate.select('text.node-label')\n            .style('fill-opacity', 1);\n\n        // Remove exiting nodes\n        const nodeExit = node.exit().transition()\n            .duration(this.duration)\n            .attr('transform', (d) => `translate(${source.y},${source.x})`)\n            .remove();\n\n        nodeExit.select('circle')\n            .attr('r', 1e-6);\n\n        nodeExit.select('text')\n            .style('fill-opacity', 1e-6);\n\n        // Update links\n        const link = this.treeGroup.selectAll('path.link')\n            .data(links, (d) => d.target.id);\n\n        // Enter new links\n        const linkEnter = link.enter().insert('path', 'g')\n            .attr('class', 'link')\n            .attr('d', (d) => {\n                const o = {x: source.x0, y: source.y0};\n                return this.diagonal({source: o, target: o});\n            });\n\n        // Update existing links\n        const linkUpdate = linkEnter.merge(link);\n\n        linkUpdate.transition()\n            .duration(this.duration)\n            .attr('d', this.diagonal);\n\n        // Remove exiting links\n        link.exit().transition()\n            .duration(this.duration)\n            .attr('d', (d) => {\n                const o = {x: source.x, y: source.y};\n                return this.diagonal({source: o, target: o});\n            })\n            .remove();\n\n        // Store old positions for transition\n        nodes.forEach((d) => {\n            d.x0 = d.x;\n            d.y0 = d.y;\n        });\n\n        // Update breadcrumb on node click\n        this.updateBreadcrumb(source);\n    }\n\n    /**\n     * Create diagonal path for links\n     */\n    diagonal(d) {\n        return `M ${d.source.y} ${d.source.x}\n                C ${(d.source.y + d.target.y) / 2} ${d.source.x},\n                  ${(d.source.y + d.target.y) / 2} ${d.target.x},\n                  ${d.target.y} ${d.target.x}`;\n    }\n\n    /**\n     * Handle node click for expand/collapse\n     */\n    click(d) {\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n        this.update(d);\n        this.updateBreadcrumb(d);\n    }\n\n    /**\n     * Get node color based on type\n     */\n    getNodeColor(type) {\n        const colors = {\n            'pm': '#4299e1',\n            'todowrite': '#48bb78',\n            'agent': '#ed8936',\n            'tool': '#9f7aea',\n            'file': '#38b2ac',\n            'command': '#f56565',\n            'url': '#4299e1'\n        };\n        return colors[type] || '#718096';\n    }\n\n    /**\n     * Show tooltip\n     */\n    showTooltip(event, d) {\n        const content = `\n            <strong>${d.data.name}</strong><br>\n            Type: ${d.data.type}<br>\n            ${d.data.timestamp ? `Time: ${new Date(d.data.timestamp).toLocaleTimeString()}` : ''}\n            ${d.data.status ? `<br>Status: ${d.data.status}` : ''}\n        `;\n\n        this.tooltip.transition()\n            .duration(200)\n            .style('opacity', .9);\n        \n        this.tooltip.html(content)\n            .style('left', (event.pageX + 10) + 'px')\n            .style('top', (event.pageY - 28) + 'px');\n    }\n\n    /**\n     * Hide tooltip\n     */\n    hideTooltip() {\n        this.tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n    }\n\n    /**\n     * Expand all nodes\n     */\n    expandAll() {\n        const expand = (d) => {\n            if (d._children) {\n                d.children = d._children;\n                d._children = null;\n            }\n            if (d.children) {\n                d.children.forEach(expand);\n            }\n        };\n        \n        expand(this.root);\n        this.update(this.root);\n    }\n\n    /**\n     * Collapse all nodes\n     */\n    collapseAll() {\n        const collapse = (d) => {\n            if (d.children) {\n                d._children = d.children;\n                d._children.forEach(collapse);\n                d.children = null;\n            }\n        };\n        \n        this.root.children?.forEach(collapse);\n        this.update(this.root);\n    }\n\n    /**\n     * Reset zoom\n     */\n    resetZoom() {\n        if (!this.svg) {\n            console.warn('Cannot reset zoom: SVG not initialized');\n            return;\n        }\n        \n        const zoom = d3.zoom()\n            .scaleExtent([0.1, 3])\n            .on('zoom', (event) => {\n                this.treeGroup.attr('transform', \n                    `translate(${this.margin.left + event.transform.x},${this.margin.top + event.transform.y}) scale(${event.transform.k})`\n                );\n            });\n        \n        this.svg.transition()\n            .duration(750)\n            .call(zoom.transform, d3.zoomIdentity);\n        \n        // Reset the tree group transform\n        this.treeGroup.transition()\n            .duration(750)\n            .attr('transform', `translate(${this.margin.left},${this.margin.top})`);\n    }\n\n    /**\n     * Check if event is in time range\n     */\n    isEventInTimeRange(timestamp) {\n        if (this.timeRange === 'all') return true;\n\n        const now = new Date();\n        const diff = now - timestamp;\n        const minutes = diff / (1000 * 60);\n\n        switch (this.timeRange) {\n            case '10min': return minutes <= 10;\n            case '30min': return minutes <= 30;\n            case 'hour': return minutes <= 60;\n            default: return true;\n        }\n    }\n\n    /**\n     * Filter events by time\n     */\n    filterEventsByTime() {\n        this.initializeTreeData();\n        \n        // Reprocess all events with new time filter\n        if (window.eventViewer && window.eventViewer.events) {\n            window.eventViewer.events.forEach(event => {\n                this.processEvent(event);\n            });\n        }\n    }\n\n    /**\n     * Update statistics\n     */\n    updateStats() {\n        const nodeCount = this.countNodes(this.root);\n        const activeCount = this.countActiveNodes(this.root.data);\n        const depth = this.getTreeDepth(this.root);\n\n        document.getElementById('node-count').textContent = nodeCount;\n        document.getElementById('active-count').textContent = activeCount;\n        document.getElementById('tree-depth').textContent = depth;\n    }\n\n    /**\n     * Count total nodes\n     */\n    countNodes(node) {\n        let count = 1;\n        if (node.children) {\n            node.children.forEach(child => {\n                count += this.countNodes(child);\n            });\n        }\n        if (node._children) {\n            node._children.forEach(child => {\n                count += this.countNodes(child);\n            });\n        }\n        return count;\n    }\n\n    /**\n     * Count active nodes\n     */\n    countActiveNodes(node) {\n        let count = node.status === 'in_progress' ? 1 : 0;\n        if (node.children) {\n            node.children.forEach(child => {\n                count += this.countActiveNodes(child);\n            });\n        }\n        if (node._children) {\n            node._children.forEach(child => {\n                count += this.countActiveNodes(child);\n            });\n        }\n        return count;\n    }\n\n    /**\n     * Get tree depth\n     */\n    getTreeDepth(node) {\n        if (!node.children && !node._children) return 0;\n        \n        const children = node.children || node._children;\n        const depths = children.map(child => this.getTreeDepth(child));\n        return Math.max(...depths) + 1;\n    }\n\n    /**\n     * Update breadcrumb\n     */\n    updateBreadcrumb(node) {\n        const path = [];\n        let current = node;\n        \n        while (current) {\n            path.unshift(current.data.name);\n            current = current.parent;\n        }\n        \n        const breadcrumb = document.getElementById('activity-breadcrumb');\n        if (breadcrumb) {\n            breadcrumb.textContent = path.join(' > ');\n        }\n    }\n\n    /**\n     * Highlight search results\n     */\n    highlightSearchResults() {\n        // Clear previous highlights\n        this.treeGroup.selectAll('.node-label')\n            .style('font-weight', 'normal')\n            .style('fill', '#2d3748');\n\n        if (!this.searchTerm) return;\n\n        // Highlight matching nodes\n        this.treeGroup.selectAll('.node-label')\n            .style('font-weight', d => {\n                return d.data.name.toLowerCase().includes(this.searchTerm) ? 'bold' : 'normal';\n            })\n            .style('fill', d => {\n                return d.data.name.toLowerCase().includes(this.searchTerm) ? '#e53e3e' : '#2d3748';\n            });\n    }\n}\n\n// Make ActivityTree globally available immediately when module loads\nwindow.ActivityTree = ActivityTree;\n\n// Initialize when the Activity tab is selected\n// Only set up event listeners when DOM is ready, but expose class immediately\nconst setupActivityTreeListeners = () => {\n    let activityTree = null;\n\n    // Function to initialize the tree\n    const initializeActivityTree = () => {\n        if (!activityTree) {\n            console.log('Creating new Activity Tree instance...');\n            activityTree = new ActivityTree();\n            // Store instance globally for dashboard access\n            window.activityTreeInstance = activityTree;\n        }\n        // Always try to initialize when tab becomes active, even if instance exists\n        // Small delay to ensure DOM is ready and tab is visible\n        setTimeout(() => {\n            console.log('Attempting to initialize Activity Tree visualization...');\n            activityTree.initialize();\n        }, 100);\n    };\n\n    // Tab switching logic\n    document.querySelectorAll('.tab-button').forEach(button => {\n        button.addEventListener('click', (e) => {\n            const tabName = e.target.getAttribute('data-tab');\n            \n            if (tabName === 'activity') {\n                console.log('Activity tab button clicked, initializing tree...');\n                initializeActivityTree();\n                // Also call renderWhenVisible to ensure proper rendering\n                if (activityTree) {\n                    setTimeout(() => activityTree.renderWhenVisible(), 150);\n                }\n            }\n        });\n    });\n\n    // Also listen for custom tab change events\n    document.addEventListener('tabChanged', (e) => {\n        if (e.detail && e.detail.newTab === 'activity') {\n            console.log('Tab changed to activity, initializing tree...');\n            initializeActivityTree();\n            // Also call renderWhenVisible to ensure proper rendering\n            if (activityTree) {\n                setTimeout(() => activityTree.renderWhenVisible(), 150);\n            }\n        }\n    });\n\n    // Check if activity tab is already active on load\n    const activeTab = document.querySelector('.tab-button.active');\n    if (activeTab && activeTab.getAttribute('data-tab') === 'activity') {\n        initializeActivityTree();\n    }\n\n    // Export for debugging\n    window.activityTree = () => activityTree;  // Expose instance getter for debugging\n};\n\n// Set up listeners when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', setupActivityTreeListeners);\n} else {\n    // DOM already loaded\n    setupActivityTreeListeners();\n}\n\nexport { ActivityTree };\nexport default ActivityTree;"],"names":["ActivityTree","constructor","this","container","svg","treeData","root","treeLayout","treeGroup","events","todoWriteStack","activeAgent","activeAgentStack","margin","top","right","bottom","left","width","height","nodeId","duration","timeRange","searchTerm","tooltip","initialized","initialize","console","log","document","getElementById","error","tabPanel","classList","contains","setupControls","initializeTreeData","subscribeToEvents","createVisualization","update","renderWhenVisible","expandAllBtn","addEventListener","expandAll","collapseAllBtn","collapseAll","resetZoomBtn","resetZoom","timeRangeSelect","e","target","value","filterEventsByTime","searchInput","toLowerCase","highlightSearchResults","d3","containerRect","getBoundingClientRect","Math","max","select","remove","append","attr","zoom","scaleExtent","on","event","transform","x","y","k","call","tree","size","style","name","type","icon","children","_children","hierarchy","x0","y0","window","socketClient","warn","setTimeout","onEventUpdate","newEventCount","length","newEvents","slice","map","subtype","hook_event_name","tool_name","originalEventName","eventsWithHookName","filter","hookTypeEvents","forEach","processEvent","sampleEvents","eventViewer","eventName","timestamp","Date","isEventInTimeRange","processTodoWrite","processSubagentStart","processSubagentStop","processToolUse","updateToolStatus","updateStats","todos","data","activeTodo","find","t","status","todoNode","activeForm","content","eventId","id","push","node","agentName","agent_name","agent_type","agentNode","getAgentIcon","sessionId","session_id","parent","todoWrite","includes","pop","toolName","toolIcon","getToolIcon","params","tool_parameters","tool_params","toolNode","file_path","command","substring","url","findAndUpdate","child","engineer","research","qa","ops","pm","architect","read","write","edit","bash","webfetch","grep","glob","todowrite","source","nodes","descendants","links","d","depth","selectAll","nodeEnter","enter","click","getNodeColor","text","showTooltip","hideTooltip","nodeUpdate","merge","transition","classes","nodeExit","exit","link","insert","o","diagonal","updateBreadcrumb","agent","tool","file","toLocaleTimeString","html","pageX","pageY","expand","collapse","zoomIdentity","minutes","nodeCount","countNodes","activeCount","countActiveNodes","getTreeDepth","textContent","count","depths","path","current","unshift","breadcrumb","join","setupActivityTreeListeners","activityTree","initializeActivityTree","activityTreeInstance","querySelectorAll","button","getAttribute","detail","newTab","activeTab","querySelector","readyState"],"mappings":"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"}