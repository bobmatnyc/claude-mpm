{"version":3,"file":"file-viewer.js","sources":["../../js/components/file-viewer.js"],"sourcesContent":["/**\n * File Viewer Component\n * \n * A simple file content viewer that displays file contents in a modal window.\n * This component handles file loading via HTTP requests and displays the content\n * with basic syntax highlighting support.\n */\n\nclass FileViewer {\n    constructor() {\n        this.modal = null;\n        this.currentFile = null;\n        this.initialized = false;\n        this.contentCache = new Map();\n    }\n\n    /**\n     * Initialize the file viewer\n     */\n    initialize() {\n        if (this.initialized) {\n            return;\n        }\n\n        this.createModal();\n        this.setupEventHandlers();\n        \n        this.initialized = true;\n        console.log('File viewer initialized');\n    }\n\n    /**\n     * Create modal DOM structure\n     */\n    createModal() {\n        const modalHtml = `\n            <div class=\"file-viewer-modal\" id=\"file-viewer-modal\">\n                <div class=\"file-viewer-content\">\n                    <div class=\"file-viewer-header\">\n                        <h2>📄 File Viewer</h2>\n                        <button class=\"file-viewer-close\" id=\"file-viewer-close\">×</button>\n                    </div>\n                    <div class=\"file-viewer-path\" id=\"file-viewer-path\">\n                        Loading...\n                    </div>\n                    <div class=\"file-viewer-body\">\n                        <pre class=\"file-viewer-code\" id=\"file-viewer-code\">\n                            <code id=\"file-viewer-code-content\">Loading file content...</code>\n                        </pre>\n                    </div>\n                    <div class=\"file-viewer-footer\">\n                        <div class=\"file-viewer-info\">\n                            <span id=\"file-viewer-type\">Type: --</span>\n                            <span id=\"file-viewer-lines\">Lines: --</span>\n                            <span id=\"file-viewer-size\">Size: --</span>\n                        </div>\n                        <button class=\"file-viewer-copy\" id=\"file-viewer-copy\">📋 Copy</button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Add modal to body\n        document.body.insertAdjacentHTML('beforeend', modalHtml);\n        this.modal = document.getElementById('file-viewer-modal');\n\n        // Add styles if not already present\n        if (!document.getElementById('file-viewer-styles')) {\n            const styles = `\n                <style id=\"file-viewer-styles\">\n                    .file-viewer-modal {\n                        display: none;\n                        position: fixed;\n                        top: 0;\n                        left: 0;\n                        width: 100%;\n                        height: 100%;\n                        background: rgba(0, 0, 0, 0.7);\n                        z-index: 10000;\n                        animation: fadeIn 0.2s;\n                    }\n\n                    .file-viewer-modal.show {\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                    }\n\n                    .file-viewer-content {\n                        background: #1e1e1e;\n                        border-radius: 8px;\n                        width: 90%;\n                        max-width: 1200px;\n                        height: 80%;\n                        display: flex;\n                        flex-direction: column;\n                        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);\n                    }\n\n                    .file-viewer-header {\n                        display: flex;\n                        justify-content: space-between;\n                        align-items: center;\n                        padding: 15px 20px;\n                        background: #2d2d30;\n                        border-radius: 8px 8px 0 0;\n                        border-bottom: 1px solid #3e3e42;\n                    }\n\n                    .file-viewer-header h2 {\n                        margin: 0;\n                        color: #cccccc;\n                        font-size: 18px;\n                    }\n\n                    .file-viewer-close {\n                        background: none;\n                        border: none;\n                        color: #999;\n                        font-size: 24px;\n                        cursor: pointer;\n                        padding: 0;\n                        width: 30px;\n                        height: 30px;\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                    }\n\n                    .file-viewer-close:hover {\n                        color: #fff;\n                    }\n\n                    .file-viewer-path {\n                        padding: 10px 20px;\n                        background: #252526;\n                        color: #8b8b8b;\n                        font-family: 'Consolas', 'Monaco', monospace;\n                        font-size: 12px;\n                        border-bottom: 1px solid #3e3e42;\n                        word-break: break-all;\n                    }\n\n                    .file-viewer-body {\n                        flex: 1;\n                        overflow: auto;\n                        padding: 20px;\n                        background: #1e1e1e;\n                    }\n\n                    .file-viewer-code {\n                        margin: 0;\n                        padding: 0;\n                        background: transparent;\n                        overflow: visible;\n                    }\n\n                    .file-viewer-code code {\n                        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n                        font-size: 13px;\n                        line-height: 1.5;\n                        color: #d4d4d4;\n                        white-space: pre;\n                        display: block;\n                    }\n\n                    .file-viewer-footer {\n                        padding: 15px 20px;\n                        background: #2d2d30;\n                        border-top: 1px solid #3e3e42;\n                        display: flex;\n                        justify-content: space-between;\n                        align-items: center;\n                        border-radius: 0 0 8px 8px;\n                    }\n\n                    .file-viewer-info {\n                        display: flex;\n                        gap: 20px;\n                        color: #8b8b8b;\n                        font-size: 12px;\n                    }\n\n                    .file-viewer-copy {\n                        background: #0e639c;\n                        color: white;\n                        border: none;\n                        padding: 6px 12px;\n                        border-radius: 4px;\n                        cursor: pointer;\n                        font-size: 12px;\n                    }\n\n                    .file-viewer-copy:hover {\n                        background: #1177bb;\n                    }\n\n                    .file-viewer-copy.copied {\n                        background: #4ec9b0;\n                    }\n\n                    .file-viewer-error {\n                        color: #f48771;\n                        padding: 20px;\n                        text-align: center;\n                    }\n\n                    @keyframes fadeIn {\n                        from { opacity: 0; }\n                        to { opacity: 1; }\n                    }\n                </style>\n            `;\n            document.head.insertAdjacentHTML('beforeend', styles);\n        }\n    }\n\n    /**\n     * Setup event handlers\n     */\n    setupEventHandlers() {\n        // Close button\n        document.getElementById('file-viewer-close').addEventListener('click', () => {\n            this.hide();\n        });\n\n        // Close on backdrop click\n        this.modal.addEventListener('click', (e) => {\n            if (e.target === this.modal) {\n                this.hide();\n            }\n        });\n\n        // Close on ESC key\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape' && this.modal.classList.contains('show')) {\n                this.hide();\n            }\n        });\n\n        // Copy button\n        document.getElementById('file-viewer-copy').addEventListener('click', () => {\n            this.copyContent();\n        });\n    }\n\n    /**\n     * Show the file viewer with file content\n     */\n    async show(filePath) {\n        console.log('[FileViewer] show() called with path:', filePath);\n        console.log('[FileViewer] initialized:', this.initialized);\n        \n        if (!this.initialized) {\n            console.log('[FileViewer] Not initialized, initializing now...');\n            this.initialize();\n        }\n\n        this.currentFile = filePath;\n        this.modal.classList.add('show');\n        \n        // Update path\n        document.getElementById('file-viewer-path').textContent = filePath;\n        \n        console.log('[FileViewer] Modal shown, loading file content...');\n        // Load file content\n        await this.loadFileContent(filePath);\n    }\n\n    /**\n     * Hide the file viewer\n     */\n    hide() {\n        this.modal.classList.remove('show');\n        this.currentFile = null;\n    }\n\n    /**\n     * Load file content\n     */\n    async loadFileContent(filePath) {\n        const codeContent = document.getElementById('file-viewer-code-content');\n        \n        console.log('[FileViewer] loadFileContent called with path:', filePath);\n        \n        // Check cache first\n        if (this.contentCache.has(filePath)) {\n            console.log('[FileViewer] Using cached content for:', filePath);\n            this.displayContent(this.contentCache.get(filePath));\n            return;\n        }\n        \n        // Show loading state\n        codeContent.textContent = 'Loading file content...';\n        \n        try {\n            // Check if we have a socket connection available\n            if (window.socket && window.socket.connected) {\n                console.log('[FileViewer] Using Socket.IO to load file:', filePath);\n                \n                // Create a promise to wait for the response\n                const responsePromise = new Promise((resolve, reject) => {\n                    const timeoutId = setTimeout(() => {\n                        console.error('[FileViewer] Socket.IO request timed out for:', filePath);\n                        reject(new Error('Socket.IO request timed out'));\n                    }, 10000); // 10 second timeout\n                    \n                    // Set up one-time listener for the response\n                    window.socket.once('file_content_response', (data) => {\n                        clearTimeout(timeoutId);\n                        console.log('[FileViewer] Received file_content_response:', data);\n                        resolve(data);\n                    });\n                    \n                    // Emit the read_file event\n                    console.log('[FileViewer] Emitting read_file event with data:', {\n                        file_path: filePath,\n                        working_dir: window.workingDirectory || '/',\n                        max_size: 5 * 1024 * 1024  // 5MB limit\n                    });\n                    \n                    window.socket.emit('read_file', {\n                        file_path: filePath,\n                        working_dir: window.workingDirectory || '/',\n                        max_size: 5 * 1024 * 1024  // 5MB limit\n                    });\n                });\n                \n                // Wait for the response\n                const data = await responsePromise;\n                \n                if (data.success && data.content !== undefined) {\n                    console.log('[FileViewer] Successfully loaded file content, caching...');\n                    // Cache the content\n                    this.contentCache.set(filePath, data.content);\n                    \n                    // Display the content\n                    this.displayContent(data.content);\n                    \n                    // Update file info\n                    this.updateFileInfo(data);\n                } else {\n                    console.error('[FileViewer] Server returned error:', data.error);\n                    throw new Error(data.error || 'Failed to load file content');\n                }\n            } else {\n                console.error('[FileViewer] No Socket.IO connection available');\n                throw new Error('No socket connection available. Please ensure the dashboard is connected to the monitoring server.');\n            }\n        } catch (error) {\n            console.error('[FileViewer] Error loading file:', error);\n            console.error('[FileViewer] Error stack:', error.stack);\n            \n            // If API fails, show error message with helpful information\n            this.displayError(filePath, error.message);\n        }\n    }\n\n    /**\n     * Display file content\n     */\n    displayContent(content) {\n        const codeContent = document.getElementById('file-viewer-code-content');\n        \n        // Set the content\n        codeContent.textContent = content || '(Empty file)';\n        \n        // Update line count\n        const lines = content ? content.split('\\n').length : 0;\n        document.getElementById('file-viewer-lines').textContent = `Lines: ${lines}`;\n        \n        // Update file size\n        const size = content ? new Blob([content]).size : 0;\n        document.getElementById('file-viewer-size').textContent = `Size: ${this.formatFileSize(size)}`;\n        \n        // Detect and set file type\n        const fileType = this.detectFileType(this.currentFile);\n        document.getElementById('file-viewer-type').textContent = `Type: ${fileType}`;\n        \n        // Apply syntax highlighting if Prism is available\n        if (window.Prism) {\n            const language = this.detectLanguage(this.currentFile);\n            codeContent.className = `language-${language}`;\n            Prism.highlightElement(codeContent);\n        }\n    }\n\n    /**\n     * Display error message\n     */\n    displayError(filePath, errorMessage) {\n        const codeContent = document.getElementById('file-viewer-code-content');\n        \n        // For now, show a helpful message since the API endpoint doesn't exist yet\n        const errorHtml = `\n            <div class=\"file-viewer-error\">\n                ⚠️ File content loading is not yet implemented\n                \n                File path: ${filePath}\n                \n                The file viewing functionality requires:\n                1. A server-side /api/file endpoint\n                2. Proper file reading permissions\n                3. Security validation for file access\n                \n                Error: ${errorMessage}\n                \n                This feature will be available once the backend API is implemented.\n            </div>\n        `;\n        \n        codeContent.innerHTML = errorHtml;\n        \n        // Update info\n        document.getElementById('file-viewer-lines').textContent = 'Lines: --';\n        document.getElementById('file-viewer-size').textContent = 'Size: --';\n        document.getElementById('file-viewer-type').textContent = 'Type: --';\n    }\n\n    /**\n     * Update file info\n     */\n    updateFileInfo(data) {\n        if (data.lines !== undefined) {\n            document.getElementById('file-viewer-lines').textContent = `Lines: ${data.lines}`;\n        }\n        \n        if (data.size !== undefined) {\n            document.getElementById('file-viewer-size').textContent = `Size: ${this.formatFileSize(data.size)}`;\n        }\n        \n        if (data.type) {\n            document.getElementById('file-viewer-type').textContent = `Type: ${data.type}`;\n        }\n    }\n\n    /**\n     * Format file size for display\n     */\n    formatFileSize(bytes) {\n        if (bytes === 0) return '0 Bytes';\n        \n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        \n        return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n    }\n\n    /**\n     * Detect file type from path\n     */\n    detectFileType(path) {\n        if (!path) return 'Unknown';\n        \n        const ext = path.split('.').pop()?.toLowerCase();\n        const typeMap = {\n            'py': 'Python',\n            'js': 'JavaScript',\n            'ts': 'TypeScript',\n            'jsx': 'React JSX',\n            'tsx': 'React TSX',\n            'html': 'HTML',\n            'css': 'CSS',\n            'json': 'JSON',\n            'xml': 'XML',\n            'yaml': 'YAML',\n            'yml': 'YAML',\n            'md': 'Markdown',\n            'txt': 'Text',\n            'sh': 'Shell Script',\n            'bash': 'Bash Script',\n            'sql': 'SQL',\n            'go': 'Go',\n            'rs': 'Rust',\n            'java': 'Java',\n            'cpp': 'C++',\n            'c': 'C',\n            'cs': 'C#',\n            'rb': 'Ruby',\n            'php': 'PHP'\n        };\n        \n        return typeMap[ext] || 'Text';\n    }\n\n    /**\n     * Detect language for syntax highlighting\n     */\n    detectLanguage(path) {\n        if (!path) return 'plaintext';\n        \n        const ext = path.split('.').pop()?.toLowerCase();\n        const languageMap = {\n            'py': 'python',\n            'js': 'javascript',\n            'ts': 'typescript',\n            'jsx': 'jsx',\n            'tsx': 'tsx',\n            'html': 'html',\n            'css': 'css',\n            'json': 'json',\n            'xml': 'xml',\n            'yaml': 'yaml',\n            'yml': 'yaml',\n            'md': 'markdown',\n            'sh': 'bash',\n            'bash': 'bash',\n            'sql': 'sql',\n            'go': 'go',\n            'rs': 'rust',\n            'java': 'java',\n            'cpp': 'cpp',\n            'c': 'c',\n            'cs': 'csharp',\n            'rb': 'ruby',\n            'php': 'php'\n        };\n        \n        return languageMap[ext] || 'plaintext';\n    }\n\n    /**\n     * Copy file content to clipboard\n     */\n    async copyContent() {\n        const codeContent = document.getElementById('file-viewer-code-content');\n        const button = document.getElementById('file-viewer-copy');\n        const content = codeContent.textContent;\n        \n        try {\n            await navigator.clipboard.writeText(content);\n            \n            // Show feedback\n            const originalText = button.textContent;\n            button.textContent = '✅ Copied!';\n            button.classList.add('copied');\n            \n            setTimeout(() => {\n                button.textContent = originalText;\n                button.classList.remove('copied');\n            }, 2000);\n        } catch (err) {\n            console.error('Failed to copy:', err);\n            alert('Failed to copy content to clipboard');\n        }\n    }\n}\n\n// Create singleton instance\nconst fileViewer = new FileViewer();\n\n// Create global function for easy access\n// Only set if not already defined by dashboard.js\nif (!window.showFileViewerModal) {\n    window.showFileViewerModal = (filePath) => {\n        console.log('[FileViewer] showFileViewerModal called with path:', filePath);\n        fileViewer.show(filePath);\n    };\n}\n\n// Expose the singleton for debugging\nwindow.fileViewerInstance = fileViewer;\n\n// Export for use in other modules\nif (typeof window !== 'undefined') {\n    window.FileViewer = fileViewer;\n    \n    // Initialize when DOM is ready\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', () => {\n            fileViewer.initialize();\n        });\n    } else {\n        // DOM is already loaded\n        fileViewer.initialize();\n    }\n}\n\nexport default fileViewer;"],"names":["fileViewer","constructor","this","modal","currentFile","initialized","contentCache","Map","initialize","createModal","setupEventHandlers","console","log","document","body","insertAdjacentHTML","getElementById","styles","head","addEventListener","hide","e","target","key","classList","contains","copyContent","show","filePath","add","textContent","loadFileContent","remove","codeContent","has","displayContent","get","window","socket","connected","error","Error","responsePromise","Promise","resolve","reject","timeoutId","setTimeout","once","data","clearTimeout","file_path","working_dir","workingDirectory","max_size","emit","success","content","set","updateFileInfo","stack","displayError","message","lines","split","length","size","Blob","formatFileSize","fileType","detectFileType","Prism","language","detectLanguage","className","highlightElement","errorMessage","errorHtml","innerHTML","type","bytes","i","Math","floor","round","pow","path","ext","pop","toLowerCase","py","js","ts","jsx","tsx","html","css","json","xml","yaml","yml","md","txt","sh","bash","sql","go","rs","java","cpp","c","cs","rb","php","button","navigator","clipboard","writeText","originalText","err","alert","showFileViewerModal","fileViewerInstance","FileViewer","readyState"],"mappings":"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"}