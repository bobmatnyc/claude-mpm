{"version":3,"file":"code-tree.js","sources":["../../js/components/code-tree.js"],"sourcesContent":["/**\n * Code Tree Component\n * \n * D3.js-based tree visualization for displaying AST-based code structure.\n * Shows modules, classes, functions, and methods with complexity-based coloring.\n * Provides real-time updates during code analysis.\n * \n * ===== CACHE CLEAR INSTRUCTIONS =====\n * If tree still moves/centers after update:\n * 1. Hard refresh: Ctrl+Shift+R (Windows/Linux) or Cmd+Shift+R (Mac)\n * 2. Or open DevTools (F12) → Network tab → Check \"Disable cache\" \n * 3. Or clear browser cache: Ctrl+Shift+Delete → Clear cached images and files\n * \n * Version: 2025-08-29T15:30:00Z - ALL CENTERING REMOVED\n * Last Update: Completely disabled tree centering/movement on node clicks\n */\n\nclass CodeTree {\n    constructor() {\n        this.container = null;\n        this.svg = null;\n        this.treeData = null;\n        this.root = null;\n        this.treeLayout = null;\n        this.treeGroup = null;\n        this.nodes = new Map();\n        this.stats = {\n            files: 0,\n            classes: 0,\n            functions: 0,\n            methods: 0,\n            lines: 0\n        };\n        // Radial layout settings\n        this.isRadialLayout = true;  // Toggle for radial vs linear layout\n        this.margin = {top: 20, right: 20, bottom: 20, left: 20};\n        this.width = 960 - this.margin.left - this.margin.right;\n        this.height = 600 - this.margin.top - this.margin.bottom;\n        this.radius = Math.min(this.width, this.height) / 2;\n        this.nodeId = 0;\n        this.duration = 750;\n        this.languageFilter = 'all';\n        this.searchTerm = '';\n        this.tooltip = null;\n        this.initialized = false;\n        this.analyzing = false;\n        this.selectedNode = null;\n        this.socket = null;\n        this.autoDiscovered = false;  // Track if auto-discovery has been done\n        this.zoom = null;  // Store zoom behavior\n        this.activeNode = null;  // Track currently active node\n        this.loadingNodes = new Set();  // Track nodes that are loading\n        this.bulkLoadMode = false;  // Track bulk loading preference\n        this.expandedPaths = new Set();  // Track which paths are expanded\n    }\n\n    /**\n     * Initialize the code tree visualization\n     */\n    initialize() {\n        if (this.initialized) {\n            return;\n        }\n        \n        this.container = document.getElementById('code-tree-container');\n        if (!this.container) {\n            console.error('Code tree container not found');\n            return;\n        }\n        \n        // Check if tab is visible\n        const tabPanel = document.getElementById('code-tab');\n        if (!tabPanel) {\n            console.error('Code tab panel not found');\n            return;\n        }\n        \n        // Check if working directory is set\n        const workingDir = this.getWorkingDirectory();\n        if (!workingDir || workingDir === 'Loading...' || workingDir === 'Not selected') {\n            this.showNoWorkingDirectoryMessage();\n            this.initialized = true;\n            return;\n        }\n        \n        // Initialize always\n        this.setupControls();\n        this.initializeTreeData();\n        this.subscribeToEvents();\n        \n        // Set initial status message\n        const breadcrumbContent = document.getElementById('breadcrumb-content');\n        if (breadcrumbContent && !this.analyzing) {\n            this.updateActivityTicker('Loading project structure...', 'info');\n        }\n        \n        // Only create visualization if tab is visible\n        if (tabPanel.classList.contains('active')) {\n            this.createVisualization();\n            if (this.root && this.svg) {\n                this.update(this.root);\n            }\n            // Auto-discover root level when tab is active\n            this.autoDiscoverRootLevel();\n        }\n        \n        this.initialized = true;\n    }\n\n    /**\n     * Render visualization when tab becomes visible\n     */\n    renderWhenVisible() {\n        // Check if working directory is set\n        const workingDir = this.getWorkingDirectory();\n        if (!workingDir || workingDir === 'Loading...' || workingDir === 'Not selected') {\n            this.showNoWorkingDirectoryMessage();\n            return;\n        }\n        \n        // If no directory message is shown, remove it\n        this.removeNoWorkingDirectoryMessage();\n        \n        if (!this.initialized) {\n            this.initialize();\n            return;\n        }\n        \n        if (!this.svg) {\n            this.createVisualization();\n            if (this.svg && this.treeGroup) {\n                this.update(this.root);\n            }\n        } else {\n            // Force update with current data\n            if (this.root && this.svg) {\n                this.update(this.root);\n            }\n        }\n        \n        // Auto-discover root level if not done yet\n        if (!this.autoDiscovered) {\n            this.autoDiscoverRootLevel();\n        }\n    }\n\n    /**\n     * Set up control event handlers\n     */\n    setupControls() {\n        // Remove analyze and cancel button handlers since they're no longer in the UI\n\n        const languageFilter = document.getElementById('language-filter');\n        if (languageFilter) {\n            languageFilter.addEventListener('change', (e) => {\n                this.languageFilter = e.target.value;\n                this.filterTree();\n            });\n        }\n\n        const searchBox = document.getElementById('code-search');\n        if (searchBox) {\n            searchBox.addEventListener('input', (e) => {\n                this.searchTerm = e.target.value.toLowerCase();\n                this.filterTree();\n            });\n        }\n\n        const expandBtn = document.getElementById('code-expand-all');\n        if (expandBtn) {\n            expandBtn.addEventListener('click', () => this.expandAll());\n        }\n        \n        const collapseBtn = document.getElementById('code-collapse-all');\n        if (collapseBtn) {\n            collapseBtn.addEventListener('click', () => this.collapseAll());\n        }\n        \n        const resetZoomBtn = document.getElementById('code-reset-zoom');\n        if (resetZoomBtn) {\n            resetZoomBtn.addEventListener('click', () => this.resetZoom());\n        }\n        \n        const toggleLegendBtn = document.getElementById('code-toggle-legend');\n        if (toggleLegendBtn) {\n            toggleLegendBtn.addEventListener('click', () => this.toggleLegend());\n        }\n        \n        // Listen for working directory changes\n        document.addEventListener('workingDirectoryChanged', (e) => {\n            this.onWorkingDirectoryChanged(e.detail.directory);\n        });\n    }\n    \n    /**\n     * Handle working directory change\n     */\n    onWorkingDirectoryChanged(newDirectory) {\n        if (!newDirectory || newDirectory === 'Loading...' || newDirectory === 'Not selected') {\n            // Show no directory message\n            this.showNoWorkingDirectoryMessage();\n            // Reset tree state\n            this.autoDiscovered = false;\n            this.analyzing = false;\n            this.nodes.clear();\n            this.loadingNodes.clear();  // Clear loading state tracking\n            this.stats = {\n                files: 0,\n                classes: 0,\n                functions: 0,\n                methods: 0,\n                lines: 0\n            };\n            this.updateStats();\n            return;\n        }\n        \n        // Remove any no directory message\n        this.removeNoWorkingDirectoryMessage();\n        \n        // Reset discovery state for new directory\n        this.autoDiscovered = false;\n        this.analyzing = false;\n        \n        // Clear existing data\n        this.nodes.clear();\n        this.loadingNodes.clear();  // Clear loading state tracking\n        this.stats = {\n            files: 0,\n            classes: 0,\n            functions: 0,\n            methods: 0,\n            lines: 0\n        };\n        \n        // Re-initialize with new directory\n        this.initializeTreeData();\n        if (this.svg) {\n            this.update(this.root);\n        }\n        \n        // Check if Code tab is currently active\n        const tabPanel = document.getElementById('code-tab');\n        if (tabPanel && tabPanel.classList.contains('active')) {\n            // Auto-discover in the new directory\n            this.autoDiscoverRootLevel();\n        }\n        \n        this.updateStats();\n    }\n\n    /**\n     * Show loading spinner\n     */\n    showLoading() {\n        let loadingDiv = document.getElementById('code-tree-loading');\n        if (!loadingDiv) {\n            // Create loading element if it doesn't exist\n            const container = document.getElementById('code-tree-container');\n            if (container) {\n                loadingDiv = document.createElement('div');\n                loadingDiv.id = 'code-tree-loading';\n                loadingDiv.innerHTML = `\n                    <div class=\"code-tree-spinner\"></div>\n                    <div class=\"code-tree-loading-text\">Analyzing code structure...</div>\n                `;\n                container.appendChild(loadingDiv);\n            }\n        }\n        if (loadingDiv) {\n            loadingDiv.classList.remove('hidden');\n        }\n    }\n\n    /**\n     * Hide loading spinner\n     */\n    hideLoading() {\n        const loadingDiv = document.getElementById('code-tree-loading');\n        if (loadingDiv) {\n            loadingDiv.classList.add('hidden');\n        }\n    }\n\n    /**\n     * Create the D3.js visualization\n     */\n    createVisualization() {\n        if (typeof d3 === 'undefined') {\n            console.error('D3.js is not loaded');\n            return;\n        }\n\n        const container = d3.select('#code-tree-container');\n        container.selectAll('*').remove();\n        \n        // Add tree controls toolbar\n        this.addTreeControls();\n        \n        // Add breadcrumb navigation\n        this.addBreadcrumb();\n\n        if (!container || !container.node()) {\n            console.error('Code tree container not found');\n            return;\n        }\n\n        // Calculate dimensions\n        const containerNode = container.node();\n        const containerWidth = containerNode.clientWidth || 960;\n        const containerHeight = containerNode.clientHeight || 600;\n\n        this.width = containerWidth - this.margin.left - this.margin.right;\n        this.height = containerHeight - this.margin.top - this.margin.bottom;\n        this.radius = Math.min(this.width, this.height) / 2;\n\n        // Create SVG\n        this.svg = container.append('svg')\n            .attr('width', containerWidth)\n            .attr('height', containerHeight);\n\n        // Create tree group with appropriate centering\n        const centerX = containerWidth / 2;\n        const centerY = containerHeight / 2;\n        \n        // Different initial positioning for different layouts\n        if (this.isRadialLayout) {\n            // Radial: center in the middle of the canvas\n            this.treeGroup = this.svg.append('g')\n                .attr('transform', `translate(${centerX},${centerY})`);\n        } else {\n            // Linear: start from left with some margin\n            this.treeGroup = this.svg.append('g')\n                .attr('transform', `translate(${this.margin.left + 100},${centerY})`);\n        }\n\n        // Create tree layout with improved spacing\n        if (this.isRadialLayout) {\n            // Use d3.cluster for better radial distribution\n            this.treeLayout = d3.cluster()\n                .size([2 * Math.PI, this.radius - 100])\n                .separation((a, b) => {\n                    // Enhanced separation for radial layout\n                    if (a.parent == b.parent) {\n                        // Base separation on tree depth for better spacing\n                        const depthFactor = Math.max(1, 4 - a.depth);\n                        // Increase spacing for nodes with many siblings\n                        const siblingCount = a.parent ? (a.parent.children?.length || 1) : 1;\n                        const siblingFactor = siblingCount > 5 ? 2 : (siblingCount > 3 ? 1.5 : 1);\n                        // More spacing at outer levels where circumference is larger\n                        const radiusFactor = 1 + (a.depth * 0.2);\n                        return (depthFactor * siblingFactor) / (a.depth || 1) * radiusFactor;\n                    } else {\n                        // Different parents - ensure enough space\n                        return 4 / (a.depth || 1);\n                    }\n                });\n        } else {\n            // Linear layout with dynamic sizing based on node count\n            // Use nodeSize for consistent spacing regardless of tree size\n            this.treeLayout = d3.tree()\n                .nodeSize([30, 200])  // Fixed spacing: 30px vertical, 200px horizontal\n                .separation((a, b) => {\n                    // Consistent separation for linear layout\n                    if (a.parent == b.parent) {\n                        // Same parent - standard spacing\n                        return 1;\n                    } else {\n                        // Different parents - slightly more space\n                        return 1.5;\n                    }\n                });\n        }\n\n        // DISABLED: All zoom behavior has been completely disabled to prevent tree movement\n        // The tree should remain completely stationary - no zooming, panning, or centering allowed\n        this.zoom = null;  // Completely disable zoom behavior\n        \n        // Do NOT apply zoom behavior to SVG - this prevents all zoom/pan interactions\n        // this.svg.call(this.zoom);  // DISABLED\n        \n        console.log('[CodeTree] All zoom and pan behavior disabled - tree is now completely stationary');\n\n        // Add controls overlay\n        this.addVisualizationControls();\n\n        // Create tooltip\n        this.tooltip = d3.select('body').append('div')\n            .attr('class', 'code-tree-tooltip')\n            .style('opacity', 0)\n            .style('position', 'absolute')\n            .style('background', 'rgba(0, 0, 0, 0.8)')\n            .style('color', 'white')\n            .style('padding', '8px')\n            .style('border-radius', '4px')\n            .style('font-size', '12px')\n            .style('pointer-events', 'none');\n    }\n\n    /**\n     * Clear all D3 visualization elements\n     */\n    clearD3Visualization() {\n        if (this.treeGroup) {\n            // Remove all existing nodes and links\n            this.treeGroup.selectAll('g.node').remove();\n            this.treeGroup.selectAll('path.link').remove();\n        }\n        // Reset node ID counter for proper tracking\n        this.nodeId = 0;\n    }\n    \n    /**\n     * Initialize tree data structure\n     */\n    initializeTreeData() {\n        const workingDir = this.getWorkingDirectory();\n        const dirName = workingDir ? workingDir.split('/').pop() || 'Project Root' : 'Project Root';\n        \n        // Use '.' as the root path for consistency with relative path handling\n        // The actual working directory is retrieved via getWorkingDirectory() when needed\n        this.treeData = {\n            name: dirName,\n            path: '.',  // Always use '.' for root to simplify path handling\n            type: 'root',\n            children: [],\n            loaded: false,\n            expanded: true  // Start expanded\n        };\n\n        if (typeof d3 !== 'undefined') {\n            this.root = d3.hierarchy(this.treeData);\n            this.root.x0 = this.height / 2;\n            this.root.y0 = 0;\n        }\n    }\n\n    /**\n     * Subscribe to code analysis events\n     */\n    subscribeToEvents() {\n        if (!this.socket) {\n            if (window.socket) {\n                this.socket = window.socket;\n                this.setupEventHandlers();\n            } else if (window.dashboard?.socketClient?.socket) {\n                this.socket = window.dashboard.socketClient.socket;\n                this.setupEventHandlers();\n            } else if (window.socketClient?.socket) {\n                this.socket = window.socketClient.socket;\n                this.setupEventHandlers();\n            }\n        }\n    }\n\n    /**\n     * Automatically discover root-level objects when tab opens\n     */\n    autoDiscoverRootLevel() {\n        if (this.autoDiscovered || this.analyzing) {\n            return;\n        }\n        \n        // Update activity ticker\n        this.updateActivityTicker('🔍 Discovering project structure...', 'info');\n        \n        // Get working directory\n        const workingDir = this.getWorkingDirectory();\n        if (!workingDir || workingDir === 'Loading...' || workingDir === 'Not selected') {\n            console.warn('Cannot auto-discover: no working directory set');\n            this.showNoWorkingDirectoryMessage();\n            return;\n        }\n        \n        // Ensure we have an absolute path\n        if (!workingDir.startsWith('/') && !workingDir.match(/^[A-Z]:\\\\/)) {\n            console.error('Working directory is not absolute:', workingDir);\n            this.showNotification('Invalid working directory path', 'error');\n            return;\n        }\n        \n        \n        this.autoDiscovered = true;\n        this.analyzing = true;\n        \n        // Clear any existing nodes\n        this.nodes.clear();\n        this.loadingNodes.clear();  // Clear loading state for fresh discovery\n        this.stats = {\n            files: 0,\n            classes: 0,\n            functions: 0,\n            methods: 0,\n            lines: 0\n        };\n        \n        // Subscribe to events if not already done\n        if (this.socket && !this.socket.hasListeners('code:node:found')) {\n            this.setupEventHandlers();\n        }\n        \n        // Update tree data with working directory as the root\n        const dirName = workingDir.split('/').pop() || 'Project Root';\n        this.treeData = {\n            name: dirName,\n            path: '.',  // Use '.' for root to maintain consistency with relative path handling\n            type: 'root',\n            children: [],\n            loaded: false,\n            expanded: true  // Start expanded to show discovered items\n        };\n        \n        if (typeof d3 !== 'undefined') {\n            this.root = d3.hierarchy(this.treeData);\n            this.root.x0 = this.height / 2;\n            this.root.y0 = 0;\n        }\n        \n        // Update UI\n        this.showLoading();\n        this.updateBreadcrumb(`Discovering structure in ${dirName}...`, 'info');\n        \n        // Get selected languages from checkboxes\n        const selectedLanguages = [];\n        document.querySelectorAll('.language-checkbox:checked').forEach(cb => {\n            selectedLanguages.push(cb.value);\n        });\n        \n        // Get ignore patterns\n        const ignorePatterns = document.getElementById('ignore-patterns')?.value || '';\n        \n        // Enhanced debug logging\n        \n        // Request top-level discovery with working directory\n        const requestPayload = {\n            path: workingDir,  // Use working directory instead of '.'\n            depth: 'top_level',\n            languages: selectedLanguages,\n            ignore_patterns: ignorePatterns,\n            request_id: `discover_${Date.now()}`  // Add request ID for tracking\n        };\n        \n        // Sending top-level discovery request\n        \n        if (this.socket) {\n            this.socket.emit('code:discover:top_level', requestPayload);\n        }\n        \n        // Update stats display\n        this.updateStats();\n    }\n    \n    /**\n     * Legacy analyzeCode method - redirects to auto-discovery\n     */\n    analyzeCode() {\n        if (this.analyzing) {\n            return;\n        }\n\n        // Redirect to auto-discovery\n        this.autoDiscoverRootLevel();\n    }\n\n    /**\n     * Cancel ongoing analysis - removed since we no longer have a cancel button\n     */\n    cancelAnalysis() {\n        this.analyzing = false;\n        this.hideLoading();\n        this.loadingNodes.clear();  // Clear loading state on cancellation\n\n        if (this.socket) {\n            this.socket.emit('code:analysis:cancel');\n        }\n    }\n\n    /**\n     * Add tree control toolbar with expand/collapse and other controls\n     */\n    addTreeControls() {\n        const container = d3.select('#code-tree-container');\n        \n        // Remove any existing controls\n        container.select('.tree-controls-toolbar').remove();\n        \n        const toolbar = container.append('div')\n            .attr('class', 'tree-controls-toolbar');\n            \n        // Expand All button\n        toolbar.append('button')\n            .attr('class', 'tree-control-btn')\n            .attr('title', 'Expand all loaded directories')\n            .text('⊞')\n            .on('click', () => this.expandAll());\n            \n        // Collapse All button  \n        toolbar.append('button')\n            .attr('class', 'tree-control-btn')\n            .attr('title', 'Collapse all directories')\n            .text('⊟')\n            .on('click', () => this.collapseAll());\n            \n        // Bulk Load Toggle\n        toolbar.append('button')\n            .attr('class', 'tree-control-btn')\n            .attr('id', 'bulk-load-toggle')\n            .attr('title', 'Toggle bulk loading (load 2 levels at once)')\n            .text('↕')\n            .on('click', () => this.toggleBulkLoad());\n            \n        // Layout Toggle\n        toolbar.append('button')\n            .attr('class', 'tree-control-btn')\n            .attr('title', 'Toggle between radial and linear layouts')\n            .text('◎')\n            .on('click', () => this.toggleLayout());\n            \n        // Path Search\n        const searchInput = toolbar.append('input')\n            .attr('class', 'tree-control-btn')\n            .attr('type', 'text')\n            .attr('placeholder', 'Search...')\n            .attr('title', 'Search for files and directories')\n            .style('width', '120px')\n            .style('text-align', 'left')\n            .on('input', (event) => this.searchTree(event.target.value))\n            .on('keydown', (event) => {\n                if (event.key === 'Escape') {\n                    event.target.value = '';\n                    this.searchTree('');\n                }\n            });\n    }\n\n    /**\n     * Add breadcrumb navigation\n     */\n    addBreadcrumb() {\n        const container = d3.select('#code-tree-container');\n        \n        // Remove any existing breadcrumb\n        container.select('.tree-breadcrumb').remove();\n        \n        const breadcrumb = container.append('div')\n            .attr('class', 'tree-breadcrumb');\n            \n        const pathDiv = breadcrumb.append('div')\n            .attr('class', 'breadcrumb-path')\n            .attr('id', 'tree-breadcrumb-path');\n            \n        // Initialize with working directory\n        this.updateBreadcrumbPath('/');\n    }\n\n    /**\n     * Update breadcrumb path based on current navigation\n     */\n    updateBreadcrumbPath(currentPath) {\n        const pathDiv = d3.select('#tree-breadcrumb-path');\n        pathDiv.selectAll('*').remove();\n        \n        const workingDir = this.getWorkingDirectory();\n        if (!workingDir || workingDir === 'Loading...' || workingDir === 'Not selected') {\n            pathDiv.text('No project selected');\n            return;\n        }\n        \n        // Build path segments\n        const segments = currentPath === '/' ? \n            [workingDir.split('/').pop() || 'Root'] :\n            currentPath.split('/').filter(s => s.length > 0);\n            \n        segments.forEach((segment, index) => {\n            if (index > 0) {\n                pathDiv.append('span')\n                    .attr('class', 'breadcrumb-separator')\n                    .text('/');\n            }\n            \n            pathDiv.append('span')\n                .attr('class', index === segments.length - 1 ? 'breadcrumb-segment current' : 'breadcrumb-segment')\n                .text(segment)\n                .on('click', () => {\n                    if (index < segments.length - 1) {\n                        // Navigate to parent path\n                        const parentPath = segments.slice(0, index + 1).join('/');\n                        this.navigateToPath(parentPath);\n                    }\n                });\n        });\n    }\n\n    /**\n     * Expand all currently loaded directories\n     */\n    expandAll() {\n        if (!this.root) return;\n        \n        const expandNode = (node) => {\n            if (node.data.type === 'directory' && node.data.loaded === true) {\n                if (node._children) {\n                    node.children = node._children;\n                    node._children = null;\n                    node.data.expanded = true;\n                }\n            }\n            if (node.children) {\n                node.children.forEach(expandNode);\n            }\n        };\n        \n        expandNode(this.root);\n        this.update(this.root);\n        this.showNotification('Expanded all loaded directories', 'success');\n    }\n\n    /**\n     * Collapse all directories to root level\n     */\n    collapseAll() {\n        if (!this.root) return;\n        \n        const collapseNode = (node) => {\n            if (node.data.type === 'directory' && node.children) {\n                node._children = node.children;\n                node.children = null;\n                node.data.expanded = false;\n            }\n            if (node._children) {\n                node._children.forEach(collapseNode);\n            }\n        };\n        \n        collapseNode(this.root);\n        this.update(this.root);\n        this.showNotification('Collapsed all directories', 'info');\n    }\n\n    /**\n     * Toggle bulk loading mode\n     */\n    toggleBulkLoad() {\n        this.bulkLoadMode = !this.bulkLoadMode;\n        const button = d3.select('#bulk-load-toggle');\n        \n        if (this.bulkLoadMode) {\n            button.classed('active', true);\n            this.showNotification('Bulk load enabled - will load 2 levels deep', 'info');\n        } else {\n            button.classed('active', false);\n            this.showNotification('Bulk load disabled - load 1 level at a time', 'info');\n        }\n    }\n\n    /**\n     * Navigate to a specific path in the tree\n     */\n    navigateToPath(path) {\n        // Implementation for navigating to a specific path\n        // This would expand the tree to show the specified path\n        this.updateBreadcrumbPath(path);\n        this.showNotification(`Navigating to: ${path}`, 'info');\n    }\n\n    /**\n     * Search the tree for matching files/directories\n     */\n    searchTree(query) {\n        if (!this.root || !this.treeGroup) return;\n        \n        const searchTerm = query.toLowerCase().trim();\n        \n        // Clear previous search highlights\n        this.treeGroup.selectAll('.code-node')\n            .classed('search-match', false);\n            \n        if (!searchTerm) {\n            return; // No search term, just clear highlights\n        }\n        \n        // Find matching nodes\n        const matchingNodes = [];\n        const searchNode = (node) => {\n            const name = (node.data.name || '').toLowerCase();\n            const path = (node.data.path || '').toLowerCase();\n            \n            if (name.includes(searchTerm) || path.includes(searchTerm)) {\n                matchingNodes.push(node);\n            }\n            \n            if (node.children) {\n                node.children.forEach(searchNode);\n            }\n            if (node._children) {\n                node._children.forEach(searchNode);\n            }\n        };\n        \n        searchNode(this.root);\n        \n        // Highlight matching nodes\n        if (matchingNodes.length > 0) {\n            // Get all current nodes in the tree\n            const allNodes = this.treeGroup.selectAll('.code-node').data();\n            \n            matchingNodes.forEach(matchNode => {\n                // Find the corresponding DOM node\n                const domNode = this.treeGroup.selectAll('.code-node')\n                    .filter(d => d.data.path === matchNode.data.path);\n                domNode.classed('search-match', true);\n                \n                // Expand parent path to show the match\n                this.expandPathToNode(matchNode);\n            });\n            \n            this.showNotification(`Found ${matchingNodes.length} matches`, 'success');\n            \n            // Auto-center on first match if in radial layout - REMOVED\n            // Centering functionality has been disabled to prevent unwanted repositioning\n            // if (matchingNodes.length > 0 && this.isRadialLayout) {\n            //     this.centerOnNode ? this.centerOnNode(matchingNodes[0]) : this.centerOnNodeRadial(matchingNodes[0]);\n            // }\n        } else {\n            this.showNotification('No matches found', 'info');\n        }\n    }\n\n    /**\n     * Expand the tree path to show a specific node\n     */\n    expandPathToNode(targetNode) {\n        const pathToExpand = [];\n        let current = targetNode.parent;\n        \n        // Build path from node to root\n        while (current && current !== this.root) {\n            pathToExpand.unshift(current);\n            current = current.parent;\n        }\n        \n        // Expand each node in the path\n        pathToExpand.forEach(node => {\n            if (node.data.type === 'directory' && node._children) {\n                node.children = node._children;\n                node._children = null;\n                node.data.expanded = true;\n            }\n        });\n        \n        // Update the visualization if we expanded anything\n        if (pathToExpand.length > 0) {\n            this.update(this.root);\n        }\n    }\n\n    /**\n     * Create the events display area\n     */\n    createEventsDisplay() {\n        let eventsContainer = document.getElementById('analysis-events');\n        if (!eventsContainer) {\n            const treeContainer = document.getElementById('code-tree-container');\n            if (treeContainer) {\n                eventsContainer = document.createElement('div');\n                eventsContainer.id = 'analysis-events';\n                eventsContainer.className = 'analysis-events';\n                eventsContainer.style.display = 'none';\n                treeContainer.appendChild(eventsContainer);\n            }\n        }\n    }\n\n    /**\n     * Clear the events display\n     */\n    clearEventsDisplay() {\n        const eventsContainer = document.getElementById('analysis-events');\n        if (eventsContainer) {\n            eventsContainer.innerHTML = '';\n            eventsContainer.style.display = 'block';\n        }\n    }\n\n    /**\n     * Add an event to the display\n     */\n    addEventToDisplay(message, type = 'info') {\n        const eventsContainer = document.getElementById('analysis-events');\n        if (eventsContainer) {\n            const eventEl = document.createElement('div');\n            eventEl.className = 'analysis-event';\n            eventEl.style.borderLeftColor = type === 'warning' ? '#f59e0b' : \n                                          type === 'error' ? '#ef4444' : '#3b82f6';\n            \n            const timestamp = new Date().toLocaleTimeString();\n            eventEl.innerHTML = `<span style=\"color: #718096;\">[${timestamp}]</span> ${message}`;\n            \n            eventsContainer.appendChild(eventEl);\n            // Auto-scroll to bottom\n            eventsContainer.scrollTop = eventsContainer.scrollHeight;\n        }\n    }\n\n    /**\n     * Setup Socket.IO event handlers\n     */\n    setupEventHandlers() {\n        if (!this.socket) return;\n\n        // Analysis lifecycle events\n        this.socket.on('code:analysis:accepted', (data) => this.onAnalysisAccepted(data));\n        this.socket.on('code:analysis:queued', (data) => this.onAnalysisQueued(data));\n        this.socket.on('code:analysis:start', (data) => this.onAnalysisStart(data));\n        this.socket.on('code:analysis:complete', (data) => this.onAnalysisComplete(data));\n        this.socket.on('code:analysis:cancelled', (data) => this.onAnalysisCancelled(data));\n        this.socket.on('code:analysis:error', (data) => this.onAnalysisError(data));\n\n        // Node discovery events\n        this.socket.on('code:top_level:discovered', (data) => this.onTopLevelDiscovered(data));\n        this.socket.on('code:directory:discovered', (data) => this.onDirectoryDiscovered(data));\n        this.socket.on('code:file:discovered', (data) => this.onFileDiscovered(data));\n        this.socket.on('code:file:analyzed', (data) => this.onFileAnalyzed(data));\n        this.socket.on('code:node:found', (data) => this.onNodeFound(data));\n\n        // Progress updates\n        this.socket.on('code:analysis:progress', (data) => this.onProgressUpdate(data));\n        \n        // Lazy loading responses\n        this.socket.on('code:directory:contents', (data) => {\n            // Update the requested directory with its contents\n            if (data.path) {\n                // Convert absolute path back to relative path to match tree nodes\n                let searchPath = data.path;\n                const workingDir = this.getWorkingDirectory();\n                if (workingDir && searchPath.startsWith(workingDir)) {\n                    // Remove working directory prefix to get relative path\n                    searchPath = searchPath.substring(workingDir.length).replace(/^\\//, '');\n                    // If empty after removing prefix, it's the root\n                    if (!searchPath) {\n                        searchPath = '.';\n                    }\n                }\n                \n                const node = this.findNodeByPath(searchPath);\n                if (node && data.children) {\n                    // Find D3 node and remove loading pulse (use searchPath, not data.path)\n                    const d3Node = this.findD3NodeByPath(searchPath);\n                    if (d3Node && this.loadingNodes.has(searchPath)) {\n                        this.removeLoadingPulse(d3Node);\n                        this.loadingNodes.delete(searchPath);  // Remove from loading set\n                        console.log('🎯 [SUBDIRECTORY LOADING] Successfully completed and removed from loading set:', searchPath);\n                    }\n                    node.children = data.children.map(child => {\n                        // Construct full path for child by combining parent path with child name\n                        // The backend now returns just the item name, not the full path\n                        let childPath;\n                        if (searchPath === '.' || searchPath === '') {\n                            // Root level - child path is just the name\n                            childPath = child.name || child.path;\n                        } else {\n                            // Subdirectory - combine parent path with child name\n                            // Use child.name (backend returns just the name) or fallback to child.path\n                            const childName = child.name || child.path;\n                            childPath = `${searchPath}/${childName}`;\n                        }\n                        \n                        return {\n                            ...child,\n                            path: childPath,  // Override with constructed path\n                            loaded: child.type === 'directory' ? false : undefined,\n                            analyzed: child.type === 'file' ? false : undefined,\n                            expanded: false,\n                            children: []\n                        };\n                    });\n                    node.loaded = true;\n                    node.expanded = true; // Mark as expanded to show children\n                    \n                    // Update D3 hierarchy and make sure the node is expanded\n                    if (this.root && this.svg) {\n                        // Store old root to preserve expansion state\n                        const oldRoot = this.root;\n                        \n                        // Recreate hierarchy with updated data\n                        this.root = d3.hierarchy(this.treeData);\n                        this.root.x0 = this.height / 2;\n                        this.root.y0 = 0;\n                        \n                        // Preserve expansion state from old tree\n                        this.preserveExpansionState(oldRoot, this.root);\n                        \n                        // Find the D3 node again after hierarchy recreation\n                        const updatedD3Node = this.findD3NodeByPath(searchPath);\n                        if (updatedD3Node) {\n                            // Ensure children are visible (not collapsed)\n                            updatedD3Node.children = updatedD3Node._children || updatedD3Node.children;\n                            updatedD3Node._children = null;\n                            updatedD3Node.data.expanded = true;\n                        }\n                        \n                        this.update(this.root);\n                    }\n                    \n                    // Update stats based on discovered contents\n                    if (data.stats) {\n                        this.stats.files += data.stats.files || 0;\n                        this.stats.directories += data.stats.directories || 0;\n                        this.updateStats();\n                    }\n                    \n                    this.updateBreadcrumb(`Loaded ${data.path}`, 'success');\n                    this.hideLoading();\n                }\n            }\n        });\n        \n        // Top level discovery response\n        this.socket.on('code:top_level:discovered', (data) => {\n            if (data.items && Array.isArray(data.items)) {\n                \n                // Add discovered items to the root node\n                this.treeData.children = data.items.map(item => ({\n                    name: item.name,\n                    path: item.path,\n                    type: item.type,\n                    language: item.type === 'file' ? this.detectLanguage(item.path) : undefined,\n                    size: item.size,\n                    lines: item.lines,\n                    loaded: item.type === 'directory' ? false : undefined,\n                    analyzed: item.type === 'file' ? false : undefined,\n                    expanded: false,\n                    children: []\n                }));\n                \n                this.treeData.loaded = true;\n                \n                // Update stats\n                if (data.stats) {\n                    this.stats = { ...this.stats, ...data.stats };\n                    this.updateStats();\n                }\n                \n                // Update D3 hierarchy\n                if (typeof d3 !== 'undefined') {\n                    // Clear any existing nodes before creating new ones\n                    this.clearD3Visualization();\n                    \n                    // Create new hierarchy\n                    this.root = d3.hierarchy(this.treeData);\n                    this.root.x0 = this.height / 2;\n                    this.root.y0 = 0;\n                    \n                    if (this.svg) {\n                        this.update(this.root);\n                    }\n                }\n                \n                this.analyzing = false;\n                this.hideLoading();\n                this.updateBreadcrumb(`Discovered ${data.items.length} root items`, 'success');\n                this.showNotification(`Found ${data.items.length} items in project root`, 'success');\n            }\n        });\n    }\n\n    /**\n     * Handle analysis start event\n     */\n    onAnalysisStart(data) {\n        this.analyzing = true;\n        const message = data.message || 'Starting code analysis...';\n        \n        // Update activity ticker\n        this.updateActivityTicker('🚀 Starting analysis...', 'info');\n        \n        this.updateBreadcrumb(message, 'info');\n        this.addEventToDisplay(`🚀 ${message}`, 'info');\n        \n        // Initialize or clear the tree\n        if (!this.treeData || this.treeData.children.length === 0) {\n            this.initializeTreeData();\n        }\n        \n        // Reset stats\n        this.stats = { \n            files: 0, \n            classes: 0, \n            functions: 0, \n            methods: 0, \n            lines: 0 \n        };\n        this.updateStats();\n    }\n\n    /**\n     * Handle top-level discovery event (initial root directory scan)\n     */\n    onTopLevelDiscovered(data) {\n        // Received top-level discovery response\n        \n        // Update activity ticker\n        this.updateActivityTicker(`📁 Discovered ${(data.items || []).length} top-level items`, 'success');\n        \n        // Add to events display\n        this.addEventToDisplay(`📁 Found ${(data.items || []).length} top-level items in project root`, 'info');\n        \n        // The root node (with path '.') should receive the children\n        const rootNode = this.findNodeByPath('.');\n        \n        console.log('🔎 Looking for root node with path \".\", found:', rootNode ? {\n            name: rootNode.name,\n            path: rootNode.path,\n            currentChildren: rootNode.children ? rootNode.children.length : 0\n        } : 'NOT FOUND');\n        \n        if (rootNode && data.items) {\n            console.log('🌳 Populating root node with children');\n            \n            // Update the root node with discovered children\n            rootNode.children = data.items.map(child => {\n                // Items at root level get their name as the path\n                const childPath = child.name;\n                \n                console.log(`  Adding child: ${child.name} with path: ${childPath}`);\n                \n                return {\n                    name: child.name,\n                    path: childPath,  // Just the name for top-level items\n                    type: child.type,\n                    loaded: child.type === 'directory' ? false : undefined,\n                    analyzed: child.type === 'file' ? false : undefined,\n                    expanded: false,\n                    children: child.type === 'directory' ? [] : undefined,\n                    size: child.size,\n                    has_code: child.has_code\n                };\n            });\n            \n            rootNode.loaded = true;\n            rootNode.expanded = true;\n            \n            // Update D3 hierarchy and render\n            if (this.root && this.svg) {\n                // Recreate hierarchy with new data\n                this.root = d3.hierarchy(this.treeData);\n                this.root.x0 = this.height / 2;\n                this.root.y0 = 0;\n                \n                // Update the tree visualization\n                this.update(this.root);\n            }\n            \n            // Hide loading and show success\n            this.hideLoading();\n            this.updateBreadcrumb(`Discovered ${data.items.length} items`, 'success');\n            this.showNotification(`Found ${data.items.length} top-level items`, 'success');\n        } else {\n            console.error('❌ Could not find root node to populate');\n            this.showNotification('Failed to populate root directory', 'error');\n        }\n        \n        // Mark analysis as complete\n        this.analyzing = false;\n    }\n    \n    /**\n     * Handle directory discovered event\n     */\n    onDirectoryDiscovered(data) {\n        // CRITICAL DEBUG: Log raw data received\n        console.log('🔴 [RAW DATA] Exact data received from backend:', data);\n        console.log('🔴 [RAW DATA] Data type:', typeof data);\n        console.log('🔴 [RAW DATA] Data keys:', Object.keys(data));\n        console.log('🔴 [RAW DATA] Children field:', data.children);\n        console.log('🔴 [RAW DATA] Children type:', typeof data.children);\n        console.log('🔴 [RAW DATA] Is children array?:', Array.isArray(data.children));\n        console.log('🔴 [RAW DATA] Children length:', data.children ? data.children.length : 'undefined');\n        \n        // Update activity ticker first\n        this.updateActivityTicker(`📁 Discovered: ${data.name || 'directory'}`);\n        \n        // Add to events display\n        this.addEventToDisplay(`📁 Found ${(data.children || []).length} items in: ${data.name || data.path}`, 'info');\n        \n        console.log('✅ [SUBDIRECTORY LOADING] Received directory discovery response:', {\n            path: data.path,\n            name: data.name,\n            childrenCount: (data.children || []).length,\n            children: (data.children || []).map(c => ({ name: c.name, type: c.type })),\n            workingDir: this.getWorkingDirectory(),\n            fullEventData: data\n        });\n        \n        // Convert absolute path back to relative path to match tree nodes\n        let searchPath = data.path;\n        const workingDir = this.getWorkingDirectory();\n        if (workingDir && searchPath.startsWith(workingDir)) {\n            // Remove working directory prefix to get relative path\n            searchPath = searchPath.substring(workingDir.length).replace(/^\\//, '');\n            // If empty after removing prefix, it's the root\n            if (!searchPath) {\n                searchPath = '.';\n            }\n        }\n        \n        console.log('🔎 Searching for node with path:', searchPath);\n        \n        // Find the node that was clicked to trigger this discovery\n        const node = this.findNodeByPath(searchPath);\n        \n        console.log('🔍 Node search result:', {\n            searchPath: searchPath,\n            nodeFound: !!node,\n            nodeName: node?.name,\n            nodePath: node?.path,\n            nodeChildren: node?.children?.length,\n            dataHasChildren: !!data.children,\n            dataChildrenLength: data.children?.length\n        });\n        \n        // Debug: log all paths in the tree if node not found\n        if (!node) {\n            console.warn('Node not found! Logging all paths in tree:');\n            this.logAllPaths(this.treeData);\n        }\n        \n        // Located target node for expansion\n        \n        // Handle both cases: when children exist and when directory is empty\n        if (node) {\n            console.log('📦 Node found, checking children:', {\n                nodeFound: true,\n                dataHasChildren: 'children' in data,\n                dataChildrenIsArray: Array.isArray(data.children),\n                dataChildrenLength: data.children?.length,\n                dataChildrenValue: data.children\n            });\n            \n            if (data.children) {\n                console.log(`📂 Updating node ${node.name} with ${data.children.length} children`);\n                // Update the node with discovered children\n                node.children = data.children.map(child => {\n                // Construct full path for child by combining parent path with child name\n                // The backend now returns just the item name, not the full path\n                let childPath;\n                if (searchPath === '.' || searchPath === '') {\n                    // Root level - child path is just the name\n                    childPath = child.name || child.path;\n                } else {\n                    // Subdirectory - combine parent path with child name\n                    // Use child.name (backend returns just the name) or fallback to child.path\n                    const childName = child.name || child.path;\n                    childPath = `${searchPath}/${childName}`;\n                }\n                \n                return {\n                    name: child.name,\n                    path: childPath,  // Use constructed path instead of child.path\n                    type: child.type,\n                    loaded: child.type === 'directory' ? false : undefined,\n                    analyzed: child.type === 'file' ? false : undefined,\n                    expanded: false,\n                    children: child.type === 'directory' ? [] : undefined,\n                    size: child.size,\n                    has_code: child.has_code\n                };\n            });\n            node.loaded = true;\n            node.expanded = true;\n            \n            // Find D3 node and remove loading pulse (use searchPath, not data.path)\n            const d3Node = this.findD3NodeByPath(searchPath);\n            if (d3Node) {\n                // Remove loading animation\n                if (this.loadingNodes.has(searchPath)) {\n                    this.removeLoadingPulse(d3Node);\n                    this.loadingNodes.delete(searchPath);  // Remove from loading set\n                    console.log('🎯 [SUBDIRECTORY LOADING] Successfully completed and removed from loading set (hierarchy update):', searchPath);\n                }\n            }\n            \n            // Update D3 hierarchy and redraw with expanded node\n            if (this.root && this.svg) {\n                // Store old root to preserve expansion state\n                const oldRoot = this.root;\n                \n                // Recreate hierarchy with updated data\n                this.root = d3.hierarchy(this.treeData);\n                \n                // Restore positions for smooth animation\n                this.root.x0 = this.height / 2;\n                this.root.y0 = 0;\n                \n                // Preserve expansion state from old tree\n                this.preserveExpansionState(oldRoot, this.root);\n                \n                // Find the D3 node again after hierarchy recreation\n                const updatedD3Node = this.findD3NodeByPath(searchPath);\n                if (updatedD3Node && updatedD3Node.data.children && updatedD3Node.data.children.length > 0) {\n                    // Ensure the node is expanded to show children\n                    updatedD3Node.children = updatedD3Node._children || updatedD3Node.children;\n                    updatedD3Node._children = null;\n                    // Mark data as expanded\n                    updatedD3Node.data.expanded = true;\n                }\n                \n                this.update(this.root);\n            }\n            \n                // Provide better feedback for empty vs populated directories\n                if (node.children.length === 0) {\n                    this.updateBreadcrumb(`Empty directory: ${node.name}`, 'info');\n                    this.showNotification(`Directory \"${node.name}\" is empty`, 'info');\n                } else {\n                    this.updateBreadcrumb(`Loaded ${node.children.length} items from ${node.name}`, 'success');\n                    this.showNotification(`Loaded ${node.children.length} items from \"${node.name}\"`, 'success');\n                }\n            } else {\n                // data.children is undefined or null - should not happen if backend is working correctly\n                console.error('❌ No children data received for directory:', {\n                    path: searchPath,\n                    dataKeys: Object.keys(data),\n                    fullData: data\n                });\n                this.updateBreadcrumb(`Error loading ${node.name}`, 'error');\n                this.showNotification(`Failed to load directory contents`, 'error');\n            }\n            this.updateStats();\n        } else if (!node) {\n            console.error('❌ [SUBDIRECTORY LOADING] Node not found for path:', {\n                searchPath,\n                originalPath: data.path,\n                workingDir: this.getWorkingDirectory(),\n                allTreePaths: this.getAllTreePaths(this.treeData)\n            });\n            this.showNotification(`Could not find directory \"${searchPath}\" in tree`, 'error');\n            this.logAllPaths(this.treeData);\n        } else if (node && !data.children) {\n            console.warn('⚠️ [SUBDIRECTORY LOADING] Directory response has no children:', {\n                path: data.path,\n                searchPath,\n                nodeExists: !!node,\n                dataKeys: Object.keys(data),\n                fullData: data\n            });\n            // This might be a top-level directory discovery\n            const pathParts = data.path ? data.path.split('/').filter(p => p) : [];\n            const isTopLevel = pathParts.length === 1;\n            \n            if (isTopLevel || data.forceAdd) {\n                const dirNode = {\n                    name: data.name || pathParts[pathParts.length - 1] || 'Unknown',\n                    path: data.path,\n                    type: 'directory',\n                    children: [],\n                    loaded: false,\n                    expanded: false,\n                    stats: data.stats || {}\n                };\n                \n                this.addNodeToTree(dirNode, data.parent || '');\n                this.updateBreadcrumb(`Discovered: ${data.path}`, 'info');\n            }\n        }\n    }\n\n    /**\n     * Handle file discovered event\n     */\n    onFileDiscovered(data) {\n        // Update activity ticker\n        const fileName = data.name || (data.path ? data.path.split('/').pop() : 'file');\n        this.updateActivityTicker(`📄 Found: ${fileName}`);\n        \n        // Add to events display\n        this.addEventToDisplay(`📄 Discovered: ${data.path || 'Unknown file'}`, 'info');\n        \n        const pathParts = data.path ? data.path.split('/').filter(p => p) : [];\n        const parentPath = pathParts.slice(0, -1).join('/');\n        \n        const fileNode = {\n            name: data.name || pathParts[pathParts.length - 1] || 'Unknown',\n            path: data.path,\n            type: 'file',\n            language: data.language || this.detectLanguage(data.path),\n            size: data.size || 0,\n            lines: data.lines || 0,\n            children: [],\n            analyzed: false\n        };\n        \n        this.addNodeToTree(fileNode, parentPath);\n        this.stats.files++;\n        this.updateStats();\n        this.updateBreadcrumb(`Found: ${data.path}`, 'info');\n    }\n\n    /**\n     * Handle file analyzed event\n     */\n    onFileAnalyzed(data) {\n        // Remove loading pulse if this file was being analyzed\n        const d3Node = this.findD3NodeByPath(data.path);\n        if (d3Node && this.loadingNodes.has(data.path)) {\n            this.removeLoadingPulse(d3Node);\n            this.loadingNodes.delete(data.path);  // Remove from loading set\n        }\n        // Update activity ticker\n        if (data.path) {\n            const fileName = data.path.split('/').pop();\n            this.updateActivityTicker(`🔍 Analyzed: ${fileName}`);\n        }\n        \n        const fileNode = this.findNodeByPath(data.path);\n        if (fileNode) {\n            fileNode.analyzed = true;\n            fileNode.complexity = data.complexity || 0;\n            fileNode.lines = data.lines || 0;\n            \n            // Add code elements as children\n            if (data.elements && Array.isArray(data.elements)) {\n                fileNode.children = data.elements.map(elem => ({\n                    name: elem.name,\n                    type: elem.type.toLowerCase(),\n                    path: `${data.path}#${elem.name}`,\n                    line: elem.line,\n                    complexity: elem.complexity || 1,\n                    docstring: elem.docstring || '',\n                    children: elem.methods ? elem.methods.map(m => ({\n                        name: m.name,\n                        type: 'method',\n                        path: `${data.path}#${elem.name}.${m.name}`,\n                        line: m.line,\n                        complexity: m.complexity || 1,\n                        docstring: m.docstring || ''\n                    })) : []\n                }));\n            }\n            \n            // Update stats\n            if (data.stats) {\n                this.stats.classes += data.stats.classes || 0;\n                this.stats.functions += data.stats.functions || 0;\n                this.stats.methods += data.stats.methods || 0;\n                this.stats.lines += data.stats.lines || 0;\n            }\n            \n            this.updateStats();\n            if (this.root) {\n                this.update(this.root);\n            }\n            \n            this.updateBreadcrumb(`Analyzed: ${data.path}`, 'success');\n        }\n    }\n\n    /**\n     * Handle node found event\n     */\n    onNodeFound(data) {\n        // Add to events display with appropriate icon\n        const typeIcon = data.type === 'class' ? '🏛️' : \n                        data.type === 'function' ? '⚡' : \n                        data.type === 'method' ? '🔧' : '📦';\n        this.addEventToDisplay(`${typeIcon} Found ${data.type || 'node'}: ${data.name || 'Unknown'}`);\n        \n        // Extract node info\n        const nodeInfo = {\n            name: data.name || 'Unknown',\n            type: (data.type || 'unknown').toLowerCase(),\n            path: data.path || '',\n            line: data.line || 0,\n            complexity: data.complexity || 1,\n            docstring: data.docstring || ''\n        };\n\n        // Map event types to our internal types\n        const typeMapping = {\n            'class': 'class',\n            'function': 'function',\n            'method': 'method',\n            'module': 'module',\n            'file': 'file',\n            'directory': 'directory'\n        };\n\n        nodeInfo.type = typeMapping[nodeInfo.type] || nodeInfo.type;\n\n        // Determine parent path\n        let parentPath = '';\n        if (data.parent_path) {\n            parentPath = data.parent_path;\n        } else if (data.file_path) {\n            parentPath = data.file_path;\n        } else if (nodeInfo.path.includes('/')) {\n            const parts = nodeInfo.path.split('/');\n            parts.pop();\n            parentPath = parts.join('/');\n        }\n\n        // Update stats based on node type\n        switch(nodeInfo.type) {\n            case 'class':\n                this.stats.classes++;\n                break;\n            case 'function':\n                this.stats.functions++;\n                break;\n            case 'method':\n                this.stats.methods++;\n                break;\n            case 'file':\n                this.stats.files++;\n                break;\n        }\n\n        // Add node to tree\n        this.addNodeToTree(nodeInfo, parentPath);\n        this.updateStats();\n\n        // Show progress in breadcrumb\n        const elementType = nodeInfo.type.charAt(0).toUpperCase() + nodeInfo.type.slice(1);\n        this.updateBreadcrumb(`Found ${elementType}: ${nodeInfo.name}`, 'info');\n    }\n\n    /**\n     * Handle progress update\n     */\n    onProgressUpdate(data) {\n        const progress = data.progress || 0;\n        const message = data.message || `Processing... ${progress}%`;\n        \n        this.updateBreadcrumb(message, 'info');\n        \n        // Update progress bar if it exists\n        const progressBar = document.querySelector('.code-tree-progress');\n        if (progressBar) {\n            progressBar.style.width = `${progress}%`;\n        }\n    }\n\n    /**\n     * Handle analysis complete event\n     */\n    onAnalysisComplete(data) {\n        this.analyzing = false;\n        this.hideLoading();\n        \n        // Update activity ticker\n        this.updateActivityTicker('✅ Ready', 'success');\n        \n        // Add completion event\n        this.addEventToDisplay('✅ Analysis complete!', 'success');\n\n        // Update tree visualization\n        if (this.root && this.svg) {\n            this.update(this.root);\n        }\n\n        // Update stats from completion data\n        if (data.stats) {\n            this.stats = { ...this.stats, ...data.stats };\n            this.updateStats();\n        }\n\n        const message = data.message || `Analysis complete: ${this.stats.files} files, ${this.stats.classes} classes, ${this.stats.functions} functions`;\n        this.updateBreadcrumb(message, 'success');\n        this.showNotification(message, 'success');\n    }\n\n    /**\n     * Handle analysis error\n     */\n    onAnalysisError(data) {\n        this.analyzing = false;\n        this.hideLoading();\n        this.loadingNodes.clear();  // Clear loading state on error\n\n        const message = data.message || data.error || 'Analysis failed';\n        this.updateBreadcrumb(message, 'error');\n        this.showNotification(message, 'error');\n    }\n\n    /**\n     * Handle analysis accepted\n     */\n    onAnalysisAccepted(data) {\n        const message = data.message || 'Analysis request accepted';\n        this.updateBreadcrumb(message, 'info');\n    }\n\n    /**\n     * Handle analysis queued\n     */\n    onAnalysisQueued(data) {\n        const position = data.position || 0;\n        const message = `Analysis queued (position ${position})`;\n        this.updateBreadcrumb(message, 'warning');\n        this.showNotification(message, 'info');\n    }\n    \n    /**\n     * Handle INFO events for granular work tracking\n     */\n    onInfoEvent(data) {\n        // Log to console for debugging\n        \n        // Update breadcrumb for certain events\n        if (data.type && data.type.startsWith('discovery.')) {\n            // Discovery events\n            if (data.type === 'discovery.start') {\n                this.updateBreadcrumb(data.message, 'info');\n            } else if (data.type === 'discovery.complete') {\n                this.updateBreadcrumb(data.message, 'success');\n                // Show stats if available\n                if (data.stats) {\n                }\n            } else if (data.type === 'discovery.directory' || data.type === 'discovery.file') {\n                // Quick flash of discovery events\n                this.updateBreadcrumb(data.message, 'info');\n            }\n        } else if (data.type && data.type.startsWith('analysis.')) {\n            // Analysis events\n            if (data.type === 'analysis.start') {\n                this.updateBreadcrumb(data.message, 'info');\n            } else if (data.type === 'analysis.complete') {\n                this.updateBreadcrumb(data.message, 'success');\n                // Show stats if available\n                if (data.stats) {\n                    const statsMsg = `Found: ${data.stats.classes || 0} classes, ${data.stats.functions || 0} functions, ${data.stats.methods || 0} methods`;\n                }\n            } else if (data.type === 'analysis.class' || data.type === 'analysis.function' || data.type === 'analysis.method') {\n                // Show found elements briefly\n                this.updateBreadcrumb(data.message, 'info');\n            } else if (data.type === 'analysis.parse') {\n                this.updateBreadcrumb(data.message, 'info');\n            }\n        } else if (data.type && data.type.startsWith('filter.')) {\n            // Filter events - optionally show in debug mode\n            if (window.debugMode || this.showFilterEvents) {\n                console.debug('[FILTER]', data.type, data.path, data.reason);\n                if (this.showFilterEvents) {\n                    this.updateBreadcrumb(data.message, 'warning');\n                }\n            }\n        } else if (data.type && data.type.startsWith('cache.')) {\n            // Cache events\n            if (data.type === 'cache.hit') {\n                console.debug('[CACHE HIT]', data.file);\n                if (this.showCacheEvents) {\n                    this.updateBreadcrumb(data.message, 'info');\n                }\n            } else if (data.type === 'cache.miss') {\n                console.debug('[CACHE MISS]', data.file);\n            }\n        }\n        \n        // Optionally add to an event log display if enabled\n        if (this.eventLogEnabled && data.message) {\n            this.addEventToDisplay(data);\n        }\n    }\n    \n    /**\n     * Add event to display log (if we have one)\n     */\n    addEventToDisplay(data) {\n        // Could be implemented to show events in a dedicated log area\n        // For now, just maintain a recent events list\n        if (!this.recentEvents) {\n            this.recentEvents = [];\n        }\n        \n        this.recentEvents.unshift({\n            timestamp: data.timestamp || new Date().toISOString(),\n            type: data.type,\n            message: data.message,\n            data: data\n        });\n        \n        // Keep only last 100 events\n        if (this.recentEvents.length > 100) {\n            this.recentEvents.pop();\n        }\n        \n        // Could update a UI element here if we had an event log display\n    }\n\n    /**\n     * Handle analysis cancelled\n     */\n    onAnalysisCancelled(data) {\n        this.analyzing = false;\n        this.hideLoading();\n        this.loadingNodes.clear();  // Clear loading state on cancellation\n        const message = data.message || 'Analysis cancelled';\n        this.updateBreadcrumb(message, 'warning');\n    }\n\n    /**\n     * Show notification toast\n     */\n    showNotification(message, type = 'info') {\n        const notification = document.createElement('div');\n        notification.className = `code-tree-notification ${type}`;\n        notification.textContent = message;\n        \n        // Change from appending to container to positioning absolutely within it\n        const container = document.getElementById('code-tree-container');\n        if (container) {\n            // Position relative to the container\n            notification.style.position = 'absolute';\n            notification.style.top = '10px';\n            notification.style.right = '10px';\n            notification.style.zIndex = '1000';\n            \n            // Ensure container is positioned\n            if (!container.style.position || container.style.position === 'static') {\n                container.style.position = 'relative';\n            }\n            \n            container.appendChild(notification);\n            \n            // Animate out after 3 seconds\n            setTimeout(() => {\n                notification.style.animation = 'slideOutRight 0.3s ease';\n                setTimeout(() => notification.remove(), 300);\n            }, 3000);\n        }\n    }\n\n    /**\n     * Add node to tree structure\n     */\n    addNodeToTree(nodeInfo, parentPath = '') {\n        // CRITICAL: Validate that nodeInfo.path doesn't contain absolute paths\n        // The backend should only send relative paths now\n        if (nodeInfo.path && nodeInfo.path.startsWith('/')) {\n            console.error('Absolute path detected in node, skipping:', nodeInfo.path);\n            return;\n        }\n        \n        // Also validate parent path\n        if (parentPath && parentPath.startsWith('/')) {\n            console.error('Absolute path detected in parent, skipping:', parentPath);\n            return;\n        }\n        \n        // Find parent node\n        let parentNode = this.treeData;\n        \n        if (parentPath) {\n            parentNode = this.findNodeByPath(parentPath);\n            if (!parentNode) {\n                // CRITICAL: Do NOT create parent structure if it doesn't exist\n                // This prevents creating nodes above the working directory\n                console.warn('Parent node not found, skipping node creation:', parentPath);\n                console.warn('Attempted to add node:', nodeInfo);\n                return;\n            }\n        }\n\n        // Check if node already exists\n        const existingNode = parentNode.children?.find(c => \n            c.path === nodeInfo.path || \n            (c.name === nodeInfo.name && c.type === nodeInfo.type)\n        );\n\n        if (existingNode) {\n            // Update existing node\n            Object.assign(existingNode, nodeInfo);\n            return;\n        }\n\n        // Add new node\n        if (!parentNode.children) {\n            parentNode.children = [];\n        }\n        \n        // Ensure the node has a children array\n        if (!nodeInfo.children) {\n            nodeInfo.children = [];\n        }\n        \n        parentNode.children.push(nodeInfo);\n\n        // Store node reference for quick access\n        this.nodes.set(nodeInfo.path, nodeInfo);\n\n        // Update tree if initialized\n        if (this.root && this.svg) {\n            // Recreate hierarchy with new data\n            this.root = d3.hierarchy(this.treeData);\n            this.root.x0 = this.height / 2;\n            this.root.y0 = 0;\n            \n            // Update only if we have a reasonable number of nodes to avoid performance issues\n            if (this.nodes.size < 1000) {\n                this.update(this.root);\n            } else if (this.nodes.size % 100 === 0) {\n                // Update every 100 nodes for large trees\n                this.update(this.root);\n            }\n        }\n    }\n\n    /**\n     * Find node by path in tree\n     */\n    findNodeByPath(path, node = null) {\n        if (!node) {\n            node = this.treeData;\n            console.log('🔍 [SUBDIRECTORY LOADING] Starting search for path:', path);\n        }\n\n        if (node.path === path) {\n            console.log('✅ [SUBDIRECTORY LOADING] Found node for path:', path);\n            return node;\n        }\n\n        if (node.children) {\n            for (const child of node.children) {\n                const found = this.findNodeByPath(path, child);\n                if (found) {\n                    return found;\n                }\n            }\n        }\n\n        if (!node.parent && node === this.treeData) {\n            console.warn('❌ [SUBDIRECTORY LOADING] Path not found in tree:', path);\n        }\n        return null;\n    }\n    \n    /**\n     * Helper to log all paths in tree for debugging\n     */\n    logAllPaths(node, indent = '') {\n        console.log(`${indent}${node.path} (${node.name})`);\n        if (node.children) {\n            for (const child of node.children) {\n                this.logAllPaths(child, indent + '  ');\n            }\n        }\n    }\n    \n    /**\n     * Helper to collect all paths in tree for debugging\n     */\n    getAllTreePaths(node) {\n        const paths = [node.path];\n        if (node.children) {\n            for (const child of node.children) {\n                paths.push(...this.getAllTreePaths(child));\n            }\n        }\n        return paths;\n    }\n    \n    /**\n     * Find D3 hierarchy node by path\n     */\n    findD3NodeByPath(path) {\n        if (!this.root) return null;\n        return this.root.descendants().find(d => d.data.path === path);\n    }\n    \n    /**\n     * Preserve expansion state when recreating hierarchy\n     */\n    preserveExpansionState(oldRoot, newRoot) {\n        if (!oldRoot || !newRoot) return;\n        \n        // Create a map of expanded nodes from the old tree\n        const expansionMap = new Map();\n        oldRoot.descendants().forEach(node => {\n            if (node.data.expanded || (node.children && !node._children)) {\n                expansionMap.set(node.data.path, true);\n            }\n        });\n        \n        // Apply expansion state to new tree\n        newRoot.descendants().forEach(node => {\n            if (expansionMap.has(node.data.path)) {\n                node.children = node._children || node.children;\n                node._children = null;\n                node.data.expanded = true;\n            }\n        });\n    }\n\n    /**\n     * Update statistics display\n     */\n    updateStats() {\n        // Update stats display - use correct IDs from HTML\n        const statsElements = {\n            'file-count': this.stats.files,\n            'class-count': this.stats.classes,\n            'function-count': this.stats.functions,\n            'line-count': this.stats.lines\n        };\n\n        for (const [id, value] of Object.entries(statsElements)) {\n            const elem = document.getElementById(id);\n            if (elem) {\n                elem.textContent = value.toLocaleString();\n            }\n        }\n\n        // Update progress text\n        const progressText = document.getElementById('code-progress-text');\n        if (progressText) {\n            const statusText = this.analyzing ? \n                `Analyzing... ${this.stats.files} files processed` : \n                `Ready - ${this.stats.files} files in tree`;\n            progressText.textContent = statusText;\n        }\n    }\n\n    /**\n     * Update breadcrumb trail\n     */\n    updateBreadcrumb(message, type = 'info') {\n        const breadcrumbContent = document.getElementById('breadcrumb-content');\n        if (breadcrumbContent) {\n            breadcrumbContent.textContent = message;\n            breadcrumbContent.className = `breadcrumb-${type}`;\n        }\n    }\n\n    /**\n     * Detect language from file extension\n     */\n    detectLanguage(filePath) {\n        const ext = filePath.split('.').pop().toLowerCase();\n        const languageMap = {\n            'py': 'python',\n            'js': 'javascript',\n            'ts': 'typescript',\n            'jsx': 'javascript',\n            'tsx': 'typescript',\n            'java': 'java',\n            'cpp': 'cpp',\n            'c': 'c',\n            'cs': 'csharp',\n            'rb': 'ruby',\n            'go': 'go',\n            'rs': 'rust',\n            'php': 'php',\n            'swift': 'swift',\n            'kt': 'kotlin',\n            'scala': 'scala',\n            'r': 'r',\n            'sh': 'bash',\n            'ps1': 'powershell'\n        };\n        return languageMap[ext] || 'unknown';\n    }\n\n    /**\n     * Add visualization controls for layout toggle\n     */\n    addVisualizationControls() {\n        const controls = this.svg.append('g')\n            .attr('class', 'viz-controls')\n            .attr('transform', 'translate(10, 10)');\n            \n        // Add layout toggle button\n        const toggleButton = controls.append('g')\n            .attr('class', 'layout-toggle')\n            .style('cursor', 'pointer')\n            .on('click', () => this.toggleLayout());\n            \n        toggleButton.append('rect')\n            .attr('width', 120)\n            .attr('height', 30)\n            .attr('rx', 5)\n            .attr('fill', '#3b82f6')\n            .attr('opacity', 0.8);\n            \n        toggleButton.append('text')\n            .attr('x', 60)\n            .attr('y', 20)\n            .attr('text-anchor', 'middle')\n            .attr('fill', 'white')\n            .style('font-size', '12px')\n            .text(this.isRadialLayout ? 'Switch to Linear' : 'Switch to Radial');\n    }\n    \n    /**\n     * Toggle between radial and linear layouts\n     */\n    toggleLayout() {\n        this.isRadialLayout = !this.isRadialLayout;\n        this.createVisualization();\n        if (this.root) {\n            this.update(this.root);\n        }\n        this.showNotification(\n            this.isRadialLayout ? 'Switched to radial layout' : 'Switched to linear layout',\n            'info'\n        );\n    }\n\n    /**\n     * Convert radial coordinates to Cartesian\n     */\n    radialPoint(x, y) {\n        return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];\n    }\n\n    /**\n     * Update D3 tree visualization\n     */\n    update(source) {\n        if (!this.treeLayout || !this.treeGroup || !source) {\n            return;\n        }\n\n        // Compute the new tree layout\n        const treeData = this.treeLayout(this.root);\n        const nodes = treeData.descendants();\n        const links = treeData.descendants().slice(1);\n\n        if (this.isRadialLayout) {\n            // Radial layout adjustments\n            nodes.forEach(d => {\n                // Store original x,y for transitions\n                if (d.x0 === undefined) {\n                    d.x0 = d.x;\n                    d.y0 = d.y;\n                }\n            });\n        } else {\n            // Linear layout with nodeSize doesn't need manual normalization\n            // The tree layout handles spacing automatically\n        }\n\n        // Update nodes\n        const node = this.treeGroup.selectAll('g.node')\n            .data(nodes, d => d.id || (d.id = ++this.nodeId));\n\n        // Enter new nodes\n        const nodeEnter = node.enter().append('g')\n            .attr('class', d => {\n                let classes = ['node', 'code-node'];\n                if (d.data.type === 'directory') {\n                    classes.push('directory');\n                    if (d.data.loaded === true && d.children) {\n                        classes.push('expanded');\n                    }\n                    if (d.data.loaded === 'loading') {\n                        classes.push('loading');\n                    }\n                    if (d.data.children && d.data.children.length === 0) {\n                        classes.push('empty');\n                    }\n                } else if (d.data.type === 'file') {\n                    classes.push('file');\n                }\n                return classes.join(' ');\n            })\n            .attr('transform', d => {\n                if (this.isRadialLayout) {\n                    const [x, y] = this.radialPoint(source.x0 || 0, source.y0 || 0);\n                    return `translate(${x},${y})`;\n                } else {\n                    return `translate(${source.y0},${source.x0})`;\n                }\n            })\n            .on('click', (event, d) => this.onNodeClick(event, d));\n\n        // Add circles for nodes\n        nodeEnter.append('circle')\n            .attr('class', 'node-circle')\n            .attr('r', 1e-6)\n            .style('fill', d => this.getNodeColor(d))\n            .style('stroke', d => this.getNodeStrokeColor(d))\n            .style('stroke-width', d => d.data.type === 'directory' ? 2 : 1.5)\n            .style('cursor', 'pointer')  // Add cursor pointer for visual feedback\n            .on('click', (event, d) => this.onNodeClick(event, d))  // CRITICAL FIX: Add click handler to circles\n            .on('mouseover', (event, d) => this.showTooltip(event, d))\n            .on('mouseout', () => this.hideTooltip());\n        \n        // Add expand/collapse icons for directories\n        nodeEnter.filter(d => d.data.type === 'directory')\n            .append('text')\n            .attr('class', 'expand-icon')\n            .attr('x', 0)\n            .attr('y', 0)\n            .attr('text-anchor', 'middle')\n            .attr('dominant-baseline', 'central')\n            .text(d => {\n                if (d.data.loaded === 'loading') return '⟳';\n                if (d.data.loaded === true && d.children) return '▼';\n                return '▶';\n            })\n            .style('font-size', '10px')\n            .style('pointer-events', 'none');\n\n        // Add labels for nodes with smart positioning\n        nodeEnter.append('text')\n            .attr('class', 'node-label')\n            .attr('dy', '.35em')\n            .attr('x', d => {\n                if (this.isRadialLayout) {\n                    // For radial layout, initial position\n                    return 0;\n                } else {\n                    // Linear layout: standard positioning\n                    return d.children || d._children ? -13 : 13;\n                }\n            })\n            .attr('text-anchor', d => {\n                if (this.isRadialLayout) {\n                    return 'start';  // Will be adjusted in update\n                } else {\n                    // Linear layout: standard anchoring\n                    return d.children || d._children ? 'end' : 'start';\n                }\n            })\n            .text(d => {\n                // Truncate long names\n                const maxLength = 20;\n                const name = d.data.name || '';\n                return name.length > maxLength ? \n                       name.substring(0, maxLength - 3) + '...' : name;\n            })\n            .style('fill-opacity', 1e-6)\n            .style('font-size', '12px')\n            .style('font-family', '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif')\n            .style('text-shadow', '1px 1px 2px rgba(255,255,255,0.8), -1px -1px 2px rgba(255,255,255,0.8)')\n            .on('click', (event, d) => this.onNodeClick(event, d))  // CRITICAL FIX: Add click handler to labels\n            .style('cursor', 'pointer');\n\n        // Add icons for node types (files only, directories use expand icons)\n        nodeEnter.filter(d => d.data.type !== 'directory')\n            .append('text')\n            .attr('class', 'node-icon')\n            .attr('dy', '.35em')\n            .attr('x', 0)\n            .attr('text-anchor', 'middle')\n            .text(d => this.getNodeIcon(d))\n            .style('font-size', '10px')\n            .style('fill', 'white')\n            .on('click', (event, d) => this.onNodeClick(event, d))  // CRITICAL FIX: Add click handler to file icons\n            .style('cursor', 'pointer');\n            \n        // Add item count badges for directories\n        nodeEnter.filter(d => d.data.type === 'directory' && d.data.children)\n            .append('text')\n            .attr('class', 'item-count-badge')\n            .attr('x', 12)\n            .attr('y', -8)\n            .attr('text-anchor', 'middle')\n            .text(d => {\n                const count = d.data.children ? d.data.children.length : 0;\n                return count > 0 ? count : '';\n            })\n            .style('font-size', '9px')\n            .style('opacity', 0.7)\n            .on('click', (event, d) => this.onNodeClick(event, d))  // CRITICAL FIX: Add click handler to count badges\n            .style('cursor', 'pointer');\n\n        // Transition to new positions\n        const nodeUpdate = nodeEnter.merge(node);\n\n        // CRITICAL FIX: Ensure ALL nodes (new and existing) have click handlers\n        // This fixes the issue where subdirectory clicks stop working after tree updates\n        nodeUpdate.on('click', (event, d) => this.onNodeClick(event, d));\n\n        nodeUpdate.transition()\n            .duration(this.duration)\n            .attr('transform', d => {\n                if (this.isRadialLayout) {\n                    const [x, y] = this.radialPoint(d.x, d.y);\n                    return `translate(${x},${y})`;\n                } else {\n                    return `translate(${d.y},${d.x})`;\n                }\n            });\n\n        // Update node classes based on current state\n        nodeUpdate.attr('class', d => {\n            let classes = ['node', 'code-node'];\n            if (d.data.type === 'directory') {\n                classes.push('directory');\n                if (d.data.loaded === true && d.children) {\n                    classes.push('expanded');\n                }\n                if (d.data.loaded === 'loading') {\n                    classes.push('loading');\n                }\n                if (d.data.children && d.data.children.length === 0) {\n                    classes.push('empty');\n                }\n            } else if (d.data.type === 'file') {\n                classes.push('file');\n            }\n            return classes.join(' ');\n        });\n        \n        nodeUpdate.select('circle.node-circle')\n            .attr('r', d => d.data.type === 'directory' ? 10 : 8)\n            .style('fill', d => this.getNodeColor(d))\n            \n        // Update expand/collapse icons\n        nodeUpdate.select('.expand-icon')\n            .text(d => {\n                if (d.data.loaded === 'loading') return '⟳';\n                if (d.data.loaded === true && d.children) return '▼';\n                return '▶';\n            });\n            \n        // Update item count badges\n        nodeUpdate.select('.item-count-badge')\n            .text(d => {\n                if (d.data.type !== 'directory') return '';\n                const count = d.data.children ? d.data.children.length : 0;\n                return count > 0 ? count : '';\n            })\n            .style('stroke', d => this.getNodeStrokeColor(d))\n            .attr('cursor', 'pointer');\n\n        // Update text labels with proper rotation for radial layout\n        const isRadial = this.isRadialLayout;  // Capture the layout type\n        nodeUpdate.select('text.node-label')\n            .style('fill-opacity', 1)\n            .style('fill', '#333')\n            .each(function(d) {\n                const selection = d3.select(this);\n                \n                if (isRadial) {\n                    // For radial layout, apply rotation and positioning\n                    const angle = (d.x * 180 / Math.PI) - 90;  // Convert to degrees\n                    \n                    // Determine if text should be flipped (left side of circle)\n                    const shouldFlip = angle > 90 || angle < -90;\n                    \n                    // Calculate text position and rotation\n                    if (shouldFlip) {\n                        // Text on left side - rotate 180 degrees to read properly\n                        selection\n                            .attr('transform', `rotate(${angle + 180})`)\n                            .attr('x', -15)  // Negative offset for flipped text\n                            .attr('text-anchor', 'end')\n                            .attr('dy', '.35em');\n                    } else {\n                        // Text on right side - normal orientation\n                        selection\n                            .attr('transform', `rotate(${angle})`)\n                            .attr('x', 15)  // Positive offset for normal text\n                            .attr('text-anchor', 'start')\n                            .attr('dy', '.35em');\n                    }\n                } else {\n                    // Linear layout - no rotation needed\n                    selection\n                        .attr('transform', null)\n                        .attr('x', d.children || d._children ? -13 : 13)\n                        .attr('text-anchor', d.children || d._children ? 'end' : 'start')\n                        .attr('dy', '.35em');\n                }\n            });\n\n        // Remove exiting nodes\n        const nodeExit = node.exit().transition()\n            .duration(this.duration)\n            .attr('transform', d => {\n                if (this.isRadialLayout) {\n                    const [x, y] = this.radialPoint(source.x, source.y);\n                    return `translate(${x},${y})`;\n                } else {\n                    return `translate(${source.y},${source.x})`;\n                }\n            })\n            .remove();\n\n        nodeExit.select('circle')\n            .attr('r', 1e-6);\n\n        nodeExit.select('text.node-label')\n            .style('fill-opacity', 1e-6);\n        \n        nodeExit.select('text.node-icon')\n            .style('fill-opacity', 1e-6);\n\n        // Update links\n        const link = this.treeGroup.selectAll('path.link')\n            .data(links, d => d.id);\n\n        // Enter new links\n        const linkEnter = link.enter().insert('path', 'g')\n            .attr('class', 'link')\n            .attr('d', d => {\n                const o = {x: source.x0, y: source.y0};\n                return this.isRadialLayout ? \n                    this.radialDiagonal(o, o) : \n                    this.diagonal(o, o);\n            })\n            .style('fill', 'none')\n            .style('stroke', '#ccc')\n            .style('stroke-width', 2);\n\n        // Transition to new positions\n        const linkUpdate = linkEnter.merge(link);\n\n        linkUpdate.transition()\n            .duration(this.duration)\n            .attr('d', d => this.isRadialLayout ? \n                this.radialDiagonal(d, d.parent) : \n                this.diagonal(d, d.parent));\n\n        // Remove exiting links\n        link.exit().transition()\n            .duration(this.duration)\n            .attr('d', d => {\n                const o = {x: source.x, y: source.y};\n                return this.isRadialLayout ? \n                    this.radialDiagonal(o, o) : \n                    this.diagonal(o, o);\n            })\n            .remove();\n\n        // Store old positions for transition\n        nodes.forEach(d => {\n            d.x0 = d.x;\n            d.y0 = d.y;\n        });\n    }\n\n    /**\n     * REMOVED: Center the view on a specific node (Linear layout)\n     * This method has been completely disabled to prevent unwanted tree movement.\n     * All centering functionality has been removed from the code tree.\n     */\n    centerOnNode(d) {\n        // Method disabled - no centering operations will be performed\n        console.log('[CodeTree] centerOnNode called but disabled - no centering will occur');\n        return;\n    }\n    \n    /**\n     * REMOVED: Center the view on a specific node (Radial layout)\n     * This method has been completely disabled to prevent unwanted tree movement.\n     * All centering functionality has been removed from the code tree.\n     */\n    centerOnNodeRadial(d) {\n        // Method disabled - no centering operations will be performed\n        console.log('[CodeTree] centerOnNodeRadial called but disabled - no centering will occur');\n        return;\n    }\n    \n    /**\n     * Highlight the active node with larger icon\n     */\n    highlightActiveNode(d) {\n        // Reset all nodes to normal size and clear parent context\n        // First clear classes on the selection\n        const allCircles = this.treeGroup.selectAll('circle.node-circle');\n        allCircles\n            .classed('active', false)\n            .classed('parent-context', false);\n        \n        // Then apply transition separately\n        allCircles\n            .transition()\n            .duration(300)\n            .attr('r', 8)\n            .style('stroke', null)\n            .style('stroke-width', null)\n            .style('opacity', null);\n        \n        // Reset all labels to normal\n        this.treeGroup.selectAll('text.node-label')\n            .style('font-weight', 'normal')\n            .style('font-size', '12px');\n        \n        // Find and increase size of clicked node - use data matching\n        // Make the size increase MUCH more dramatic: 8 -> 20 (2.5x the size)\n        const activeNodeCircle = this.treeGroup.selectAll('g.node')\n            .filter(node => node === d)\n            .select('circle.node-circle');\n        \n        // First set the class (not part of transition)\n        activeNodeCircle.classed('active', true);\n        \n        // Then apply the transition with styles - MUCH LARGER\n        activeNodeCircle\n            .transition()\n            .duration(300)\n            .attr('r', 20)  // Much larger radius (2.5x)\n            .style('stroke', '#3b82f6')\n            .style('stroke-width', 5)  // Thicker border\n            .style('filter', 'drop-shadow(0 0 15px rgba(59, 130, 246, 0.6))');  // Stronger glow effect\n        \n        // Also make the label bold\n        this.treeGroup.selectAll('g.node')\n            .filter(node => node === d)\n            .select('text.node-label')\n            .style('font-weight', 'bold')\n            .style('font-size', '14px');  // Slightly larger text\n        \n        // Store active node\n        this.activeNode = d;\n    }\n    \n    /**\n     * Add pulsing animation for loading state\n     */\n    addLoadingPulse(d) {\n        // Use consistent selection pattern\n        const node = this.treeGroup.selectAll('g.node')\n            .filter(node => node === d)\n            .select('circle.node-circle');\n        \n        // Add to loading set\n        this.loadingNodes.add(d.data.path);\n        \n        // Add pulsing class and orange color - separate operations\n        node.classed('loading-pulse', true);\n        node.style('fill', '#fb923c');  // Orange color for loading\n        \n        // Create pulse animation\n        const pulseAnimation = () => {\n            if (!this.loadingNodes.has(d.data.path)) return;\n            \n            node.transition()\n                .duration(600)\n                .attr('r', 14)\n                .style('opacity', 0.6)\n                .transition()\n                .duration(600)\n                .attr('r', 10)\n                .style('opacity', 1)\n                .on('end', () => {\n                    if (this.loadingNodes.has(d.data.path)) {\n                        pulseAnimation(); // Continue pulsing\n                    }\n                });\n        };\n        \n        pulseAnimation();\n    }\n    \n    /**\n     * Remove pulsing animation when loading complete\n     */\n    removeLoadingPulse(d) {\n        // Remove from loading set\n        this.loadingNodes.delete(d.data.path);\n        \n        // Use consistent selection pattern\n        const node = this.treeGroup.selectAll('g.node')\n            .filter(node => node === d)\n            .select('circle.node-circle');\n        \n        // Clear class first\n        node.classed('loading-pulse', false);\n        \n        // Then interrupt and transition\n        node.interrupt() // Stop animation\n            .transition()\n            .duration(300)\n            .attr('r', this.activeNode === d ? 20 : 8)  // Use 20 for active node\n            .style('opacity', 1)\n            .style('fill', d => this.getNodeColor(d));  // Restore original color\n    }\n    \n    /**\n     * Show parent node alongside for context\n     */\n    showWithParent(d) {\n        if (!d.parent) return;\n        \n        // Make parent more visible\n        const parentNode = this.treeGroup.selectAll('g.node')\n            .filter(node => node === d.parent);\n        \n        // Highlight parent with different style - separate class from styles\n        const parentCircle = parentNode.select('circle.node-circle');\n        parentCircle.classed('parent-context', true);\n        parentCircle\n            .style('stroke', '#10b981')\n            .style('stroke-width', 3)\n            .style('opacity', 0.8);\n        \n        // REMOVED: Radial zoom adjustment functionality\n        // This section previously adjusted zoom to show parent and clicked node together,\n        // but has been completely disabled to prevent unwanted tree movement/centering.\n        // Only visual highlighting of the parent remains active.\n        \n        // if (this.isRadialLayout && d.parent) {\n        //     // All zoom.transform operations have been disabled\n        //     // to prevent tree movement when nodes are clicked\n        // }\n    }\n    \n    /**\n     * Handle node click - implement lazy loading with enhanced visual feedback\n     */\n    onNodeClick(event, d) {\n        // Handle node click interaction\n        \n        // Check event parameter\n        if (event) {\n            try {\n                if (typeof event.stopPropagation === 'function') {\n                    event.stopPropagation();\n                } else {\n                }\n            } catch (error) {\n                console.error('[CodeTree] ERROR calling stopPropagation:', error);\n            }\n        } else {\n        }\n        \n        // Check d parameter structure\n        if (!d) {\n            console.error('[CodeTree] ERROR: d is null/undefined, cannot continue');\n            return;\n        }\n        \n        if (!d.data) {\n            console.error('[CodeTree] ERROR: d.data is null/undefined, cannot continue');\n            return;\n        }\n        \n        // Node interaction detected\n        \n        // === PHASE 1: Immediate Visual Effects (Synchronous) ===\n        // These execute immediately before any async operations\n        \n        \n        // Center on clicked node (immediate visual effect) - REMOVED\n        // Centering functionality has been disabled to prevent unwanted repositioning\n        // when nodes are clicked. All other click functionality remains intact.\n        // try {\n        //     if (this.isRadialLayout) {\n        //         if (typeof this.centerOnNodeRadial === 'function') {\n        //             this.centerOnNodeRadial(d);\n        //         } else {\n        //             console.error('[CodeTree] centerOnNodeRadial is not a function!');\n        //         }\n        //     } else {\n        //         if (typeof this.centerOnNode === 'function') {\n        //             this.centerOnNode(d);\n        //         } else {\n        //             console.error('[CodeTree] centerOnNode is not a function!');\n        //         }\n        //     }\n        // } catch (error) {\n        //     console.error('[CodeTree] ERROR during centering:', error, error.stack);\n        // }\n        \n        \n        // Highlight with larger icon (immediate visual effect)\n        try {\n            if (typeof this.highlightActiveNode === 'function') {\n                this.highlightActiveNode(d);\n            } else {\n                console.error('[CodeTree] highlightActiveNode is not a function!');\n            }\n        } catch (error) {\n            console.error('[CodeTree] ERROR during highlightActiveNode:', error, error.stack);\n        }\n        \n        \n        // Show parent context (immediate visual effect)\n        try {\n            if (typeof this.showWithParent === 'function') {\n                this.showWithParent(d);\n            } else {\n                console.error('[CodeTree] showWithParent is not a function!');\n            }\n        } catch (error) {\n            console.error('[CodeTree] ERROR during showWithParent:', error, error.stack);\n        }\n        \n        \n        // Add pulsing animation immediately for directories\n        \n        if (d.data.type === 'directory' && !d.data.loaded) {\n            try {\n                if (typeof this.addLoadingPulse === 'function') {\n                    this.addLoadingPulse(d);\n                } else {\n                    console.error('[CodeTree] addLoadingPulse is not a function!');\n                }\n            } catch (error) {\n                console.error('[CodeTree] ERROR during addLoadingPulse:', error, error.stack);\n            }\n        } else {\n        }\n        \n        \n        // === PHASE 2: Prepare Data (Synchronous) ===\n        \n        \n        // Get selected languages from checkboxes\n        const selectedLanguages = [];\n        const checkboxes = document.querySelectorAll('.language-checkbox:checked');\n        checkboxes.forEach(cb => {\n            selectedLanguages.push(cb.value);\n        });\n        \n        // Get ignore patterns\n        const ignorePatternsElement = document.getElementById('ignore-patterns');\n        const ignorePatterns = ignorePatternsElement?.value || '';\n        \n        \n        // === PHASE 3: Async Operations (Delayed) ===\n        // Add a small delay to ensure visual effects are rendered first\n        \n        // For directories that haven't been loaded yet, request discovery\n        if (d.data.type === 'directory' && !d.data.loaded) {\n            // Prevent duplicate requests\n            if (this.loadingNodes.has(d.data.path)) {\n                this.showNotification(`Already loading: ${d.data.name}`, 'warning');\n                return;\n            }\n            \n            // Mark as loading immediately to prevent duplicate requests\n            d.data.loaded = 'loading';\n            this.loadingNodes.add(d.data.path);\n            \n            // Ensure path is absolute or relative to working directory\n            const fullPath = this.ensureFullPath(d.data.path);\n            \n            // CRITICAL DEBUG: Log directory loading attempt\n            console.log('🚀 [SUBDIRECTORY LOADING] Attempting to load:', {\n                originalPath: d.data.path,\n                fullPath: fullPath,\n                nodeType: d.data.type,\n                loaded: d.data.loaded,\n                hasSocket: !!this.socket,\n                workingDir: this.getWorkingDirectory()\n            });\n            \n            // Sending discovery request for child content\n            \n            // Store reference to the D3 node for later expansion\n            const clickedD3Node = d;\n            \n            // Delay the socket request to ensure visual effects are rendered\n            setTimeout(() => {\n                \n                // Request directory contents via Socket.IO\n                if (this.socket) {\n                    console.log('📡 [SUBDIRECTORY LOADING] Emitting WebSocket request:', {\n                        event: 'code:discover:directory',\n                        data: {\n                            path: fullPath,\n                            depth: this.bulkLoadMode ? 2 : 1,\n                            languages: selectedLanguages,\n                            ignore_patterns: ignorePatterns\n                        }\n                    });\n                    \n                    this.socket.emit('code:discover:directory', {\n                        path: fullPath,\n                        depth: this.bulkLoadMode ? 2 : 1,  // Load 2 levels if bulk mode enabled\n                        languages: selectedLanguages,\n                        ignore_patterns: ignorePatterns\n                    });\n                    \n                    this.updateBreadcrumb(`Loading ${d.data.name}...`, 'info');\n                    this.showNotification(`Loading directory: ${d.data.name}`, 'info');\n                } else {\n                    console.error('❌ [SUBDIRECTORY LOADING] No WebSocket connection available!');\n                    this.showNotification(`Cannot load directory: No connection`, 'error');\n                    \n                    // Clear loading state since the request failed\n                    this.loadingNodes.delete(d.data.path);\n                    const d3Node = this.findD3NodeByPath(d.data.path);\n                    if (d3Node) {\n                        this.removeLoadingPulse(d3Node);\n                    }\n                    // Reset the loaded flag\n                    d.data.loaded = false;\n                }\n            }, 100);  // 100ms delay to ensure visual effects render first\n        } \n        // For files that haven't been analyzed, request analysis\n        else if (d.data.type === 'file' && !d.data.analyzed) {\n            // Only analyze files of selected languages\n            const fileLanguage = this.detectLanguage(d.data.path);\n            if (!selectedLanguages.includes(fileLanguage) && fileLanguage !== 'unknown') {\n                this.showNotification(`Skipping ${d.data.name} - ${fileLanguage} not selected`, 'warning');\n                return;\n            }\n            \n            // Add pulsing animation immediately\n            this.addLoadingPulse(d);\n            \n            // Mark as loading immediately\n            d.data.analyzed = 'loading';\n            \n            // Ensure path is absolute or relative to working directory\n            const fullPath = this.ensureFullPath(d.data.path);\n            \n            // Delay the socket request to ensure visual effects are rendered\n            setTimeout(() => {\n                \n                if (this.socket) {\n                    this.socket.emit('code:analyze:file', {\n                        path: fullPath\n                    });\n                    \n                    this.updateBreadcrumb(`Analyzing ${d.data.name}...`, 'info');\n                    this.showNotification(`Analyzing: ${d.data.name}`, 'info');\n                }\n            }, 100);  // 100ms delay to ensure visual effects render first\n        }\n        // Toggle children visibility for already loaded nodes\n        else if (d.data.type === 'directory' && d.data.loaded === true) {\n            // Directory is loaded, toggle expansion\n            if (d.children) {\n                // Collapse - hide children\n                d._children = d.children;\n                d.children = null;\n                d.data.expanded = false;\n            } else if (d._children) {\n                // Expand - show children\n                d.children = d._children;\n                d._children = null;\n                d.data.expanded = true;\n            } else if (d.data.children && d.data.children.length > 0) {\n                // Children exist in data but not in D3 node, recreate hierarchy\n                this.root = d3.hierarchy(this.treeData);\n                const updatedD3Node = this.findD3NodeByPath(d.data.path);\n                if (updatedD3Node) {\n                    updatedD3Node.children = updatedD3Node._children || updatedD3Node.children;\n                    updatedD3Node._children = null;\n                    updatedD3Node.data.expanded = true;\n                }\n            }\n            this.update(this.root);\n        }\n        // Also handle other nodes that might have children\n        else if (d.children || d._children) {\n            if (d.children) {\n                d._children = d.children;\n                d.children = null;\n                d.data.expanded = false;\n            } else {\n                d.children = d._children;\n                d._children = null;\n                d.data.expanded = true;\n            }\n            this.update(d);\n        } else {\n        }\n        \n        // Update selection\n        this.selectedNode = d;\n        try {\n            this.highlightNode(d);\n        } catch (error) {\n            console.error('[CodeTree] ERROR during highlightNode:', error);\n        }\n        \n    }\n    \n    /**\n     * Ensure path is absolute or relative to working directory\n     */\n    ensureFullPath(path) {\n        console.log('🔗 ensureFullPath called with:', path);\n        \n        if (!path) return path;\n        \n        // If already absolute, return as is\n        if (path.startsWith('/')) {\n            console.log('  → Already absolute, returning:', path);\n            return path;\n        }\n        \n        // Get working directory\n        const workingDir = this.getWorkingDirectory();\n        console.log('  → Working directory:', workingDir);\n        \n        if (!workingDir) {\n            console.log('  → No working directory, returning original:', path);\n            return path;\n        }\n        \n        // Special handling for root path\n        if (path === '.') {\n            console.log('  → Root path detected, returning working dir:', workingDir);\n            return workingDir;\n        }\n        \n        // If path equals working directory, return as is\n        if (path === workingDir) {\n            console.log('  → Path equals working directory, returning:', workingDir);\n            return workingDir;\n        }\n        \n        // Combine working directory with relative path\n        const result = `${workingDir}/${path}`.replace(/\\/+/g, '/');\n        console.log('  → Combining with working dir, result:', result);\n        return result;\n    }\n\n    /**\n     * Highlight selected node\n     */\n    highlightNode(node) {\n        // Remove previous highlights\n        this.treeGroup.selectAll('circle.node-circle')\n            .style('stroke-width', 2)\n            .classed('selected', false);\n\n        // Highlight selected node\n        this.treeGroup.selectAll('circle.node-circle')\n            .filter(d => d === node)\n            .style('stroke-width', 4)\n            .classed('selected', true);\n    }\n\n    /**\n     * Create diagonal path for links\n     */\n    diagonal(s, d) {\n        return `M ${s.y} ${s.x}\n                C ${(s.y + d.y) / 2} ${s.x},\n                  ${(s.y + d.y) / 2} ${d.x},\n                  ${d.y} ${d.x}`;\n    }\n    \n    /**\n     * Create radial diagonal path for links\n     */\n    radialDiagonal(s, d) {\n        const path = d3.linkRadial()\n            .angle(d => d.x)\n            .radius(d => d.y);\n        return path({source: s, target: d});\n    }\n\n    /**\n     * Get node color based on type and complexity\n     */\n    getNodeColor(d) {\n        const type = d.data.type;\n        const complexity = d.data.complexity || 1;\n\n        // Base colors by type\n        const baseColors = {\n            'root': '#6B7280',\n            'directory': '#3B82F6',\n            'file': '#10B981',\n            'module': '#8B5CF6',\n            'class': '#F59E0B',\n            'function': '#EF4444',\n            'method': '#EC4899'\n        };\n\n        const baseColor = baseColors[type] || '#6B7280';\n\n        // Adjust brightness based on complexity (higher complexity = darker)\n        if (complexity > 10) {\n            return d3.color(baseColor).darker(0.5);\n        } else if (complexity > 5) {\n            return d3.color(baseColor).darker(0.25);\n        }\n        \n        return baseColor;\n    }\n\n    /**\n     * Get node stroke color\n     */\n    getNodeStrokeColor(d) {\n        if (d.data.loaded === 'loading' || d.data.analyzed === 'loading') {\n            return '#FCD34D';  // Yellow for loading\n        }\n        if (d.data.type === 'directory' && !d.data.loaded) {\n            return '#94A3B8';  // Gray for unloaded\n        }\n        if (d.data.type === 'file' && !d.data.analyzed) {\n            return '#CBD5E1';  // Light gray for unanalyzed\n        }\n        return this.getNodeColor(d);\n    }\n\n    /**\n     * Get icon for node type\n     */\n    getNodeIcon(d) {\n        const icons = {\n            'root': '📦',\n            'directory': '📁',\n            'file': '📄',\n            'module': '📦',\n            'class': 'C',\n            'function': 'ƒ',\n            'method': 'm'\n        };\n        return icons[d.data.type] || '•';\n    }\n\n    /**\n     * Show tooltip on hover\n     */\n    showTooltip(event, d) {\n        if (!this.tooltip) return;\n\n        const info = [];\n        info.push(`<strong>${d.data.name}</strong>`);\n        info.push(`Type: ${d.data.type}`);\n        \n        if (d.data.language) {\n            info.push(`Language: ${d.data.language}`);\n        }\n        if (d.data.complexity) {\n            info.push(`Complexity: ${d.data.complexity}`);\n        }\n        if (d.data.lines) {\n            info.push(`Lines: ${d.data.lines}`);\n        }\n        if (d.data.path) {\n            info.push(`Path: ${d.data.path}`);\n        }\n        \n        // Special messages for lazy-loaded nodes\n        if (d.data.type === 'directory' && !d.data.loaded) {\n            info.push('<em>Click to explore contents</em>');\n        } else if (d.data.type === 'file' && !d.data.analyzed) {\n            info.push('<em>Click to analyze file</em>');\n        }\n\n        this.tooltip.transition()\n            .duration(200)\n            .style('opacity', .9);\n\n        this.tooltip.html(info.join('<br>'))\n            .style('left', (event.pageX + 10) + 'px')\n            .style('top', (event.pageY - 28) + 'px');\n    }\n\n    /**\n     * Hide tooltip\n     */\n    hideTooltip() {\n        if (!this.tooltip) return;\n        \n        this.tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n    }\n\n    /**\n     * Filter tree based on language and search\n     */\n    filterTree() {\n        if (!this.root) return;\n\n        // Apply filters\n        this.root.descendants().forEach(d => {\n            d.data._hidden = false;\n\n            // Language filter\n            if (this.languageFilter !== 'all') {\n                if (d.data.type === 'file' && d.data.language !== this.languageFilter) {\n                    d.data._hidden = true;\n                }\n            }\n\n            // Search filter\n            if (this.searchTerm) {\n                if (!d.data.name.toLowerCase().includes(this.searchTerm)) {\n                    d.data._hidden = true;\n                }\n            }\n        });\n\n        // Update display\n        this.update(this.root);\n    }\n\n    /**\n     * Expand all nodes in the tree\n     */\n    expandAll() {\n        if (!this.root) return;\n        \n        // Recursively expand all nodes\n        const expandRecursive = (node) => {\n            if (node._children) {\n                node.children = node._children;\n                node._children = null;\n            }\n            if (node.children) {\n                node.children.forEach(expandRecursive);\n            }\n        };\n        \n        expandRecursive(this.root);\n        this.update(this.root);\n        this.showNotification('All nodes expanded', 'info');\n    }\n\n    /**\n     * Collapse all nodes in the tree\n     */\n    collapseAll() {\n        if (!this.root) return;\n        \n        // Recursively collapse all nodes except root\n        const collapseRecursive = (node) => {\n            if (node.children) {\n                node._children = node.children;\n                node.children = null;\n            }\n            if (node._children) {\n                node._children.forEach(collapseRecursive);\n            }\n        };\n        \n        this.root.children?.forEach(collapseRecursive);\n        this.update(this.root);\n        this.showNotification('All nodes collapsed', 'info');\n    }\n\n    /**\n     * Reset zoom to fit the tree\n     */\n    resetZoom() {\n        // DISABLED: All zoom reset operations have been disabled to prevent tree centering/movement\n        // The tree should remain stationary and not center/move when interacting with nodes\n        console.log('[CodeTree] resetZoom called but disabled - no zoom reset will occur');\n        this.showNotification('Zoom reset disabled - tree remains stationary', 'info');\n        return;\n    }\n\n    /**\n     * REMOVED: Focus on a specific node and its subtree\n     * This method has been completely disabled to prevent unwanted tree movement.\n     * All centering and focus functionality has been removed from the code tree.\n     */\n    focusOnNode(node) {\n        // Method disabled - no focusing/centering operations will be performed\n        console.log('[CodeTree] focusOnNode called but disabled - no focusing will occur');\n        return;\n        \n        // Update breadcrumb with focused path\n        const path = this.getNodePath(node);\n        this.updateBreadcrumb(`Focused: ${path}`, 'info');\n    }\n    \n    /**\n     * Get the full path of a node\n     */\n    getNodePath(node) {\n        const path = [];\n        let current = node;\n        while (current) {\n            if (current.data && current.data.name) {\n                path.unshift(current.data.name);\n            }\n            current = current.parent;\n        }\n        return path.join(' / ');\n    }\n\n    /**\n     * Toggle legend visibility\n     */\n    toggleLegend() {\n        const legend = document.getElementById('tree-legend');\n        if (legend) {\n            if (legend.style.display === 'none') {\n                legend.style.display = 'block';\n            } else {\n                legend.style.display = 'none';\n            }\n        }\n    }\n\n    /**\n     * Get the current working directory\n     */\n    getWorkingDirectory() {\n        // Try to get from dashboard's working directory manager\n        if (window.dashboard && window.dashboard.workingDirectoryManager) {\n            return window.dashboard.workingDirectoryManager.getCurrentWorkingDir();\n        }\n        \n        // Fallback to checking the DOM element\n        const workingDirPath = document.getElementById('working-dir-path');\n        if (workingDirPath) {\n            const pathText = workingDirPath.textContent.trim();\n            if (pathText && pathText !== 'Loading...' && pathText !== 'Not selected') {\n                return pathText;\n            }\n        }\n        \n        return null;\n    }\n    \n    /**\n     * Show a message when no working directory is selected\n     */\n    showNoWorkingDirectoryMessage() {\n        const container = document.getElementById('code-tree-container');\n        if (!container) return;\n        \n        // Remove any existing message\n        this.removeNoWorkingDirectoryMessage();\n        \n        // Hide loading if shown\n        this.hideLoading();\n        \n        // Create message element\n        const messageDiv = document.createElement('div');\n        messageDiv.id = 'no-working-dir-message';\n        messageDiv.className = 'no-working-dir-message';\n        messageDiv.innerHTML = `\n            <div class=\"message-icon\">📁</div>\n            <h3>No Working Directory Selected</h3>\n            <p>Please select a working directory from the top menu to analyze code.</p>\n            <button id=\"select-working-dir-btn\" class=\"btn btn-primary\">\n                Select Working Directory\n            </button>\n        `;\n        messageDiv.style.cssText = `\n            text-align: center;\n            padding: 40px;\n            color: #666;\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        `;\n        \n        // Style the message elements\n        const messageIcon = messageDiv.querySelector('.message-icon');\n        if (messageIcon) {\n            messageIcon.style.cssText = 'font-size: 48px; margin-bottom: 16px; opacity: 0.5;';\n        }\n        \n        const h3 = messageDiv.querySelector('h3');\n        if (h3) {\n            h3.style.cssText = 'margin: 16px 0; color: #333; font-size: 20px;';\n        }\n        \n        const p = messageDiv.querySelector('p');\n        if (p) {\n            p.style.cssText = 'margin: 16px 0; color: #666; font-size: 14px;';\n        }\n        \n        const button = messageDiv.querySelector('button');\n        if (button) {\n            button.style.cssText = `\n                margin-top: 20px;\n                padding: 10px 20px;\n                background: #3b82f6;\n                color: white;\n                border: none;\n                border-radius: 6px;\n                cursor: pointer;\n                font-size: 14px;\n                transition: background 0.2s;\n            `;\n            button.addEventListener('mouseenter', () => {\n                button.style.background = '#2563eb';\n            });\n            button.addEventListener('mouseleave', () => {\n                button.style.background = '#3b82f6';\n            });\n            button.addEventListener('click', () => {\n                // Trigger working directory selection\n                const changeDirBtn = document.getElementById('change-dir-btn');\n                if (changeDirBtn) {\n                    changeDirBtn.click();\n                } else if (window.dashboard && window.dashboard.workingDirectoryManager) {\n                    window.dashboard.workingDirectoryManager.showChangeDirDialog();\n                }\n            });\n        }\n        \n        container.appendChild(messageDiv);\n        \n        // Update breadcrumb\n        this.updateBreadcrumb('Please select a working directory', 'warning');\n    }\n    \n    /**\n     * Remove the no working directory message\n     */\n    removeNoWorkingDirectoryMessage() {\n        const message = document.getElementById('no-working-dir-message');\n        if (message) {\n            message.remove();\n        }\n    }\n    \n    /**\n     * Export tree data\n     */\n    exportTree() {\n        const exportData = {\n            timestamp: new Date().toISOString(),\n            workingDirectory: this.getWorkingDirectory(),\n            stats: this.stats,\n            tree: this.treeData\n        };\n\n        const blob = new Blob([JSON.stringify(exportData, null, 2)], \n                             {type: 'application/json'});\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `code-tree-${Date.now()}.json`;\n        link.click();\n        URL.revokeObjectURL(url);\n\n        this.showNotification('Tree exported successfully', 'success');\n    }\n\n    /**\n     * Update activity ticker with real-time messages\n     */\n    updateActivityTicker(message, type = 'info') {\n        const breadcrumb = document.getElementById('breadcrumb-content');\n        if (breadcrumb) {\n            // Add spinning icon for loading states\n            const icon = type === 'info' && message.includes('...') ? '⟳ ' : '';\n            breadcrumb.innerHTML = `${icon}${message}`;\n            breadcrumb.className = `breadcrumb-${type}`;\n        }\n    }\n    \n    /**\n     * Update ticker message\n     */\n    updateTicker(message, type = 'info') {\n        const ticker = document.getElementById('code-tree-ticker');\n        if (ticker) {\n            ticker.textContent = message;\n            ticker.className = `ticker ticker-${type}`;\n            \n            // Auto-hide after 5 seconds for non-error messages\n            if (type !== 'error') {\n                setTimeout(() => {\n                    ticker.style.opacity = '0';\n                    setTimeout(() => {\n                        ticker.style.opacity = '1';\n                        ticker.textContent = '';\n                    }, 300);\n                }, 5000);\n            }\n        }\n    }\n}\n\n// Export for use in other modules\nwindow.CodeTree = CodeTree;\n\n// Auto-initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Check if we're on a page with code tree container\n    if (document.getElementById('code-tree-container')) {\n        window.codeTree = new CodeTree();\n        \n        // Listen for tab changes to initialize when code tab is selected\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('[data-tab=\"code\"]')) {\n                setTimeout(() => {\n                    if (window.codeTree && !window.codeTree.initialized) {\n                        window.codeTree.initialize();\n                    } else if (window.codeTree) {\n                        window.codeTree.renderWhenVisible();\n                    }\n                }, 100);\n            }\n        });\n    }\n});/* Cache buster: 1756393851 */\n"],"names":["CodeTree","constructor","this","container","svg","treeData","root","treeLayout","treeGroup","nodes","Map","stats","files","classes","functions","methods","lines","isRadialLayout","margin","top","right","bottom","left","width","height","radius","Math","min","nodeId","duration","languageFilter","searchTerm","tooltip","initialized","analyzing","selectedNode","socket","autoDiscovered","zoom","activeNode","loadingNodes","Set","bulkLoadMode","expandedPaths","initialize","document","getElementById","console","error","tabPanel","workingDir","getWorkingDirectory","showNoWorkingDirectoryMessage","setupControls","initializeTreeData","subscribeToEvents","updateActivityTicker","classList","contains","createVisualization","update","autoDiscoverRootLevel","renderWhenVisible","removeNoWorkingDirectoryMessage","addEventListener","e","target","value","filterTree","searchBox","toLowerCase","expandBtn","expandAll","collapseBtn","collapseAll","resetZoomBtn","resetZoom","toggleLegendBtn","toggleLegend","onWorkingDirectoryChanged","detail","directory","newDirectory","clear","updateStats","showLoading","loadingDiv","createElement","id","innerHTML","appendChild","remove","hideLoading","add","d3","select","selectAll","addTreeControls","addBreadcrumb","node","containerNode","containerWidth","clientWidth","containerHeight","clientHeight","append","attr","centerX","centerY","cluster","size","PI","separation","a","b","parent","depthFactor","max","depth","siblingCount","children","length","siblingFactor","radiusFactor","tree","nodeSize","log","addVisualizationControls","style","clearD3Visualization","dirName","split","pop","name","path","type","loaded","expanded","hierarchy","x0","y0","window","setupEventHandlers","dashboard","socketClient","warn","startsWith","match","showNotification","hasListeners","updateBreadcrumb","selectedLanguages","querySelectorAll","forEach","cb","push","ignorePatterns","requestPayload","languages","ignore_patterns","request_id","Date","now","emit","analyzeCode","cancelAnalysis","toolbar","text","on","toggleBulkLoad","toggleLayout","event","searchTree","key","updateBreadcrumbPath","currentPath","pathDiv","segments","filter","s","segment","index","parentPath","slice","join","navigateToPath","expandNode","data","_children","collapseNode","button","classed","query","trim","matchingNodes","searchNode","includes","matchNode","d","expandPathToNode","targetNode","pathToExpand","current","unshift","createEventsDisplay","eventsContainer","treeContainer","className","display","clearEventsDisplay","addEventToDisplay","message","eventEl","borderLeftColor","timestamp","toLocaleTimeString","scrollTop","scrollHeight","onAnalysisAccepted","onAnalysisQueued","onAnalysisStart","onAnalysisComplete","onAnalysisCancelled","onAnalysisError","onTopLevelDiscovered","onDirectoryDiscovered","onFileDiscovered","onFileAnalyzed","onNodeFound","onProgressUpdate","searchPath","substring","replace","findNodeByPath","d3Node","findD3NodeByPath","has","removeLoadingPulse","delete","map","child","childPath","childName","analyzed","oldRoot","preserveExpansionState","updatedD3Node","directories","items","Array","isArray","item","language","detectLanguage","rootNode","currentChildren","has_code","Object","keys","childrenCount","c","fullEventData","nodeFound","nodeName","nodePath","nodeChildren","dataHasChildren","dataChildrenLength","logAllPaths","dataChildrenIsArray","dataChildrenValue","dataKeys","fullData","nodeExists","pathParts","p","forceAdd","dirNode","addNodeToTree","originalPath","allTreePaths","getAllTreePaths","fileName","fileNode","complexity","elements","elem","line","docstring","m","typeIcon","nodeInfo","class","function","method","module","file","parent_path","file_path","parts","elementType","charAt","toUpperCase","progress","progressBar","querySelector","position","onInfoEvent","debugMode","showFilterEvents","debug","reason","showCacheEvents","eventLogEnabled","recentEvents","toISOString","notification","textContent","zIndex","setTimeout","animation","parentNode","existingNode","find","assign","set","found","indent","paths","descendants","newRoot","expansionMap","statsElements","entries","toLocaleString","progressText","statusText","breadcrumbContent","filePath","py","js","ts","jsx","tsx","java","cpp","cs","rb","go","rs","php","swift","kt","scala","r","sh","ps1","toggleButton","radialPoint","x","y","cos","sin","source","links","nodeEnter","enter","onNodeClick","getNodeColor","getNodeStrokeColor","showTooltip","hideTooltip","maxLength","getNodeIcon","count","nodeUpdate","merge","transition","isRadial","each","selection","angle","nodeExit","exit","link","insert","o","radialDiagonal","diagonal","centerOnNode","centerOnNodeRadial","highlightActiveNode","allCircles","activeNodeCircle","addLoadingPulse","pulseAnimation","interrupt","showWithParent","parentCircle","stopPropagation","stack","ignorePatternsElement","fileLanguage","fullPath","ensureFullPath","nodeType","hasSocket","highlightNode","result","linkRadial","baseColor","color","darker","info","html","pageX","pageY","_hidden","expandRecursive","collapseRecursive","focusOnNode","getNodePath","legend","workingDirectoryManager","getCurrentWorkingDir","workingDirPath","pathText","messageDiv","cssText","messageIcon","h3","background","changeDirBtn","click","showChangeDirDialog","exportTree","exportData","workingDirectory","blob","Blob","JSON","stringify","url","URL","createObjectURL","href","download","revokeObjectURL","breadcrumb","icon","updateTicker","ticker","opacity","codeTree","matches"],"mappings":"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"}