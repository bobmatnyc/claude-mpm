{"version":3,"file":"code-tree.js","sources":["../../js/components/code-tree.js"],"sourcesContent":["/**\n * Code Tree Component\n * \n * D3.js-based tree visualization for displaying AST-based code structure.\n * Shows modules, classes, functions, and methods with complexity-based coloring.\n * Provides real-time updates during code analysis.\n */\n\nclass CodeTree {\n    constructor() {\n        this.container = null;\n        this.svg = null;\n        this.treeData = null;\n        this.root = null;\n        this.treeLayout = null;\n        this.treeGroup = null;\n        this.nodes = new Map();\n        this.stats = {\n            files: 0,\n            classes: 0,\n            functions: 0,\n            methods: 0,\n            lines: 0\n        };\n        // Radial layout settings\n        this.isRadialLayout = true;  // Toggle for radial vs linear layout\n        this.margin = {top: 20, right: 20, bottom: 20, left: 20};\n        this.width = 960 - this.margin.left - this.margin.right;\n        this.height = 600 - this.margin.top - this.margin.bottom;\n        this.radius = Math.min(this.width, this.height) / 2;\n        this.nodeId = 0;\n        this.duration = 750;\n        this.languageFilter = 'all';\n        this.searchTerm = '';\n        this.tooltip = null;\n        this.initialized = false;\n        this.analyzing = false;\n        this.selectedNode = null;\n        this.socket = null;\n        this.autoDiscovered = false;  // Track if auto-discovery has been done\n        this.zoom = null;  // Store zoom behavior\n        this.activeNode = null;  // Track currently active node\n        this.loadingNodes = new Set();  // Track nodes that are loading\n    }\n\n    /**\n     * Initialize the code tree visualization\n     */\n    initialize() {\n        if (this.initialized) {\n            return;\n        }\n        \n        this.container = document.getElementById('code-tree-container');\n        if (!this.container) {\n            console.error('Code tree container not found');\n            return;\n        }\n        \n        // Check if tab is visible\n        const tabPanel = document.getElementById('code-tab');\n        if (!tabPanel) {\n            console.error('Code tab panel not found');\n            return;\n        }\n        \n        // Check if working directory is set\n        const workingDir = this.getWorkingDirectory();\n        if (!workingDir || workingDir === 'Loading...' || workingDir === 'Not selected') {\n            this.showNoWorkingDirectoryMessage();\n            this.initialized = true;\n            return;\n        }\n        \n        // Initialize always\n        this.setupControls();\n        this.initializeTreeData();\n        this.subscribeToEvents();\n        \n        // Set initial status message\n        const breadcrumbContent = document.getElementById('breadcrumb-content');\n        if (breadcrumbContent && !this.analyzing) {\n            this.updateActivityTicker('Loading project structure...', 'info');\n        }\n        \n        // Only create visualization if tab is visible\n        if (tabPanel.classList.contains('active')) {\n            this.createVisualization();\n            if (this.root && this.svg) {\n                this.update(this.root);\n            }\n            // Auto-discover root level when tab is active\n            this.autoDiscoverRootLevel();\n        }\n        \n        this.initialized = true;\n    }\n\n    /**\n     * Render visualization when tab becomes visible\n     */\n    renderWhenVisible() {\n        // Check if working directory is set\n        const workingDir = this.getWorkingDirectory();\n        if (!workingDir || workingDir === 'Loading...' || workingDir === 'Not selected') {\n            this.showNoWorkingDirectoryMessage();\n            return;\n        }\n        \n        // If no directory message is shown, remove it\n        this.removeNoWorkingDirectoryMessage();\n        \n        if (!this.initialized) {\n            this.initialize();\n            return;\n        }\n        \n        if (!this.svg) {\n            this.createVisualization();\n            if (this.svg && this.treeGroup) {\n                this.update(this.root);\n            }\n        } else {\n            // Force update with current data\n            if (this.root && this.svg) {\n                this.update(this.root);\n            }\n        }\n        \n        // Auto-discover root level if not done yet\n        if (!this.autoDiscovered) {\n            this.autoDiscoverRootLevel();\n        }\n    }\n\n    /**\n     * Set up control event handlers\n     */\n    setupControls() {\n        // Remove analyze and cancel button handlers since they're no longer in the UI\n\n        const languageFilter = document.getElementById('language-filter');\n        if (languageFilter) {\n            languageFilter.addEventListener('change', (e) => {\n                this.languageFilter = e.target.value;\n                this.filterTree();\n            });\n        }\n\n        const searchBox = document.getElementById('code-search');\n        if (searchBox) {\n            searchBox.addEventListener('input', (e) => {\n                this.searchTerm = e.target.value.toLowerCase();\n                this.filterTree();\n            });\n        }\n\n        const expandBtn = document.getElementById('code-expand-all');\n        if (expandBtn) {\n            expandBtn.addEventListener('click', () => this.expandAll());\n        }\n        \n        const collapseBtn = document.getElementById('code-collapse-all');\n        if (collapseBtn) {\n            collapseBtn.addEventListener('click', () => this.collapseAll());\n        }\n        \n        const resetZoomBtn = document.getElementById('code-reset-zoom');\n        if (resetZoomBtn) {\n            resetZoomBtn.addEventListener('click', () => this.resetZoom());\n        }\n        \n        const toggleLegendBtn = document.getElementById('code-toggle-legend');\n        if (toggleLegendBtn) {\n            toggleLegendBtn.addEventListener('click', () => this.toggleLegend());\n        }\n        \n        // Listen for show hidden files toggle\n        const showHiddenFilesCheckbox = document.getElementById('show-hidden-files');\n        if (showHiddenFilesCheckbox) {\n            showHiddenFilesCheckbox.addEventListener('change', () => {\n                // Clear tree and re-discover with new settings\n                this.autoDiscovered = false;\n                this.initializeTreeData();\n                this.autoDiscoverRootLevel();\n                this.showNotification(\n                    showHiddenFilesCheckbox.checked ? 'Showing hidden files' : 'Hiding hidden files', \n                    'info'\n                );\n            });\n        }\n        \n        // Listen for working directory changes\n        document.addEventListener('workingDirectoryChanged', (e) => {\n            console.log('Working directory changed to:', e.detail.directory);\n            this.onWorkingDirectoryChanged(e.detail.directory);\n        });\n    }\n    \n    /**\n     * Handle working directory change\n     */\n    onWorkingDirectoryChanged(newDirectory) {\n        if (!newDirectory || newDirectory === 'Loading...' || newDirectory === 'Not selected') {\n            // Show no directory message\n            this.showNoWorkingDirectoryMessage();\n            // Reset tree state\n            this.autoDiscovered = false;\n            this.analyzing = false;\n            this.nodes.clear();\n            this.stats = {\n                files: 0,\n                classes: 0,\n                functions: 0,\n                methods: 0,\n                lines: 0\n            };\n            this.updateStats();\n            return;\n        }\n        \n        // Remove any no directory message\n        this.removeNoWorkingDirectoryMessage();\n        \n        // Reset discovery state for new directory\n        this.autoDiscovered = false;\n        this.analyzing = false;\n        \n        // Clear existing data\n        this.nodes.clear();\n        this.stats = {\n            files: 0,\n            classes: 0,\n            functions: 0,\n            methods: 0,\n            lines: 0\n        };\n        \n        // Re-initialize with new directory\n        this.initializeTreeData();\n        if (this.svg) {\n            this.update(this.root);\n        }\n        \n        // Check if Code tab is currently active\n        const tabPanel = document.getElementById('code-tab');\n        if (tabPanel && tabPanel.classList.contains('active')) {\n            // Auto-discover in the new directory\n            this.autoDiscoverRootLevel();\n        }\n        \n        this.updateStats();\n    }\n\n    /**\n     * Show loading spinner\n     */\n    showLoading() {\n        let loadingDiv = document.getElementById('code-tree-loading');\n        if (!loadingDiv) {\n            // Create loading element if it doesn't exist\n            const container = document.getElementById('code-tree-container');\n            if (container) {\n                loadingDiv = document.createElement('div');\n                loadingDiv.id = 'code-tree-loading';\n                loadingDiv.innerHTML = `\n                    <div class=\"code-tree-spinner\"></div>\n                    <div class=\"code-tree-loading-text\">Analyzing code structure...</div>\n                `;\n                container.appendChild(loadingDiv);\n            }\n        }\n        if (loadingDiv) {\n            loadingDiv.classList.remove('hidden');\n        }\n    }\n\n    /**\n     * Hide loading spinner\n     */\n    hideLoading() {\n        const loadingDiv = document.getElementById('code-tree-loading');\n        if (loadingDiv) {\n            loadingDiv.classList.add('hidden');\n        }\n    }\n\n    /**\n     * Create the D3.js visualization\n     */\n    createVisualization() {\n        if (typeof d3 === 'undefined') {\n            console.error('D3.js is not loaded');\n            return;\n        }\n\n        const container = d3.select('#code-tree-container');\n        container.selectAll('*').remove();\n\n        if (!container || !container.node()) {\n            console.error('Code tree container not found');\n            return;\n        }\n\n        // Calculate dimensions\n        const containerNode = container.node();\n        const containerWidth = containerNode.clientWidth || 960;\n        const containerHeight = containerNode.clientHeight || 600;\n\n        this.width = containerWidth - this.margin.left - this.margin.right;\n        this.height = containerHeight - this.margin.top - this.margin.bottom;\n        this.radius = Math.min(this.width, this.height) / 2;\n\n        // Create SVG\n        this.svg = container.append('svg')\n            .attr('width', containerWidth)\n            .attr('height', containerHeight);\n\n        // Create tree group with appropriate centering\n        const centerX = containerWidth / 2;\n        const centerY = containerHeight / 2;\n        \n        // Different initial positioning for different layouts\n        if (this.isRadialLayout) {\n            // Radial: center in the middle of the canvas\n            this.treeGroup = this.svg.append('g')\n                .attr('transform', `translate(${centerX},${centerY})`);\n        } else {\n            // Linear: start from left with some margin\n            this.treeGroup = this.svg.append('g')\n                .attr('transform', `translate(${this.margin.left + 100},${centerY})`);\n        }\n\n        // Create tree layout with improved spacing\n        if (this.isRadialLayout) {\n            // Use d3.cluster for better radial distribution\n            this.treeLayout = d3.cluster()\n                .size([2 * Math.PI, this.radius - 100])\n                .separation((a, b) => {\n                    // Enhanced separation for radial layout\n                    if (a.parent == b.parent) {\n                        // Base separation on tree depth for better spacing\n                        const depthFactor = Math.max(1, 4 - a.depth);\n                        // Increase spacing for nodes with many siblings\n                        const siblingCount = a.parent ? (a.parent.children?.length || 1) : 1;\n                        const siblingFactor = siblingCount > 5 ? 2 : (siblingCount > 3 ? 1.5 : 1);\n                        // More spacing at outer levels where circumference is larger\n                        const radiusFactor = 1 + (a.depth * 0.2);\n                        return (depthFactor * siblingFactor) / (a.depth || 1) * radiusFactor;\n                    } else {\n                        // Different parents - ensure enough space\n                        return 4 / (a.depth || 1);\n                    }\n                });\n        } else {\n            // Linear layout with dynamic sizing based on node count\n            // Use nodeSize for consistent spacing regardless of tree size\n            this.treeLayout = d3.tree()\n                .nodeSize([30, 200])  // Fixed spacing: 30px vertical, 200px horizontal\n                .separation((a, b) => {\n                    // Consistent separation for linear layout\n                    if (a.parent == b.parent) {\n                        // Same parent - standard spacing\n                        return 1;\n                    } else {\n                        // Different parents - slightly more space\n                        return 1.5;\n                    }\n                });\n        }\n\n        // Add zoom behavior with proper transform handling\n        this.zoom = d3.zoom()\n            .scaleExtent([0.1, 10])\n            .on('zoom', (event) => {\n                if (this.isRadialLayout) {\n                    // Radial: maintain center point\n                    this.treeGroup.attr('transform', \n                        `translate(${centerX + event.transform.x},${centerY + event.transform.y}) scale(${event.transform.k})`);\n                } else {\n                    // Linear: maintain left margin\n                    this.treeGroup.attr('transform', \n                        `translate(${this.margin.left + 100 + event.transform.x},${centerY + event.transform.y}) scale(${event.transform.k})`);\n                }\n            });\n\n        this.svg.call(this.zoom);\n\n        // Add controls overlay\n        this.addVisualizationControls();\n\n        // Create tooltip\n        this.tooltip = d3.select('body').append('div')\n            .attr('class', 'code-tree-tooltip')\n            .style('opacity', 0)\n            .style('position', 'absolute')\n            .style('background', 'rgba(0, 0, 0, 0.8)')\n            .style('color', 'white')\n            .style('padding', '8px')\n            .style('border-radius', '4px')\n            .style('font-size', '12px')\n            .style('pointer-events', 'none');\n    }\n\n    /**\n     * Initialize tree data structure\n     */\n    initializeTreeData() {\n        const workingDir = this.getWorkingDirectory();\n        const dirName = workingDir ? workingDir.split('/').pop() || 'Project Root' : 'Project Root';\n        const path = workingDir || '.';\n        \n        this.treeData = {\n            name: dirName,\n            path: path,\n            type: 'root',\n            children: [],\n            loaded: false,\n            expanded: true  // Start expanded\n        };\n\n        if (typeof d3 !== 'undefined') {\n            this.root = d3.hierarchy(this.treeData);\n            this.root.x0 = this.height / 2;\n            this.root.y0 = 0;\n        }\n    }\n\n    /**\n     * Subscribe to code analysis events\n     */\n    subscribeToEvents() {\n        if (!this.socket) {\n            if (window.socket) {\n                this.socket = window.socket;\n                this.setupEventHandlers();\n            } else if (window.dashboard?.socketClient?.socket) {\n                this.socket = window.dashboard.socketClient.socket;\n                this.setupEventHandlers();\n            } else if (window.socketClient?.socket) {\n                this.socket = window.socketClient.socket;\n                this.setupEventHandlers();\n            }\n        }\n    }\n\n    /**\n     * Automatically discover root-level objects when tab opens\n     */\n    autoDiscoverRootLevel() {\n        if (this.autoDiscovered || this.analyzing) {\n            return;\n        }\n        \n        // Update activity ticker\n        this.updateActivityTicker('🔍 Discovering project structure...', 'info');\n        \n        // Get working directory\n        const workingDir = this.getWorkingDirectory();\n        if (!workingDir || workingDir === 'Loading...' || workingDir === 'Not selected') {\n            console.warn('Cannot auto-discover: no working directory set');\n            this.showNoWorkingDirectoryMessage();\n            return;\n        }\n        \n        // Ensure we have an absolute path\n        if (!workingDir.startsWith('/') && !workingDir.match(/^[A-Z]:\\\\/)) {\n            console.error('Working directory is not absolute:', workingDir);\n            this.showNotification('Invalid working directory path', 'error');\n            return;\n        }\n        \n        console.log('Auto-discovering root level for:', workingDir);\n        \n        this.autoDiscovered = true;\n        this.analyzing = true;\n        \n        // Clear any existing nodes\n        this.nodes.clear();\n        this.stats = {\n            files: 0,\n            classes: 0,\n            functions: 0,\n            methods: 0,\n            lines: 0\n        };\n        \n        // Subscribe to events if not already done\n        if (this.socket && !this.socket.hasListeners('code:node:found')) {\n            this.setupEventHandlers();\n        }\n        \n        // Update tree data with working directory as the root\n        const dirName = workingDir.split('/').pop() || 'Project Root';\n        this.treeData = {\n            name: dirName,\n            path: workingDir,\n            type: 'root',\n            children: [],\n            loaded: false,\n            expanded: true  // Start expanded to show discovered items\n        };\n        \n        if (typeof d3 !== 'undefined') {\n            this.root = d3.hierarchy(this.treeData);\n            this.root.x0 = this.height / 2;\n            this.root.y0 = 0;\n        }\n        \n        // Update UI\n        this.showLoading();\n        this.updateBreadcrumb(`Discovering structure in ${dirName}...`, 'info');\n        \n        // Get selected languages from checkboxes\n        const selectedLanguages = [];\n        document.querySelectorAll('.language-checkbox:checked').forEach(cb => {\n            selectedLanguages.push(cb.value);\n        });\n        \n        // Get ignore patterns\n        const ignorePatterns = document.getElementById('ignore-patterns')?.value || '';\n        \n        // Get show hidden files setting\n        const showHiddenFiles = document.getElementById('show-hidden-files')?.checked || false;\n        \n        // Debug logging\n        console.log('[DEBUG] Show hidden files checkbox value:', showHiddenFiles);\n        console.log('[DEBUG] Checkbox element:', document.getElementById('show-hidden-files'));\n        \n        // Request top-level discovery with working directory\n        const requestPayload = {\n            path: workingDir,  // Use working directory instead of '.'\n            depth: 'top_level',\n            languages: selectedLanguages,\n            ignore_patterns: ignorePatterns,\n            show_hidden_files: showHiddenFiles\n        };\n        \n        console.log('[DEBUG] Sending discovery request with payload:', requestPayload);\n        \n        if (this.socket) {\n            this.socket.emit('code:discover:top_level', requestPayload);\n        }\n        \n        // Update stats display\n        this.updateStats();\n    }\n    \n    /**\n     * Legacy analyzeCode method - redirects to auto-discovery\n     */\n    analyzeCode() {\n        if (this.analyzing) {\n            return;\n        }\n\n        // Redirect to auto-discovery\n        this.autoDiscoverRootLevel();\n    }\n\n    /**\n     * Cancel ongoing analysis - removed since we no longer have a cancel button\n     */\n    cancelAnalysis() {\n        this.analyzing = false;\n        this.hideLoading();\n\n        if (this.socket) {\n            this.socket.emit('code:analysis:cancel');\n        }\n\n        this.updateBreadcrumb('Analysis cancelled', 'warning');\n        this.showNotification('Analysis cancelled', 'warning');\n        this.addEventToDisplay('Analysis cancelled', 'warning');\n    }\n\n    /**\n     * Create the events display area\n     */\n    createEventsDisplay() {\n        let eventsContainer = document.getElementById('analysis-events');\n        if (!eventsContainer) {\n            const treeContainer = document.getElementById('code-tree-container');\n            if (treeContainer) {\n                eventsContainer = document.createElement('div');\n                eventsContainer.id = 'analysis-events';\n                eventsContainer.className = 'analysis-events';\n                eventsContainer.style.display = 'none';\n                treeContainer.appendChild(eventsContainer);\n            }\n        }\n    }\n\n    /**\n     * Clear the events display\n     */\n    clearEventsDisplay() {\n        const eventsContainer = document.getElementById('analysis-events');\n        if (eventsContainer) {\n            eventsContainer.innerHTML = '';\n            eventsContainer.style.display = 'block';\n        }\n    }\n\n    /**\n     * Add an event to the display\n     */\n    addEventToDisplay(message, type = 'info') {\n        const eventsContainer = document.getElementById('analysis-events');\n        if (eventsContainer) {\n            const eventEl = document.createElement('div');\n            eventEl.className = 'analysis-event';\n            eventEl.style.borderLeftColor = type === 'warning' ? '#f59e0b' : \n                                          type === 'error' ? '#ef4444' : '#3b82f6';\n            \n            const timestamp = new Date().toLocaleTimeString();\n            eventEl.innerHTML = `<span style=\"color: #718096;\">[${timestamp}]</span> ${message}`;\n            \n            eventsContainer.appendChild(eventEl);\n            // Auto-scroll to bottom\n            eventsContainer.scrollTop = eventsContainer.scrollHeight;\n        }\n    }\n\n    /**\n     * Setup Socket.IO event handlers\n     */\n    setupEventHandlers() {\n        if (!this.socket) return;\n\n        // Analysis lifecycle events\n        this.socket.on('code:analysis:accepted', (data) => this.onAnalysisAccepted(data));\n        this.socket.on('code:analysis:queued', (data) => this.onAnalysisQueued(data));\n        this.socket.on('code:analysis:start', (data) => this.onAnalysisStart(data));\n        this.socket.on('code:analysis:complete', (data) => this.onAnalysisComplete(data));\n        this.socket.on('code:analysis:cancelled', (data) => this.onAnalysisCancelled(data));\n        this.socket.on('code:analysis:error', (data) => this.onAnalysisError(data));\n\n        // Node discovery events\n        this.socket.on('code:directory:discovered', (data) => this.onDirectoryDiscovered(data));\n        this.socket.on('code:file:discovered', (data) => this.onFileDiscovered(data));\n        this.socket.on('code:file:analyzed', (data) => this.onFileAnalyzed(data));\n        this.socket.on('code:node:found', (data) => this.onNodeFound(data));\n\n        // Progress updates\n        this.socket.on('code:analysis:progress', (data) => this.onProgressUpdate(data));\n        \n        // Lazy loading responses\n        this.socket.on('code:directory:contents', (data) => {\n            // Update the requested directory with its contents\n            if (data.path) {\n                const node = this.findNodeByPath(data.path);\n                if (node && data.children) {\n                    // Find D3 node and remove loading pulse\n                    const d3Node = this.findD3NodeByPath(data.path);\n                    if (d3Node && this.loadingNodes.has(data.path)) {\n                        this.removeLoadingPulse(d3Node);\n                    }\n                    node.children = data.children.map(child => ({\n                        ...child,\n                        loaded: child.type === 'directory' ? false : undefined,\n                        analyzed: child.type === 'file' ? false : undefined,\n                        expanded: false,\n                        children: []\n                    }));\n                    node.loaded = true;\n                    \n                    // Update D3 hierarchy\n                    if (this.root && this.svg) {\n                        this.root = d3.hierarchy(this.treeData);\n                        this.root.x0 = this.height / 2;\n                        this.root.y0 = 0;\n                        this.update(this.root);\n                    }\n                    \n                    // Update stats based on discovered contents\n                    if (data.stats) {\n                        this.stats.files += data.stats.files || 0;\n                        this.stats.directories += data.stats.directories || 0;\n                        this.updateStats();\n                    }\n                    \n                    this.updateBreadcrumb(`Loaded ${data.path}`, 'success');\n                    this.hideLoading();\n                }\n            }\n        });\n        \n        // Top level discovery response\n        this.socket.on('code:top_level:discovered', (data) => {\n            if (data.items && Array.isArray(data.items)) {\n                // Add discovered items to the root node\n                this.treeData.children = data.items.map(item => ({\n                    name: item.name,\n                    path: item.path,\n                    type: item.type,\n                    language: item.type === 'file' ? this.detectLanguage(item.path) : undefined,\n                    size: item.size,\n                    lines: item.lines,\n                    loaded: item.type === 'directory' ? false : undefined,\n                    analyzed: item.type === 'file' ? false : undefined,\n                    expanded: false,\n                    children: []\n                }));\n                \n                this.treeData.loaded = true;\n                \n                // Update stats\n                if (data.stats) {\n                    this.stats = { ...this.stats, ...data.stats };\n                    this.updateStats();\n                }\n                \n                // Update D3 hierarchy\n                if (typeof d3 !== 'undefined') {\n                    this.root = d3.hierarchy(this.treeData);\n                    this.root.x0 = this.height / 2;\n                    this.root.y0 = 0;\n                    if (this.svg) {\n                        this.update(this.root);\n                    }\n                }\n                \n                this.analyzing = false;\n                this.hideLoading();\n                this.updateBreadcrumb(`Discovered ${data.items.length} root items`, 'success');\n                this.showNotification(`Found ${data.items.length} items in project root`, 'success');\n            }\n        });\n    }\n\n    /**\n     * Handle analysis start event\n     */\n    onAnalysisStart(data) {\n        this.analyzing = true;\n        const message = data.message || 'Starting code analysis...';\n        \n        // Update activity ticker\n        this.updateActivityTicker('🚀 Starting analysis...', 'info');\n        \n        this.updateBreadcrumb(message, 'info');\n        this.addEventToDisplay(`🚀 ${message}`, 'info');\n        \n        // Initialize or clear the tree\n        if (!this.treeData || this.treeData.children.length === 0) {\n            this.initializeTreeData();\n        }\n        \n        // Reset stats\n        this.stats = { \n            files: 0, \n            classes: 0, \n            functions: 0, \n            methods: 0, \n            lines: 0 \n        };\n        this.updateStats();\n    }\n\n    /**\n     * Handle directory discovered event\n     */\n    onDirectoryDiscovered(data) {\n        // Update activity ticker first\n        this.updateActivityTicker(`📁 Discovered: ${data.name || 'directory'}`);\n        \n        // Add to events display\n        this.addEventToDisplay(`📁 Found ${(data.children || []).length} items in: ${data.name || data.path}`, 'info');\n        \n        // Find the node that was clicked to trigger this discovery\n        const node = this.findNodeByPath(data.path);\n        if (node && data.children) {\n            // Update the node with discovered children\n            node.children = data.children.map(child => ({\n                name: child.name,\n                path: child.path,\n                type: child.type,\n                loaded: child.type === 'directory' ? false : undefined,\n                analyzed: child.type === 'file' ? false : undefined,\n                expanded: false,\n                children: child.type === 'directory' ? [] : undefined,\n                size: child.size,\n                has_code: child.has_code\n            }));\n            node.loaded = true;\n            node.expanded = true;\n            \n            // Find D3 node and remove loading pulse\n            const d3Node = this.findD3NodeByPath(data.path);\n            if (d3Node) {\n                // Remove loading animation\n                if (this.loadingNodes.has(data.path)) {\n                    this.removeLoadingPulse(d3Node);\n                }\n                \n                // Expand the node in D3\n                if (d3Node.data) {\n                    d3Node.data.children = node.children;\n                    d3Node._children = null;\n                }\n            }\n            \n            // Update D3 hierarchy and redraw\n            if (this.root && this.svg) {\n                this.root = d3.hierarchy(this.treeData);\n                this.update(this.root);\n            }\n            \n            this.updateBreadcrumb(`Loaded ${node.children.length} items from ${node.name}`, 'success');\n            this.updateStats();\n        } else if (!node) {\n            // This might be a top-level directory discovery\n            const pathParts = data.path ? data.path.split('/').filter(p => p) : [];\n            const isTopLevel = pathParts.length === 1;\n            \n            if (isTopLevel || data.forceAdd) {\n                const dirNode = {\n                    name: data.name || pathParts[pathParts.length - 1] || 'Unknown',\n                    path: data.path,\n                    type: 'directory',\n                    children: [],\n                    loaded: false,\n                    expanded: false,\n                    stats: data.stats || {}\n                };\n                \n                this.addNodeToTree(dirNode, data.parent || '');\n                this.updateBreadcrumb(`Discovered: ${data.path}`, 'info');\n            }\n        }\n    }\n\n    /**\n     * Handle file discovered event\n     */\n    onFileDiscovered(data) {\n        // Update activity ticker\n        const fileName = data.name || (data.path ? data.path.split('/').pop() : 'file');\n        this.updateActivityTicker(`📄 Found: ${fileName}`);\n        \n        // Add to events display\n        this.addEventToDisplay(`📄 Discovered: ${data.path || 'Unknown file'}`, 'info');\n        \n        const pathParts = data.path ? data.path.split('/').filter(p => p) : [];\n        const parentPath = pathParts.slice(0, -1).join('/');\n        \n        const fileNode = {\n            name: data.name || pathParts[pathParts.length - 1] || 'Unknown',\n            path: data.path,\n            type: 'file',\n            language: data.language || this.detectLanguage(data.path),\n            size: data.size || 0,\n            lines: data.lines || 0,\n            children: [],\n            analyzed: false\n        };\n        \n        this.addNodeToTree(fileNode, parentPath);\n        this.stats.files++;\n        this.updateStats();\n        this.updateBreadcrumb(`Found: ${data.path}`, 'info');\n    }\n\n    /**\n     * Handle file analyzed event\n     */\n    onFileAnalyzed(data) {\n        // Remove loading pulse if this file was being analyzed\n        const d3Node = this.findD3NodeByPath(data.path);\n        if (d3Node && this.loadingNodes.has(data.path)) {\n            this.removeLoadingPulse(d3Node);\n        }\n        // Update activity ticker\n        if (data.path) {\n            const fileName = data.path.split('/').pop();\n            this.updateActivityTicker(`🔍 Analyzed: ${fileName}`);\n        }\n        \n        const fileNode = this.findNodeByPath(data.path);\n        if (fileNode) {\n            fileNode.analyzed = true;\n            fileNode.complexity = data.complexity || 0;\n            fileNode.lines = data.lines || 0;\n            \n            // Add code elements as children\n            if (data.elements && Array.isArray(data.elements)) {\n                fileNode.children = data.elements.map(elem => ({\n                    name: elem.name,\n                    type: elem.type.toLowerCase(),\n                    path: `${data.path}#${elem.name}`,\n                    line: elem.line,\n                    complexity: elem.complexity || 1,\n                    docstring: elem.docstring || '',\n                    children: elem.methods ? elem.methods.map(m => ({\n                        name: m.name,\n                        type: 'method',\n                        path: `${data.path}#${elem.name}.${m.name}`,\n                        line: m.line,\n                        complexity: m.complexity || 1,\n                        docstring: m.docstring || ''\n                    })) : []\n                }));\n            }\n            \n            // Update stats\n            if (data.stats) {\n                this.stats.classes += data.stats.classes || 0;\n                this.stats.functions += data.stats.functions || 0;\n                this.stats.methods += data.stats.methods || 0;\n                this.stats.lines += data.stats.lines || 0;\n            }\n            \n            this.updateStats();\n            if (this.root) {\n                this.update(this.root);\n            }\n            \n            this.updateBreadcrumb(`Analyzed: ${data.path}`, 'success');\n        }\n    }\n\n    /**\n     * Handle node found event\n     */\n    onNodeFound(data) {\n        // Add to events display with appropriate icon\n        const typeIcon = data.type === 'class' ? '🏛️' : \n                        data.type === 'function' ? '⚡' : \n                        data.type === 'method' ? '🔧' : '📦';\n        this.addEventToDisplay(`${typeIcon} Found ${data.type || 'node'}: ${data.name || 'Unknown'}`);\n        \n        // Extract node info\n        const nodeInfo = {\n            name: data.name || 'Unknown',\n            type: (data.type || 'unknown').toLowerCase(),\n            path: data.path || '',\n            line: data.line || 0,\n            complexity: data.complexity || 1,\n            docstring: data.docstring || ''\n        };\n\n        // Map event types to our internal types\n        const typeMapping = {\n            'class': 'class',\n            'function': 'function',\n            'method': 'method',\n            'module': 'module',\n            'file': 'file',\n            'directory': 'directory'\n        };\n\n        nodeInfo.type = typeMapping[nodeInfo.type] || nodeInfo.type;\n\n        // Determine parent path\n        let parentPath = '';\n        if (data.parent_path) {\n            parentPath = data.parent_path;\n        } else if (data.file_path) {\n            parentPath = data.file_path;\n        } else if (nodeInfo.path.includes('/')) {\n            const parts = nodeInfo.path.split('/');\n            parts.pop();\n            parentPath = parts.join('/');\n        }\n\n        // Update stats based on node type\n        switch(nodeInfo.type) {\n            case 'class':\n                this.stats.classes++;\n                break;\n            case 'function':\n                this.stats.functions++;\n                break;\n            case 'method':\n                this.stats.methods++;\n                break;\n            case 'file':\n                this.stats.files++;\n                break;\n        }\n\n        // Add node to tree\n        this.addNodeToTree(nodeInfo, parentPath);\n        this.updateStats();\n\n        // Show progress in breadcrumb\n        const elementType = nodeInfo.type.charAt(0).toUpperCase() + nodeInfo.type.slice(1);\n        this.updateBreadcrumb(`Found ${elementType}: ${nodeInfo.name}`, 'info');\n    }\n\n    /**\n     * Handle progress update\n     */\n    onProgressUpdate(data) {\n        const progress = data.progress || 0;\n        const message = data.message || `Processing... ${progress}%`;\n        \n        this.updateBreadcrumb(message, 'info');\n        \n        // Update progress bar if it exists\n        const progressBar = document.querySelector('.code-tree-progress');\n        if (progressBar) {\n            progressBar.style.width = `${progress}%`;\n        }\n    }\n\n    /**\n     * Handle analysis complete event\n     */\n    onAnalysisComplete(data) {\n        this.analyzing = false;\n        this.hideLoading();\n        \n        // Update activity ticker\n        this.updateActivityTicker('✅ Ready', 'success');\n        \n        // Add completion event\n        this.addEventToDisplay('✅ Analysis complete!', 'success');\n\n        // Update tree visualization\n        if (this.root && this.svg) {\n            this.update(this.root);\n        }\n\n        // Update stats from completion data\n        if (data.stats) {\n            this.stats = { ...this.stats, ...data.stats };\n            this.updateStats();\n        }\n\n        const message = data.message || `Analysis complete: ${this.stats.files} files, ${this.stats.classes} classes, ${this.stats.functions} functions`;\n        this.updateBreadcrumb(message, 'success');\n        this.showNotification(message, 'success');\n    }\n\n    /**\n     * Handle analysis error\n     */\n    onAnalysisError(data) {\n        this.analyzing = false;\n        this.hideLoading();\n\n        const message = data.message || data.error || 'Analysis failed';\n        this.updateBreadcrumb(message, 'error');\n        this.showNotification(message, 'error');\n    }\n\n    /**\n     * Handle analysis accepted\n     */\n    onAnalysisAccepted(data) {\n        const message = data.message || 'Analysis request accepted';\n        this.updateBreadcrumb(message, 'info');\n    }\n\n    /**\n     * Handle analysis queued\n     */\n    onAnalysisQueued(data) {\n        const position = data.position || 0;\n        const message = `Analysis queued (position ${position})`;\n        this.updateBreadcrumb(message, 'warning');\n        this.showNotification(message, 'info');\n    }\n    \n    /**\n     * Handle INFO events for granular work tracking\n     */\n    onInfoEvent(data) {\n        // Log to console for debugging\n        console.log('[INFO]', data.type, data.message);\n        \n        // Update breadcrumb for certain events\n        if (data.type && data.type.startsWith('discovery.')) {\n            // Discovery events\n            if (data.type === 'discovery.start') {\n                this.updateBreadcrumb(data.message, 'info');\n            } else if (data.type === 'discovery.complete') {\n                this.updateBreadcrumb(data.message, 'success');\n                // Show stats if available\n                if (data.stats) {\n                    console.log('[DISCOVERY STATS]', data.stats);\n                }\n            } else if (data.type === 'discovery.directory' || data.type === 'discovery.file') {\n                // Quick flash of discovery events\n                this.updateBreadcrumb(data.message, 'info');\n            }\n        } else if (data.type && data.type.startsWith('analysis.')) {\n            // Analysis events\n            if (data.type === 'analysis.start') {\n                this.updateBreadcrumb(data.message, 'info');\n            } else if (data.type === 'analysis.complete') {\n                this.updateBreadcrumb(data.message, 'success');\n                // Show stats if available\n                if (data.stats) {\n                    const statsMsg = `Found: ${data.stats.classes || 0} classes, ${data.stats.functions || 0} functions, ${data.stats.methods || 0} methods`;\n                    console.log('[ANALYSIS STATS]', statsMsg);\n                }\n            } else if (data.type === 'analysis.class' || data.type === 'analysis.function' || data.type === 'analysis.method') {\n                // Show found elements briefly\n                this.updateBreadcrumb(data.message, 'info');\n            } else if (data.type === 'analysis.parse') {\n                this.updateBreadcrumb(data.message, 'info');\n            }\n        } else if (data.type && data.type.startsWith('filter.')) {\n            // Filter events - optionally show in debug mode\n            if (window.debugMode || this.showFilterEvents) {\n                console.debug('[FILTER]', data.type, data.path, data.reason);\n                if (this.showFilterEvents) {\n                    this.updateBreadcrumb(data.message, 'warning');\n                }\n            }\n        } else if (data.type && data.type.startsWith('cache.')) {\n            // Cache events\n            if (data.type === 'cache.hit') {\n                console.debug('[CACHE HIT]', data.file);\n                if (this.showCacheEvents) {\n                    this.updateBreadcrumb(data.message, 'info');\n                }\n            } else if (data.type === 'cache.miss') {\n                console.debug('[CACHE MISS]', data.file);\n            }\n        }\n        \n        // Optionally add to an event log display if enabled\n        if (this.eventLogEnabled && data.message) {\n            this.addEventToDisplay(data);\n        }\n    }\n    \n    /**\n     * Add event to display log (if we have one)\n     */\n    addEventToDisplay(data) {\n        // Could be implemented to show events in a dedicated log area\n        // For now, just maintain a recent events list\n        if (!this.recentEvents) {\n            this.recentEvents = [];\n        }\n        \n        this.recentEvents.unshift({\n            timestamp: data.timestamp || new Date().toISOString(),\n            type: data.type,\n            message: data.message,\n            data: data\n        });\n        \n        // Keep only last 100 events\n        if (this.recentEvents.length > 100) {\n            this.recentEvents.pop();\n        }\n        \n        // Could update a UI element here if we had an event log display\n        console.log('[EVENT LOG]', data.type, data.message);\n    }\n\n    /**\n     * Handle analysis cancelled\n     */\n    onAnalysisCancelled(data) {\n        this.analyzing = false;\n        this.hideLoading();\n        const message = data.message || 'Analysis cancelled';\n        this.updateBreadcrumb(message, 'warning');\n    }\n\n    /**\n     * Show notification toast\n     */\n    showNotification(message, type = 'info') {\n        const notification = document.createElement('div');\n        notification.className = `code-tree-notification ${type}`;\n        notification.textContent = message;\n        \n        // Change from appending to container to positioning absolutely within it\n        const container = document.getElementById('code-tree-container');\n        if (container) {\n            // Position relative to the container\n            notification.style.position = 'absolute';\n            notification.style.top = '10px';\n            notification.style.right = '10px';\n            notification.style.zIndex = '1000';\n            \n            // Ensure container is positioned\n            if (!container.style.position || container.style.position === 'static') {\n                container.style.position = 'relative';\n            }\n            \n            container.appendChild(notification);\n            \n            // Animate out after 3 seconds\n            setTimeout(() => {\n                notification.style.animation = 'slideOutRight 0.3s ease';\n                setTimeout(() => notification.remove(), 300);\n            }, 3000);\n        }\n    }\n\n    /**\n     * Add node to tree structure\n     */\n    addNodeToTree(nodeInfo, parentPath = '') {\n        // CRITICAL: Validate that nodeInfo.path doesn't contain absolute paths\n        // The backend should only send relative paths now\n        if (nodeInfo.path && nodeInfo.path.startsWith('/')) {\n            console.error('Absolute path detected in node, skipping:', nodeInfo.path);\n            return;\n        }\n        \n        // Also validate parent path\n        if (parentPath && parentPath.startsWith('/')) {\n            console.error('Absolute path detected in parent, skipping:', parentPath);\n            return;\n        }\n        \n        // Find parent node\n        let parentNode = this.treeData;\n        \n        if (parentPath) {\n            parentNode = this.findNodeByPath(parentPath);\n            if (!parentNode) {\n                // CRITICAL: Do NOT create parent structure if it doesn't exist\n                // This prevents creating nodes above the working directory\n                console.warn('Parent node not found, skipping node creation:', parentPath);\n                console.warn('Attempted to add node:', nodeInfo);\n                return;\n            }\n        }\n\n        // Check if node already exists\n        const existingNode = parentNode.children?.find(c => \n            c.path === nodeInfo.path || \n            (c.name === nodeInfo.name && c.type === nodeInfo.type)\n        );\n\n        if (existingNode) {\n            // Update existing node\n            Object.assign(existingNode, nodeInfo);\n            return;\n        }\n\n        // Add new node\n        if (!parentNode.children) {\n            parentNode.children = [];\n        }\n        \n        // Ensure the node has a children array\n        if (!nodeInfo.children) {\n            nodeInfo.children = [];\n        }\n        \n        parentNode.children.push(nodeInfo);\n\n        // Store node reference for quick access\n        this.nodes.set(nodeInfo.path, nodeInfo);\n\n        // Update tree if initialized\n        if (this.root && this.svg) {\n            // Recreate hierarchy with new data\n            this.root = d3.hierarchy(this.treeData);\n            this.root.x0 = this.height / 2;\n            this.root.y0 = 0;\n            \n            // Update only if we have a reasonable number of nodes to avoid performance issues\n            if (this.nodes.size < 1000) {\n                this.update(this.root);\n            } else if (this.nodes.size % 100 === 0) {\n                // Update every 100 nodes for large trees\n                this.update(this.root);\n            }\n        }\n    }\n\n    /**\n     * Find node by path in tree\n     */\n    findNodeByPath(path, node = null) {\n        if (!node) {\n            node = this.treeData;\n        }\n\n        if (node.path === path) {\n            return node;\n        }\n\n        if (node.children) {\n            for (const child of node.children) {\n                const found = this.findNodeByPath(path, child);\n                if (found) {\n                    return found;\n                }\n            }\n        }\n\n        return null;\n    }\n    \n    /**\n     * Find D3 hierarchy node by path\n     */\n    findD3NodeByPath(path) {\n        if (!this.root) return null;\n        return this.root.descendants().find(d => d.data.path === path);\n    }\n\n    /**\n     * Update statistics display\n     */\n    updateStats() {\n        // Update stats display - use correct IDs from HTML\n        const statsElements = {\n            'file-count': this.stats.files,\n            'class-count': this.stats.classes,\n            'function-count': this.stats.functions,\n            'line-count': this.stats.lines\n        };\n\n        for (const [id, value] of Object.entries(statsElements)) {\n            const elem = document.getElementById(id);\n            if (elem) {\n                elem.textContent = value.toLocaleString();\n            }\n        }\n\n        // Update progress text\n        const progressText = document.getElementById('code-progress-text');\n        if (progressText) {\n            const statusText = this.analyzing ? \n                `Analyzing... ${this.stats.files} files processed` : \n                `Ready - ${this.stats.files} files in tree`;\n            progressText.textContent = statusText;\n        }\n    }\n\n    /**\n     * Update breadcrumb trail\n     */\n    updateBreadcrumb(message, type = 'info') {\n        const breadcrumbContent = document.getElementById('breadcrumb-content');\n        if (breadcrumbContent) {\n            breadcrumbContent.textContent = message;\n            breadcrumbContent.className = `breadcrumb-${type}`;\n        }\n    }\n\n    /**\n     * Detect language from file extension\n     */\n    detectLanguage(filePath) {\n        const ext = filePath.split('.').pop().toLowerCase();\n        const languageMap = {\n            'py': 'python',\n            'js': 'javascript',\n            'ts': 'typescript',\n            'jsx': 'javascript',\n            'tsx': 'typescript',\n            'java': 'java',\n            'cpp': 'cpp',\n            'c': 'c',\n            'cs': 'csharp',\n            'rb': 'ruby',\n            'go': 'go',\n            'rs': 'rust',\n            'php': 'php',\n            'swift': 'swift',\n            'kt': 'kotlin',\n            'scala': 'scala',\n            'r': 'r',\n            'sh': 'bash',\n            'ps1': 'powershell'\n        };\n        return languageMap[ext] || 'unknown';\n    }\n\n    /**\n     * Add visualization controls for layout toggle\n     */\n    addVisualizationControls() {\n        const controls = this.svg.append('g')\n            .attr('class', 'viz-controls')\n            .attr('transform', 'translate(10, 10)');\n            \n        // Add layout toggle button\n        const toggleButton = controls.append('g')\n            .attr('class', 'layout-toggle')\n            .style('cursor', 'pointer')\n            .on('click', () => this.toggleLayout());\n            \n        toggleButton.append('rect')\n            .attr('width', 120)\n            .attr('height', 30)\n            .attr('rx', 5)\n            .attr('fill', '#3b82f6')\n            .attr('opacity', 0.8);\n            \n        toggleButton.append('text')\n            .attr('x', 60)\n            .attr('y', 20)\n            .attr('text-anchor', 'middle')\n            .attr('fill', 'white')\n            .style('font-size', '12px')\n            .text(this.isRadialLayout ? 'Switch to Linear' : 'Switch to Radial');\n    }\n    \n    /**\n     * Toggle between radial and linear layouts\n     */\n    toggleLayout() {\n        this.isRadialLayout = !this.isRadialLayout;\n        this.createVisualization();\n        if (this.root) {\n            this.update(this.root);\n        }\n        this.showNotification(\n            this.isRadialLayout ? 'Switched to radial layout' : 'Switched to linear layout',\n            'info'\n        );\n    }\n\n    /**\n     * Convert radial coordinates to Cartesian\n     */\n    radialPoint(x, y) {\n        return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];\n    }\n\n    /**\n     * Update D3 tree visualization\n     */\n    update(source) {\n        if (!this.treeLayout || !this.treeGroup || !source) {\n            return;\n        }\n\n        // Compute the new tree layout\n        const treeData = this.treeLayout(this.root);\n        const nodes = treeData.descendants();\n        const links = treeData.descendants().slice(1);\n\n        if (this.isRadialLayout) {\n            // Radial layout adjustments\n            nodes.forEach(d => {\n                // Store original x,y for transitions\n                if (d.x0 === undefined) {\n                    d.x0 = d.x;\n                    d.y0 = d.y;\n                }\n            });\n        } else {\n            // Linear layout with nodeSize doesn't need manual normalization\n            // The tree layout handles spacing automatically\n        }\n\n        // Update nodes\n        const node = this.treeGroup.selectAll('g.node')\n            .data(nodes, d => d.id || (d.id = ++this.nodeId));\n\n        // Enter new nodes\n        const nodeEnter = node.enter().append('g')\n            .attr('class', 'node')\n            .attr('transform', d => {\n                if (this.isRadialLayout) {\n                    const [x, y] = this.radialPoint(source.x0 || 0, source.y0 || 0);\n                    return `translate(${x},${y})`;\n                } else {\n                    return `translate(${source.y0},${source.x0})`;\n                }\n            })\n            .on('click', (event, d) => this.onNodeClick(event, d));\n\n        // Add circles for nodes\n        nodeEnter.append('circle')\n            .attr('class', 'node-circle')\n            .attr('r', 1e-6)\n            .style('fill', d => this.getNodeColor(d))\n            .style('stroke', d => this.getNodeStrokeColor(d))\n            .style('stroke-width', 2)\n            .on('mouseover', (event, d) => this.showTooltip(event, d))\n            .on('mouseout', () => this.hideTooltip());\n\n        // Add labels for nodes with smart positioning\n        nodeEnter.append('text')\n            .attr('class', 'node-label')\n            .attr('dy', '.35em')\n            .attr('x', d => {\n                if (this.isRadialLayout) {\n                    // For radial layout, initial position\n                    return 0;\n                } else {\n                    // Linear layout: standard positioning\n                    return d.children || d._children ? -13 : 13;\n                }\n            })\n            .attr('text-anchor', d => {\n                if (this.isRadialLayout) {\n                    return 'start';  // Will be adjusted in update\n                } else {\n                    // Linear layout: standard anchoring\n                    return d.children || d._children ? 'end' : 'start';\n                }\n            })\n            .text(d => {\n                // Truncate long names\n                const maxLength = 20;\n                const name = d.data.name || '';\n                return name.length > maxLength ? \n                       name.substring(0, maxLength - 3) + '...' : name;\n            })\n            .style('fill-opacity', 1e-6)\n            .style('font-size', '12px')\n            .style('font-family', '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif')\n            .style('text-shadow', '1px 1px 2px rgba(255,255,255,0.8), -1px -1px 2px rgba(255,255,255,0.8)');\n\n        // Add icons for node types\n        nodeEnter.append('text')\n            .attr('class', 'node-icon')\n            .attr('dy', '.35em')\n            .attr('x', 0)\n            .attr('text-anchor', 'middle')\n            .text(d => this.getNodeIcon(d))\n            .style('font-size', '10px')\n            .style('fill', 'white');\n\n        // Transition to new positions\n        const nodeUpdate = nodeEnter.merge(node);\n\n        nodeUpdate.transition()\n            .duration(this.duration)\n            .attr('transform', d => {\n                if (this.isRadialLayout) {\n                    const [x, y] = this.radialPoint(d.x, d.y);\n                    return `translate(${x},${y})`;\n                } else {\n                    return `translate(${d.y},${d.x})`;\n                }\n            });\n\n        nodeUpdate.select('circle.node-circle')\n            .attr('r', 8)\n            .style('fill', d => this.getNodeColor(d))\n            .style('stroke', d => this.getNodeStrokeColor(d))\n            .attr('cursor', 'pointer');\n\n        // Update text labels with proper rotation for radial layout\n        const isRadial = this.isRadialLayout;  // Capture the layout type\n        nodeUpdate.select('text.node-label')\n            .style('fill-opacity', 1)\n            .style('fill', '#333')\n            .each(function(d) {\n                const selection = d3.select(this);\n                \n                if (isRadial) {\n                    // For radial layout, apply rotation and positioning\n                    const angle = (d.x * 180 / Math.PI) - 90;  // Convert to degrees\n                    \n                    // Determine if text should be flipped (left side of circle)\n                    const shouldFlip = angle > 90 || angle < -90;\n                    \n                    // Calculate text position and rotation\n                    if (shouldFlip) {\n                        // Text on left side - rotate 180 degrees to read properly\n                        selection\n                            .attr('transform', `rotate(${angle + 180})`)\n                            .attr('x', -15)  // Negative offset for flipped text\n                            .attr('text-anchor', 'end')\n                            .attr('dy', '.35em');\n                    } else {\n                        // Text on right side - normal orientation\n                        selection\n                            .attr('transform', `rotate(${angle})`)\n                            .attr('x', 15)  // Positive offset for normal text\n                            .attr('text-anchor', 'start')\n                            .attr('dy', '.35em');\n                    }\n                } else {\n                    // Linear layout - no rotation needed\n                    selection\n                        .attr('transform', null)\n                        .attr('x', d.children || d._children ? -13 : 13)\n                        .attr('text-anchor', d.children || d._children ? 'end' : 'start')\n                        .attr('dy', '.35em');\n                }\n            });\n\n        // Remove exiting nodes\n        const nodeExit = node.exit().transition()\n            .duration(this.duration)\n            .attr('transform', d => {\n                if (this.isRadialLayout) {\n                    const [x, y] = this.radialPoint(source.x, source.y);\n                    return `translate(${x},${y})`;\n                } else {\n                    return `translate(${source.y},${source.x})`;\n                }\n            })\n            .remove();\n\n        nodeExit.select('circle')\n            .attr('r', 1e-6);\n\n        nodeExit.select('text.node-label')\n            .style('fill-opacity', 1e-6);\n        \n        nodeExit.select('text.node-icon')\n            .style('fill-opacity', 1e-6);\n\n        // Update links\n        const link = this.treeGroup.selectAll('path.link')\n            .data(links, d => d.id);\n\n        // Enter new links\n        const linkEnter = link.enter().insert('path', 'g')\n            .attr('class', 'link')\n            .attr('d', d => {\n                const o = {x: source.x0, y: source.y0};\n                return this.isRadialLayout ? \n                    this.radialDiagonal(o, o) : \n                    this.diagonal(o, o);\n            })\n            .style('fill', 'none')\n            .style('stroke', '#ccc')\n            .style('stroke-width', 2);\n\n        // Transition to new positions\n        const linkUpdate = linkEnter.merge(link);\n\n        linkUpdate.transition()\n            .duration(this.duration)\n            .attr('d', d => this.isRadialLayout ? \n                this.radialDiagonal(d, d.parent) : \n                this.diagonal(d, d.parent));\n\n        // Remove exiting links\n        link.exit().transition()\n            .duration(this.duration)\n            .attr('d', d => {\n                const o = {x: source.x, y: source.y};\n                return this.isRadialLayout ? \n                    this.radialDiagonal(o, o) : \n                    this.diagonal(o, o);\n            })\n            .remove();\n\n        // Store old positions for transition\n        nodes.forEach(d => {\n            d.x0 = d.x;\n            d.y0 = d.y;\n        });\n    }\n\n    /**\n     * Center the view on a specific node (Linear layout)\n     */\n    centerOnNode(d) {\n        if (!this.svg || !this.zoom) return;\n        \n        const transform = d3.zoomTransform(this.svg.node());\n        const x = -d.y * transform.k + this.width / 2;\n        const y = -d.x * transform.k + this.height / 2;\n        \n        this.svg.transition()\n            .duration(750)\n            .call(\n                this.zoom.transform,\n                d3.zoomIdentity\n                    .translate(x, y)\n                    .scale(transform.k)\n            );\n    }\n    \n    /**\n     * Center the view on a specific node (Radial layout)\n     */\n    centerOnNodeRadial(d) {\n        if (!this.svg || !this.zoom) return;\n        \n        // Use the same radialPoint function for consistency\n        const [x, y] = this.radialPoint(d.x, d.y);\n        \n        // Get current transform\n        const transform = d3.zoomTransform(this.svg.node());\n        \n        // Calculate translation to center the node\n        // The tree is already centered at width/2, height/2 via transform\n        // So we need to adjust relative to that center\n        const targetX = this.width / 2 - x * transform.k;\n        const targetY = this.height / 2 - y * transform.k;\n        \n        // Apply smooth transition to center the node\n        this.svg.transition()\n            .duration(750)\n            .call(\n                this.zoom.transform,\n                d3.zoomIdentity\n                    .translate(targetX, targetY)\n                    .scale(transform.k)\n            );\n    }\n    \n    /**\n     * Highlight the active node with larger icon\n     */\n    highlightActiveNode(d) {\n        // Reset all nodes to normal size and clear parent context\n        this.treeGroup.selectAll('circle.node-circle')\n            .transition()\n            .duration(300)\n            .attr('r', 8)\n            .classed('active', false)\n            .classed('parent-context', false)\n            .style('stroke', null)\n            .style('stroke-width', null)\n            .style('opacity', null);\n        \n        // Find and increase size of clicked node - use data matching\n        this.treeGroup.selectAll('g.node')\n            .filter(node => node === d)\n            .select('circle.node-circle')\n            .transition()\n            .duration(300)\n            .attr('r', 12)  // Larger radius\n            .classed('active', true)\n            .style('stroke', '#3b82f6')\n            .style('stroke-width', 3);\n        \n        // Store active node\n        this.activeNode = d;\n    }\n    \n    /**\n     * Add pulsing animation for loading state\n     */\n    addLoadingPulse(d) {\n        // Use consistent selection pattern\n        const node = this.treeGroup.selectAll('g.node')\n            .filter(node => node === d)\n            .select('circle.node-circle');\n        \n        // Add to loading set\n        this.loadingNodes.add(d.data.path);\n        \n        // Add pulsing class and orange color\n        node.classed('loading-pulse', true)\n            .style('fill', '#fb923c');  // Orange color for loading\n        \n        // Create pulse animation\n        const pulseAnimation = () => {\n            if (!this.loadingNodes.has(d.data.path)) return;\n            \n            node.transition()\n                .duration(600)\n                .attr('r', 14)\n                .style('opacity', 0.6)\n                .transition()\n                .duration(600)\n                .attr('r', 10)\n                .style('opacity', 1)\n                .on('end', () => {\n                    if (this.loadingNodes.has(d.data.path)) {\n                        pulseAnimation(); // Continue pulsing\n                    }\n                });\n        };\n        \n        pulseAnimation();\n    }\n    \n    /**\n     * Remove pulsing animation when loading complete\n     */\n    removeLoadingPulse(d) {\n        // Remove from loading set\n        this.loadingNodes.delete(d.data.path);\n        \n        // Use consistent selection pattern\n        const node = this.treeGroup.selectAll('g.node')\n            .filter(node => node === d)\n            .select('circle.node-circle');\n        \n        node.classed('loading-pulse', false)\n            .interrupt() // Stop animation\n            .transition()\n            .duration(300)\n            .attr('r', this.activeNode === d ? 12 : 8)\n            .style('opacity', 1)\n            .style('fill', d => this.getNodeColor(d));  // Restore original color\n    }\n    \n    /**\n     * Show parent node alongside for context\n     */\n    showWithParent(d) {\n        if (!d.parent) return;\n        \n        // Make parent more visible\n        const parentNode = this.treeGroup.selectAll('g.node')\n            .filter(node => node === d.parent);\n        \n        // Highlight parent with different style\n        parentNode.select('circle.node-circle')\n            .classed('parent-context', true)\n            .style('stroke', '#10b981')\n            .style('stroke-width', 3)\n            .style('opacity', 0.8);\n        \n        // For radial, adjust zoom to show both parent and clicked node\n        if (this.isRadialLayout && d.parent) {\n            // Calculate bounding box including parent and immediate children\n            const nodes = [d, d.parent];\n            if (d.children) nodes.push(...d.children);\n            else if (d._children) nodes.push(...d._children);\n            \n            const angles = nodes.map(n => n.x);\n            const radii = nodes.map(n => n.y);\n            \n            const minAngle = Math.min(...angles);\n            const maxAngle = Math.max(...angles);\n            const maxRadius = Math.max(...radii);\n            \n            // Zoom to fit parent and children\n            const angleSpan = maxAngle - minAngle;\n            const scale = Math.min(\n                angleSpan > 0 ? (Math.PI * 2) / (angleSpan * 2) : 2.5,  // Fit angle span\n                this.width / (2 * maxRadius),      // Fit radius\n                2.5  // Max zoom\n            );\n            \n            // Calculate center angle and radius\n            const centerAngle = (minAngle + maxAngle) / 2;\n            const centerRadius = maxRadius / 2;\n            const centerX = centerRadius * Math.cos(centerAngle - Math.PI / 2);\n            const centerY = centerRadius * Math.sin(centerAngle - Math.PI / 2);\n            \n            this.svg.transition()\n                .duration(750)\n                .call(\n                    this.zoom.transform,\n                    d3.zoomIdentity\n                        .translate(this.width / 2 - centerX * scale, this.height / 2 - centerY * scale)\n                        .scale(scale)\n                );\n        }\n    }\n    \n    /**\n     * Handle node click - implement lazy loading with enhanced visual feedback\n     */\n    onNodeClick(event, d) {\n        event.stopPropagation();\n        \n        // Center on clicked node\n        if (this.isRadialLayout) {\n            this.centerOnNodeRadial(d);\n        } else {\n            this.centerOnNode(d);\n        }\n        \n        // Highlight with larger icon\n        this.highlightActiveNode(d);\n        \n        // Show parent context\n        this.showWithParent(d);\n        \n        // Get selected languages from checkboxes\n        const selectedLanguages = [];\n        document.querySelectorAll('.language-checkbox:checked').forEach(cb => {\n            selectedLanguages.push(cb.value);\n        });\n        \n        // Get ignore patterns\n        const ignorePatterns = document.getElementById('ignore-patterns')?.value || '';\n        \n        // Get show hidden files setting\n        const showHiddenFiles = document.getElementById('show-hidden-files')?.checked || false;\n        \n        // For directories that haven't been loaded yet, request discovery\n        if (d.data.type === 'directory' && !d.data.loaded) {\n            // Add pulsing animation\n            this.addLoadingPulse(d);\n            \n            // Ensure path is absolute or relative to working directory\n            const fullPath = this.ensureFullPath(d.data.path);\n            \n            // Request directory contents via Socket.IO\n            if (this.socket) {\n                this.socket.emit('code:discover:directory', {\n                    path: fullPath,\n                    depth: 1,  // Only get immediate children\n                    languages: selectedLanguages,\n                    ignore_patterns: ignorePatterns,\n                    show_hidden_files: showHiddenFiles\n                });\n                \n                // Mark as loading to prevent duplicate requests\n                d.data.loaded = 'loading';\n                this.updateBreadcrumb(`Loading ${d.data.name}...`, 'info');\n                this.showNotification(`Loading directory: ${d.data.name}`, 'info');\n            }\n        } \n        // For files that haven't been analyzed, request analysis\n        else if (d.data.type === 'file' && !d.data.analyzed) {\n            // Only analyze files of selected languages\n            const fileLanguage = this.detectLanguage(d.data.path);\n            if (!selectedLanguages.includes(fileLanguage) && fileLanguage !== 'unknown') {\n                this.showNotification(`Skipping ${d.data.name} - ${fileLanguage} not selected`, 'warning');\n                return;\n            }\n            \n            // Add pulsing animation\n            this.addLoadingPulse(d);\n            \n            // Ensure path is absolute or relative to working directory\n            const fullPath = this.ensureFullPath(d.data.path);\n            \n            // Get current show_hidden_files setting\n            const showHiddenFilesCheckbox = document.getElementById('show-hidden-files');\n            const showHiddenFiles = showHiddenFilesCheckbox ? showHiddenFilesCheckbox.checked : false;\n            \n            if (this.socket) {\n                this.socket.emit('code:analyze:file', {\n                    path: fullPath,\n                    show_hidden_files: showHiddenFiles\n                });\n                \n                d.data.analyzed = 'loading';\n                this.updateBreadcrumb(`Analyzing ${d.data.name}...`, 'info');\n                this.showNotification(`Analyzing: ${d.data.name}`, 'info');\n            }\n        }\n        // Toggle children visibility for already loaded nodes\n        else if (d.children || d._children) {\n            if (d.children) {\n                d._children = d.children;\n                d.children = null;\n                d.data.expanded = false;\n            } else {\n                d.children = d._children;\n                d._children = null;\n                d.data.expanded = true;\n            }\n            this.update(d);\n        }\n        \n        // Update selection\n        this.selectedNode = d;\n        this.highlightNode(d);\n    }\n    \n    /**\n     * Ensure path is absolute or relative to working directory\n     */\n    ensureFullPath(path) {\n        if (!path) return path;\n        \n        // If already absolute, return as is\n        if (path.startsWith('/')) {\n            return path;\n        }\n        \n        // Get working directory\n        const workingDir = this.getWorkingDirectory();\n        if (!workingDir) {\n            return path;\n        }\n        \n        // If path is relative, make it relative to working directory\n        if (path === '.' || path === workingDir) {\n            return workingDir;\n        }\n        \n        // Combine working directory with relative path\n        return `${workingDir}/${path}`.replace(/\\/+/g, '/');\n    }\n\n    /**\n     * Highlight selected node\n     */\n    highlightNode(node) {\n        // Remove previous highlights\n        this.treeGroup.selectAll('circle.node-circle')\n            .style('stroke-width', 2)\n            .classed('selected', false);\n\n        // Highlight selected node\n        this.treeGroup.selectAll('circle.node-circle')\n            .filter(d => d === node)\n            .style('stroke-width', 4)\n            .classed('selected', true);\n    }\n\n    /**\n     * Create diagonal path for links\n     */\n    diagonal(s, d) {\n        return `M ${s.y} ${s.x}\n                C ${(s.y + d.y) / 2} ${s.x},\n                  ${(s.y + d.y) / 2} ${d.x},\n                  ${d.y} ${d.x}`;\n    }\n    \n    /**\n     * Create radial diagonal path for links\n     */\n    radialDiagonal(s, d) {\n        const path = d3.linkRadial()\n            .angle(d => d.x)\n            .radius(d => d.y);\n        return path({source: s, target: d});\n    }\n\n    /**\n     * Get node color based on type and complexity\n     */\n    getNodeColor(d) {\n        const type = d.data.type;\n        const complexity = d.data.complexity || 1;\n\n        // Base colors by type\n        const baseColors = {\n            'root': '#6B7280',\n            'directory': '#3B82F6',\n            'file': '#10B981',\n            'module': '#8B5CF6',\n            'class': '#F59E0B',\n            'function': '#EF4444',\n            'method': '#EC4899'\n        };\n\n        const baseColor = baseColors[type] || '#6B7280';\n\n        // Adjust brightness based on complexity (higher complexity = darker)\n        if (complexity > 10) {\n            return d3.color(baseColor).darker(0.5);\n        } else if (complexity > 5) {\n            return d3.color(baseColor).darker(0.25);\n        }\n        \n        return baseColor;\n    }\n\n    /**\n     * Get node stroke color\n     */\n    getNodeStrokeColor(d) {\n        if (d.data.loaded === 'loading' || d.data.analyzed === 'loading') {\n            return '#FCD34D';  // Yellow for loading\n        }\n        if (d.data.type === 'directory' && !d.data.loaded) {\n            return '#94A3B8';  // Gray for unloaded\n        }\n        if (d.data.type === 'file' && !d.data.analyzed) {\n            return '#CBD5E1';  // Light gray for unanalyzed\n        }\n        return this.getNodeColor(d);\n    }\n\n    /**\n     * Get icon for node type\n     */\n    getNodeIcon(d) {\n        const icons = {\n            'root': '📦',\n            'directory': '📁',\n            'file': '📄',\n            'module': '📦',\n            'class': 'C',\n            'function': 'ƒ',\n            'method': 'm'\n        };\n        return icons[d.data.type] || '•';\n    }\n\n    /**\n     * Show tooltip on hover\n     */\n    showTooltip(event, d) {\n        if (!this.tooltip) return;\n\n        const info = [];\n        info.push(`<strong>${d.data.name}</strong>`);\n        info.push(`Type: ${d.data.type}`);\n        \n        if (d.data.language) {\n            info.push(`Language: ${d.data.language}`);\n        }\n        if (d.data.complexity) {\n            info.push(`Complexity: ${d.data.complexity}`);\n        }\n        if (d.data.lines) {\n            info.push(`Lines: ${d.data.lines}`);\n        }\n        if (d.data.path) {\n            info.push(`Path: ${d.data.path}`);\n        }\n        \n        // Special messages for lazy-loaded nodes\n        if (d.data.type === 'directory' && !d.data.loaded) {\n            info.push('<em>Click to explore contents</em>');\n        } else if (d.data.type === 'file' && !d.data.analyzed) {\n            info.push('<em>Click to analyze file</em>');\n        }\n\n        this.tooltip.transition()\n            .duration(200)\n            .style('opacity', .9);\n\n        this.tooltip.html(info.join('<br>'))\n            .style('left', (event.pageX + 10) + 'px')\n            .style('top', (event.pageY - 28) + 'px');\n    }\n\n    /**\n     * Hide tooltip\n     */\n    hideTooltip() {\n        if (!this.tooltip) return;\n        \n        this.tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n    }\n\n    /**\n     * Filter tree based on language and search\n     */\n    filterTree() {\n        if (!this.root) return;\n\n        // Apply filters\n        this.root.descendants().forEach(d => {\n            d.data._hidden = false;\n\n            // Language filter\n            if (this.languageFilter !== 'all') {\n                if (d.data.type === 'file' && d.data.language !== this.languageFilter) {\n                    d.data._hidden = true;\n                }\n            }\n\n            // Search filter\n            if (this.searchTerm) {\n                if (!d.data.name.toLowerCase().includes(this.searchTerm)) {\n                    d.data._hidden = true;\n                }\n            }\n        });\n\n        // Update display\n        this.update(this.root);\n    }\n\n    /**\n     * Expand all nodes in the tree\n     */\n    expandAll() {\n        if (!this.root) return;\n        \n        // Recursively expand all nodes\n        const expandRecursive = (node) => {\n            if (node._children) {\n                node.children = node._children;\n                node._children = null;\n            }\n            if (node.children) {\n                node.children.forEach(expandRecursive);\n            }\n        };\n        \n        expandRecursive(this.root);\n        this.update(this.root);\n        this.showNotification('All nodes expanded', 'info');\n    }\n\n    /**\n     * Collapse all nodes in the tree\n     */\n    collapseAll() {\n        if (!this.root) return;\n        \n        // Recursively collapse all nodes except root\n        const collapseRecursive = (node) => {\n            if (node.children) {\n                node._children = node.children;\n                node.children = null;\n            }\n            if (node._children) {\n                node._children.forEach(collapseRecursive);\n            }\n        };\n        \n        this.root.children?.forEach(collapseRecursive);\n        this.update(this.root);\n        this.showNotification('All nodes collapsed', 'info');\n    }\n\n    /**\n     * Reset zoom to fit the tree\n     */\n    resetZoom() {\n        if (!this.svg || !this.zoom) return;\n        \n        // Reset to identity transform for radial layout (centered)\n        this.svg.transition()\n            .duration(750)\n            .call(\n                this.zoom.transform,\n                d3.zoomIdentity\n            );\n        \n        this.showNotification('Zoom reset', 'info');\n    }\n\n    /**\n     * Focus on a specific node and its subtree\n     */\n    focusOnNode(node) {\n        if (!this.svg || !this.zoom || !node) return;\n        \n        // Get all descendants of this node\n        const descendants = node.descendants ? node.descendants() : [node];\n        \n        if (this.isRadialLayout) {\n            // For radial layout, calculate the bounding box in polar coordinates\n            const angles = descendants.map(d => d.x);\n            const radii = descendants.map(d => d.y);\n            \n            const minAngle = Math.min(...angles);\n            const maxAngle = Math.max(...angles);\n            const minRadius = Math.min(...radii);\n            const maxRadius = Math.max(...radii);\n            \n            // Convert polar bounds to Cartesian for centering\n            const centerAngle = (minAngle + maxAngle) / 2;\n            const centerRadius = (minRadius + maxRadius) / 2;\n            \n            // Convert to Cartesian coordinates\n            const centerX = centerRadius * Math.cos(centerAngle - Math.PI / 2);\n            const centerY = centerRadius * Math.sin(centerAngle - Math.PI / 2);\n            \n            // Calculate the span for zoom scale\n            const angleSpan = maxAngle - minAngle;\n            const radiusSpan = maxRadius - minRadius;\n            \n            // Calculate scale to fit the subtree\n            // Use angle span to determine scale (radial layout specific)\n            let scale = 1;\n            if (angleSpan > 0 && radiusSpan > 0) {\n                // Scale based on the larger dimension\n                const angleFactor = Math.PI * 2 / angleSpan;  // Full circle / angle span\n                const radiusFactor = this.radius / radiusSpan;\n                scale = Math.min(angleFactor, radiusFactor, 3);  // Max zoom of 3x\n                scale = Math.max(scale, 1);  // Min zoom of 1x\n            }\n            \n            // Animate the zoom and center\n            this.svg.transition()\n                .duration(750)\n                .call(\n                    this.zoom.transform,\n                    d3.zoomIdentity\n                        .translate(this.width/2 - centerX * scale, this.height/2 - centerY * scale)\n                        .scale(scale)\n                );\n                \n        } else {\n            // For linear/tree layout\n            const xValues = descendants.map(d => d.x);\n            const yValues = descendants.map(d => d.y);\n            \n            const minX = Math.min(...xValues);\n            const maxX = Math.max(...xValues);\n            const minY = Math.min(...yValues);\n            const maxY = Math.max(...yValues);\n            \n            // Calculate center\n            const centerX = (minX + maxX) / 2;\n            const centerY = (minY + maxY) / 2;\n            \n            // Calculate bounds\n            const width = maxX - minX;\n            const height = maxY - minY;\n            \n            // Calculate scale to fit\n            const padding = 100;\n            let scale = 1;\n            if (width > 0 && height > 0) {\n                const scaleX = (this.width - padding) / width;\n                const scaleY = (this.height - padding) / height;\n                scale = Math.min(scaleX, scaleY, 2.5);  // Max zoom of 2.5x\n                scale = Math.max(scale, 0.5);  // Min zoom of 0.5x\n            }\n            \n            // Animate zoom to focus\n            this.svg.transition()\n                .duration(750)\n                .call(\n                    this.zoom.transform,\n                    d3.zoomIdentity\n                        .translate(this.width/2 - centerX * scale, this.height/2 - centerY * scale)\n                        .scale(scale)\n                );\n        }\n        \n        // Update breadcrumb with focused path\n        const path = this.getNodePath(node);\n        this.updateBreadcrumb(`Focused: ${path}`, 'info');\n    }\n    \n    /**\n     * Get the full path of a node\n     */\n    getNodePath(node) {\n        const path = [];\n        let current = node;\n        while (current) {\n            if (current.data && current.data.name) {\n                path.unshift(current.data.name);\n            }\n            current = current.parent;\n        }\n        return path.join(' / ');\n    }\n\n    /**\n     * Toggle legend visibility\n     */\n    toggleLegend() {\n        const legend = document.getElementById('tree-legend');\n        if (legend) {\n            if (legend.style.display === 'none') {\n                legend.style.display = 'block';\n            } else {\n                legend.style.display = 'none';\n            }\n        }\n    }\n\n    /**\n     * Get the current working directory\n     */\n    getWorkingDirectory() {\n        // Try to get from dashboard's working directory manager\n        if (window.dashboard && window.dashboard.workingDirectoryManager) {\n            return window.dashboard.workingDirectoryManager.getCurrentWorkingDir();\n        }\n        \n        // Fallback to checking the DOM element\n        const workingDirPath = document.getElementById('working-dir-path');\n        if (workingDirPath) {\n            const pathText = workingDirPath.textContent.trim();\n            if (pathText && pathText !== 'Loading...' && pathText !== 'Not selected') {\n                return pathText;\n            }\n        }\n        \n        return null;\n    }\n    \n    /**\n     * Show a message when no working directory is selected\n     */\n    showNoWorkingDirectoryMessage() {\n        const container = document.getElementById('code-tree-container');\n        if (!container) return;\n        \n        // Remove any existing message\n        this.removeNoWorkingDirectoryMessage();\n        \n        // Hide loading if shown\n        this.hideLoading();\n        \n        // Create message element\n        const messageDiv = document.createElement('div');\n        messageDiv.id = 'no-working-dir-message';\n        messageDiv.className = 'no-working-dir-message';\n        messageDiv.innerHTML = `\n            <div class=\"message-icon\">📁</div>\n            <h3>No Working Directory Selected</h3>\n            <p>Please select a working directory from the top menu to analyze code.</p>\n            <button id=\"select-working-dir-btn\" class=\"btn btn-primary\">\n                Select Working Directory\n            </button>\n        `;\n        messageDiv.style.cssText = `\n            text-align: center;\n            padding: 40px;\n            color: #666;\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        `;\n        \n        // Style the message elements\n        const messageIcon = messageDiv.querySelector('.message-icon');\n        if (messageIcon) {\n            messageIcon.style.cssText = 'font-size: 48px; margin-bottom: 16px; opacity: 0.5;';\n        }\n        \n        const h3 = messageDiv.querySelector('h3');\n        if (h3) {\n            h3.style.cssText = 'margin: 16px 0; color: #333; font-size: 20px;';\n        }\n        \n        const p = messageDiv.querySelector('p');\n        if (p) {\n            p.style.cssText = 'margin: 16px 0; color: #666; font-size: 14px;';\n        }\n        \n        const button = messageDiv.querySelector('button');\n        if (button) {\n            button.style.cssText = `\n                margin-top: 20px;\n                padding: 10px 20px;\n                background: #3b82f6;\n                color: white;\n                border: none;\n                border-radius: 6px;\n                cursor: pointer;\n                font-size: 14px;\n                transition: background 0.2s;\n            `;\n            button.addEventListener('mouseenter', () => {\n                button.style.background = '#2563eb';\n            });\n            button.addEventListener('mouseleave', () => {\n                button.style.background = '#3b82f6';\n            });\n            button.addEventListener('click', () => {\n                // Trigger working directory selection\n                const changeDirBtn = document.getElementById('change-dir-btn');\n                if (changeDirBtn) {\n                    changeDirBtn.click();\n                } else if (window.dashboard && window.dashboard.workingDirectoryManager) {\n                    window.dashboard.workingDirectoryManager.showChangeDirDialog();\n                }\n            });\n        }\n        \n        container.appendChild(messageDiv);\n        \n        // Update breadcrumb\n        this.updateBreadcrumb('Please select a working directory', 'warning');\n    }\n    \n    /**\n     * Remove the no working directory message\n     */\n    removeNoWorkingDirectoryMessage() {\n        const message = document.getElementById('no-working-dir-message');\n        if (message) {\n            message.remove();\n        }\n    }\n    \n    /**\n     * Export tree data\n     */\n    exportTree() {\n        const exportData = {\n            timestamp: new Date().toISOString(),\n            workingDirectory: this.getWorkingDirectory(),\n            stats: this.stats,\n            tree: this.treeData\n        };\n\n        const blob = new Blob([JSON.stringify(exportData, null, 2)], \n                             {type: 'application/json'});\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `code-tree-${Date.now()}.json`;\n        link.click();\n        URL.revokeObjectURL(url);\n\n        this.showNotification('Tree exported successfully', 'success');\n    }\n\n    /**\n     * Update activity ticker with real-time messages\n     */\n    updateActivityTicker(message, type = 'info') {\n        const breadcrumb = document.getElementById('breadcrumb-content');\n        if (breadcrumb) {\n            // Add spinning icon for loading states\n            const icon = type === 'info' && message.includes('...') ? '⟳ ' : '';\n            breadcrumb.innerHTML = `${icon}${message}`;\n            breadcrumb.className = `breadcrumb-${type}`;\n        }\n    }\n    \n    /**\n     * Update ticker message\n     */\n    updateTicker(message, type = 'info') {\n        const ticker = document.getElementById('code-tree-ticker');\n        if (ticker) {\n            ticker.textContent = message;\n            ticker.className = `ticker ticker-${type}`;\n            \n            // Auto-hide after 5 seconds for non-error messages\n            if (type !== 'error') {\n                setTimeout(() => {\n                    ticker.style.opacity = '0';\n                    setTimeout(() => {\n                        ticker.style.opacity = '1';\n                        ticker.textContent = '';\n                    }, 300);\n                }, 5000);\n            }\n        }\n    }\n}\n\n// Export for use in other modules\nwindow.CodeTree = CodeTree;\n\n// Auto-initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Check if we're on a page with code tree container\n    if (document.getElementById('code-tree-container')) {\n        window.codeTree = new CodeTree();\n        \n        // Listen for tab changes to initialize when code tab is selected\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('[data-tab=\"code\"]')) {\n                setTimeout(() => {\n                    if (window.codeTree && !window.codeTree.initialized) {\n                        window.codeTree.initialize();\n                    } else if (window.codeTree) {\n                        window.codeTree.renderWhenVisible();\n                    }\n                }, 100);\n            }\n        });\n    }\n});"],"names":["CodeTree","constructor","this","container","svg","treeData","root","treeLayout","treeGroup","nodes","Map","stats","files","classes","functions","methods","lines","isRadialLayout","margin","top","right","bottom","left","width","height","radius","Math","min","nodeId","duration","languageFilter","searchTerm","tooltip","initialized","analyzing","selectedNode","socket","autoDiscovered","zoom","activeNode","loadingNodes","Set","initialize","document","getElementById","console","error","tabPanel","workingDir","getWorkingDirectory","showNoWorkingDirectoryMessage","setupControls","initializeTreeData","subscribeToEvents","updateActivityTicker","classList","contains","createVisualization","update","autoDiscoverRootLevel","renderWhenVisible","removeNoWorkingDirectoryMessage","addEventListener","e","target","value","filterTree","searchBox","toLowerCase","expandBtn","expandAll","collapseBtn","collapseAll","resetZoomBtn","resetZoom","toggleLegendBtn","toggleLegend","showHiddenFilesCheckbox","showNotification","checked","log","detail","directory","onWorkingDirectoryChanged","newDirectory","clear","updateStats","showLoading","loadingDiv","createElement","id","innerHTML","appendChild","remove","hideLoading","add","d3","select","selectAll","node","containerNode","containerWidth","clientWidth","containerHeight","clientHeight","append","attr","centerX","centerY","cluster","size","PI","separation","a","b","parent","depthFactor","max","depth","siblingCount","children","length","siblingFactor","radiusFactor","tree","nodeSize","scaleExtent","on","event","transform","x","y","k","call","addVisualizationControls","style","dirName","split","pop","path","name","type","loaded","expanded","hierarchy","x0","y0","window","setupEventHandlers","dashboard","socketClient","warn","startsWith","match","hasListeners","updateBreadcrumb","selectedLanguages","querySelectorAll","forEach","cb","push","ignorePatterns","showHiddenFiles","requestPayload","languages","ignore_patterns","show_hidden_files","emit","analyzeCode","cancelAnalysis","addEventToDisplay","createEventsDisplay","eventsContainer","treeContainer","className","display","clearEventsDisplay","message","eventEl","borderLeftColor","timestamp","Date","toLocaleTimeString","scrollTop","scrollHeight","data","onAnalysisAccepted","onAnalysisQueued","onAnalysisStart","onAnalysisComplete","onAnalysisCancelled","onAnalysisError","onDirectoryDiscovered","onFileDiscovered","onFileAnalyzed","onNodeFound","onProgressUpdate","findNodeByPath","d3Node","findD3NodeByPath","has","removeLoadingPulse","map","child","analyzed","directories","items","Array","isArray","item","language","detectLanguage","has_code","_children","pathParts","filter","p","forceAdd","dirNode","addNodeToTree","fileName","parentPath","slice","join","fileNode","complexity","elements","elem","line","docstring","m","typeIcon","nodeInfo","class","function","method","module","file","parent_path","file_path","includes","parts","elementType","charAt","toUpperCase","progress","progressBar","querySelector","position","onInfoEvent","statsMsg","debugMode","showFilterEvents","debug","reason","showCacheEvents","eventLogEnabled","recentEvents","unshift","toISOString","notification","textContent","zIndex","setTimeout","animation","parentNode","existingNode","find","c","Object","assign","set","found","descendants","d","statsElements","entries","toLocaleString","progressText","statusText","breadcrumbContent","filePath","py","js","ts","jsx","tsx","java","cpp","cs","rb","go","rs","php","swift","kt","scala","r","sh","ps1","toggleButton","toggleLayout","text","radialPoint","cos","sin","source","links","nodeEnter","enter","onNodeClick","getNodeColor","getNodeStrokeColor","showTooltip","hideTooltip","substring","maxLength","getNodeIcon","nodeUpdate","merge","transition","isRadial","each","selection","angle","nodeExit","exit","link","insert","o","radialDiagonal","diagonal","centerOnNode","zoomTransform","zoomIdentity","translate","scale","centerOnNodeRadial","targetX","targetY","highlightActiveNode","classed","addLoadingPulse","pulseAnimation","delete","interrupt","showWithParent","angles","n","radii","minAngle","maxAngle","maxRadius","angleSpan","centerAngle","centerRadius","stopPropagation","fileLanguage","fullPath","ensureFullPath","highlightNode","replace","s","linkRadial","baseColor","color","darker","info","html","pageX","pageY","_hidden","expandRecursive","collapseRecursive","focusOnNode","minRadius","radiusSpan","angleFactor","xValues","yValues","minX","maxX","minY","maxY","padding","scaleX","scaleY","getNodePath","current","legend","workingDirectoryManager","getCurrentWorkingDir","workingDirPath","pathText","trim","messageDiv","cssText","messageIcon","h3","button","background","changeDirBtn","click","showChangeDirDialog","exportTree","exportData","workingDirectory","blob","Blob","JSON","stringify","url","URL","createObjectURL","href","download","now","revokeObjectURL","breadcrumb","icon","updateTicker","ticker","opacity","codeTree","matches"],"mappings":"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"}