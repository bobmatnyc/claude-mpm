{"version":3,"file":"code-tree.js","sources":["../../js/components/code-tree.js"],"sourcesContent":["/**\n * Code Tree Component\n * \n * D3.js-based tree visualization for displaying AST-based code structure.\n * Shows modules, classes, functions, and methods with complexity-based coloring.\n * Provides real-time updates during code analysis.\n */\n\nclass CodeTree {\n    constructor() {\n        this.container = null;\n        this.svg = null;\n        this.treeData = null;\n        this.root = null;\n        this.treeLayout = null;\n        this.treeGroup = null;\n        this.nodes = new Map();\n        this.stats = {\n            files: 0,\n            classes: 0,\n            functions: 0,\n            methods: 0,\n            lines: 0\n        };\n        // Radial layout settings\n        this.isRadialLayout = true;  // Toggle for radial vs linear layout\n        this.margin = {top: 20, right: 20, bottom: 20, left: 20};\n        this.width = 960 - this.margin.left - this.margin.right;\n        this.height = 600 - this.margin.top - this.margin.bottom;\n        this.radius = Math.min(this.width, this.height) / 2;\n        this.nodeId = 0;\n        this.duration = 750;\n        this.languageFilter = 'all';\n        this.searchTerm = '';\n        this.tooltip = null;\n        this.initialized = false;\n        this.analyzing = false;\n        this.selectedNode = null;\n        this.socket = null;\n        this.autoDiscovered = false;  // Track if auto-discovery has been done\n        this.zoom = null;  // Store zoom behavior\n        this.activeNode = null;  // Track currently active node\n        this.loadingNodes = new Set();  // Track nodes that are loading\n    }\n\n    /**\n     * Initialize the code tree visualization\n     */\n    initialize() {\n        if (this.initialized) {\n            return;\n        }\n        \n        this.container = document.getElementById('code-tree-container');\n        if (!this.container) {\n            console.error('Code tree container not found');\n            return;\n        }\n        \n        // Check if tab is visible\n        const tabPanel = document.getElementById('code-tab');\n        if (!tabPanel) {\n            console.error('Code tab panel not found');\n            return;\n        }\n        \n        // Check if working directory is set\n        const workingDir = this.getWorkingDirectory();\n        if (!workingDir || workingDir === 'Loading...' || workingDir === 'Not selected') {\n            this.showNoWorkingDirectoryMessage();\n            this.initialized = true;\n            return;\n        }\n        \n        // Initialize always\n        this.setupControls();\n        this.initializeTreeData();\n        this.subscribeToEvents();\n        \n        // Set initial status message\n        const breadcrumbContent = document.getElementById('breadcrumb-content');\n        if (breadcrumbContent && !this.analyzing) {\n            this.updateActivityTicker('Loading project structure...', 'info');\n        }\n        \n        // Only create visualization if tab is visible\n        if (tabPanel.classList.contains('active')) {\n            this.createVisualization();\n            if (this.root && this.svg) {\n                this.update(this.root);\n            }\n            // Auto-discover root level when tab is active\n            this.autoDiscoverRootLevel();\n        }\n        \n        this.initialized = true;\n    }\n\n    /**\n     * Render visualization when tab becomes visible\n     */\n    renderWhenVisible() {\n        // Check if working directory is set\n        const workingDir = this.getWorkingDirectory();\n        if (!workingDir || workingDir === 'Loading...' || workingDir === 'Not selected') {\n            this.showNoWorkingDirectoryMessage();\n            return;\n        }\n        \n        // If no directory message is shown, remove it\n        this.removeNoWorkingDirectoryMessage();\n        \n        if (!this.initialized) {\n            this.initialize();\n            return;\n        }\n        \n        if (!this.svg) {\n            this.createVisualization();\n            if (this.svg && this.treeGroup) {\n                this.update(this.root);\n            }\n        } else {\n            // Force update with current data\n            if (this.root && this.svg) {\n                this.update(this.root);\n            }\n        }\n        \n        // Auto-discover root level if not done yet\n        if (!this.autoDiscovered) {\n            this.autoDiscoverRootLevel();\n        }\n    }\n\n    /**\n     * Set up control event handlers\n     */\n    setupControls() {\n        // Remove analyze and cancel button handlers since they're no longer in the UI\n\n        const languageFilter = document.getElementById('language-filter');\n        if (languageFilter) {\n            languageFilter.addEventListener('change', (e) => {\n                this.languageFilter = e.target.value;\n                this.filterTree();\n            });\n        }\n\n        const searchBox = document.getElementById('code-search');\n        if (searchBox) {\n            searchBox.addEventListener('input', (e) => {\n                this.searchTerm = e.target.value.toLowerCase();\n                this.filterTree();\n            });\n        }\n\n        const expandBtn = document.getElementById('code-expand-all');\n        if (expandBtn) {\n            expandBtn.addEventListener('click', () => this.expandAll());\n        }\n        \n        const collapseBtn = document.getElementById('code-collapse-all');\n        if (collapseBtn) {\n            collapseBtn.addEventListener('click', () => this.collapseAll());\n        }\n        \n        const resetZoomBtn = document.getElementById('code-reset-zoom');\n        if (resetZoomBtn) {\n            resetZoomBtn.addEventListener('click', () => this.resetZoom());\n        }\n        \n        const toggleLegendBtn = document.getElementById('code-toggle-legend');\n        if (toggleLegendBtn) {\n            toggleLegendBtn.addEventListener('click', () => this.toggleLegend());\n        }\n        \n        // Listen for working directory changes\n        document.addEventListener('workingDirectoryChanged', (e) => {\n            this.onWorkingDirectoryChanged(e.detail.directory);\n        });\n    }\n    \n    /**\n     * Handle working directory change\n     */\n    onWorkingDirectoryChanged(newDirectory) {\n        if (!newDirectory || newDirectory === 'Loading...' || newDirectory === 'Not selected') {\n            // Show no directory message\n            this.showNoWorkingDirectoryMessage();\n            // Reset tree state\n            this.autoDiscovered = false;\n            this.analyzing = false;\n            this.nodes.clear();\n            this.stats = {\n                files: 0,\n                classes: 0,\n                functions: 0,\n                methods: 0,\n                lines: 0\n            };\n            this.updateStats();\n            return;\n        }\n        \n        // Remove any no directory message\n        this.removeNoWorkingDirectoryMessage();\n        \n        // Reset discovery state for new directory\n        this.autoDiscovered = false;\n        this.analyzing = false;\n        \n        // Clear existing data\n        this.nodes.clear();\n        this.stats = {\n            files: 0,\n            classes: 0,\n            functions: 0,\n            methods: 0,\n            lines: 0\n        };\n        \n        // Re-initialize with new directory\n        this.initializeTreeData();\n        if (this.svg) {\n            this.update(this.root);\n        }\n        \n        // Check if Code tab is currently active\n        const tabPanel = document.getElementById('code-tab');\n        if (tabPanel && tabPanel.classList.contains('active')) {\n            // Auto-discover in the new directory\n            this.autoDiscoverRootLevel();\n        }\n        \n        this.updateStats();\n    }\n\n    /**\n     * Show loading spinner\n     */\n    showLoading() {\n        let loadingDiv = document.getElementById('code-tree-loading');\n        if (!loadingDiv) {\n            // Create loading element if it doesn't exist\n            const container = document.getElementById('code-tree-container');\n            if (container) {\n                loadingDiv = document.createElement('div');\n                loadingDiv.id = 'code-tree-loading';\n                loadingDiv.innerHTML = `\n                    <div class=\"code-tree-spinner\"></div>\n                    <div class=\"code-tree-loading-text\">Analyzing code structure...</div>\n                `;\n                container.appendChild(loadingDiv);\n            }\n        }\n        if (loadingDiv) {\n            loadingDiv.classList.remove('hidden');\n        }\n    }\n\n    /**\n     * Hide loading spinner\n     */\n    hideLoading() {\n        const loadingDiv = document.getElementById('code-tree-loading');\n        if (loadingDiv) {\n            loadingDiv.classList.add('hidden');\n        }\n    }\n\n    /**\n     * Create the D3.js visualization\n     */\n    createVisualization() {\n        if (typeof d3 === 'undefined') {\n            console.error('D3.js is not loaded');\n            return;\n        }\n\n        const container = d3.select('#code-tree-container');\n        container.selectAll('*').remove();\n\n        if (!container || !container.node()) {\n            console.error('Code tree container not found');\n            return;\n        }\n\n        // Calculate dimensions\n        const containerNode = container.node();\n        const containerWidth = containerNode.clientWidth || 960;\n        const containerHeight = containerNode.clientHeight || 600;\n\n        this.width = containerWidth - this.margin.left - this.margin.right;\n        this.height = containerHeight - this.margin.top - this.margin.bottom;\n        this.radius = Math.min(this.width, this.height) / 2;\n\n        // Create SVG\n        this.svg = container.append('svg')\n            .attr('width', containerWidth)\n            .attr('height', containerHeight);\n\n        // Create tree group with appropriate centering\n        const centerX = containerWidth / 2;\n        const centerY = containerHeight / 2;\n        \n        // Different initial positioning for different layouts\n        if (this.isRadialLayout) {\n            // Radial: center in the middle of the canvas\n            this.treeGroup = this.svg.append('g')\n                .attr('transform', `translate(${centerX},${centerY})`);\n        } else {\n            // Linear: start from left with some margin\n            this.treeGroup = this.svg.append('g')\n                .attr('transform', `translate(${this.margin.left + 100},${centerY})`);\n        }\n\n        // Create tree layout with improved spacing\n        if (this.isRadialLayout) {\n            // Use d3.cluster for better radial distribution\n            this.treeLayout = d3.cluster()\n                .size([2 * Math.PI, this.radius - 100])\n                .separation((a, b) => {\n                    // Enhanced separation for radial layout\n                    if (a.parent == b.parent) {\n                        // Base separation on tree depth for better spacing\n                        const depthFactor = Math.max(1, 4 - a.depth);\n                        // Increase spacing for nodes with many siblings\n                        const siblingCount = a.parent ? (a.parent.children?.length || 1) : 1;\n                        const siblingFactor = siblingCount > 5 ? 2 : (siblingCount > 3 ? 1.5 : 1);\n                        // More spacing at outer levels where circumference is larger\n                        const radiusFactor = 1 + (a.depth * 0.2);\n                        return (depthFactor * siblingFactor) / (a.depth || 1) * radiusFactor;\n                    } else {\n                        // Different parents - ensure enough space\n                        return 4 / (a.depth || 1);\n                    }\n                });\n        } else {\n            // Linear layout with dynamic sizing based on node count\n            // Use nodeSize for consistent spacing regardless of tree size\n            this.treeLayout = d3.tree()\n                .nodeSize([30, 200])  // Fixed spacing: 30px vertical, 200px horizontal\n                .separation((a, b) => {\n                    // Consistent separation for linear layout\n                    if (a.parent == b.parent) {\n                        // Same parent - standard spacing\n                        return 1;\n                    } else {\n                        // Different parents - slightly more space\n                        return 1.5;\n                    }\n                });\n        }\n\n        // Add zoom behavior with proper transform handling\n        this.zoom = d3.zoom()\n            .scaleExtent([0.1, 10])\n            .on('zoom', (event) => {\n                if (this.isRadialLayout) {\n                    // Radial: maintain center point\n                    this.treeGroup.attr('transform', \n                        `translate(${centerX + event.transform.x},${centerY + event.transform.y}) scale(${event.transform.k})`);\n                } else {\n                    // Linear: maintain left margin\n                    this.treeGroup.attr('transform', \n                        `translate(${this.margin.left + 100 + event.transform.x},${centerY + event.transform.y}) scale(${event.transform.k})`);\n                }\n            });\n\n        this.svg.call(this.zoom);\n\n        // Add controls overlay\n        this.addVisualizationControls();\n\n        // Create tooltip\n        this.tooltip = d3.select('body').append('div')\n            .attr('class', 'code-tree-tooltip')\n            .style('opacity', 0)\n            .style('position', 'absolute')\n            .style('background', 'rgba(0, 0, 0, 0.8)')\n            .style('color', 'white')\n            .style('padding', '8px')\n            .style('border-radius', '4px')\n            .style('font-size', '12px')\n            .style('pointer-events', 'none');\n    }\n\n    /**\n     * Clear all D3 visualization elements\n     */\n    clearD3Visualization() {\n        if (this.treeGroup) {\n            // Remove all existing nodes and links\n            this.treeGroup.selectAll('g.node').remove();\n            this.treeGroup.selectAll('path.link').remove();\n        }\n        // Reset node ID counter for proper tracking\n        this.nodeId = 0;\n    }\n    \n    /**\n     * Initialize tree data structure\n     */\n    initializeTreeData() {\n        const workingDir = this.getWorkingDirectory();\n        const dirName = workingDir ? workingDir.split('/').pop() || 'Project Root' : 'Project Root';\n        \n        // Use '.' as the root path for consistency with relative path handling\n        // The actual working directory is retrieved via getWorkingDirectory() when needed\n        this.treeData = {\n            name: dirName,\n            path: '.',  // Always use '.' for root to simplify path handling\n            type: 'root',\n            children: [],\n            loaded: false,\n            expanded: true  // Start expanded\n        };\n\n        if (typeof d3 !== 'undefined') {\n            this.root = d3.hierarchy(this.treeData);\n            this.root.x0 = this.height / 2;\n            this.root.y0 = 0;\n        }\n    }\n\n    /**\n     * Subscribe to code analysis events\n     */\n    subscribeToEvents() {\n        if (!this.socket) {\n            if (window.socket) {\n                this.socket = window.socket;\n                this.setupEventHandlers();\n            } else if (window.dashboard?.socketClient?.socket) {\n                this.socket = window.dashboard.socketClient.socket;\n                this.setupEventHandlers();\n            } else if (window.socketClient?.socket) {\n                this.socket = window.socketClient.socket;\n                this.setupEventHandlers();\n            }\n        }\n    }\n\n    /**\n     * Automatically discover root-level objects when tab opens\n     */\n    autoDiscoverRootLevel() {\n        if (this.autoDiscovered || this.analyzing) {\n            return;\n        }\n        \n        // Update activity ticker\n        this.updateActivityTicker('🔍 Discovering project structure...', 'info');\n        \n        // Get working directory\n        const workingDir = this.getWorkingDirectory();\n        if (!workingDir || workingDir === 'Loading...' || workingDir === 'Not selected') {\n            console.warn('Cannot auto-discover: no working directory set');\n            this.showNoWorkingDirectoryMessage();\n            return;\n        }\n        \n        // Ensure we have an absolute path\n        if (!workingDir.startsWith('/') && !workingDir.match(/^[A-Z]:\\\\/)) {\n            console.error('Working directory is not absolute:', workingDir);\n            this.showNotification('Invalid working directory path', 'error');\n            return;\n        }\n        \n        \n        this.autoDiscovered = true;\n        this.analyzing = true;\n        \n        // Clear any existing nodes\n        this.nodes.clear();\n        this.stats = {\n            files: 0,\n            classes: 0,\n            functions: 0,\n            methods: 0,\n            lines: 0\n        };\n        \n        // Subscribe to events if not already done\n        if (this.socket && !this.socket.hasListeners('code:node:found')) {\n            this.setupEventHandlers();\n        }\n        \n        // Update tree data with working directory as the root\n        const dirName = workingDir.split('/').pop() || 'Project Root';\n        this.treeData = {\n            name: dirName,\n            path: '.',  // Use '.' for root to maintain consistency with relative path handling\n            type: 'root',\n            children: [],\n            loaded: false,\n            expanded: true  // Start expanded to show discovered items\n        };\n        \n        if (typeof d3 !== 'undefined') {\n            this.root = d3.hierarchy(this.treeData);\n            this.root.x0 = this.height / 2;\n            this.root.y0 = 0;\n        }\n        \n        // Update UI\n        this.showLoading();\n        this.updateBreadcrumb(`Discovering structure in ${dirName}...`, 'info');\n        \n        // Get selected languages from checkboxes\n        const selectedLanguages = [];\n        document.querySelectorAll('.language-checkbox:checked').forEach(cb => {\n            selectedLanguages.push(cb.value);\n        });\n        \n        // Get ignore patterns\n        const ignorePatterns = document.getElementById('ignore-patterns')?.value || '';\n        \n        // Enhanced debug logging\n        \n        // Request top-level discovery with working directory\n        const requestPayload = {\n            path: workingDir,  // Use working directory instead of '.'\n            depth: 'top_level',\n            languages: selectedLanguages,\n            ignore_patterns: ignorePatterns,\n            request_id: `discover_${Date.now()}`  // Add request ID for tracking\n        };\n        \n        // Sending top-level discovery request\n        \n        if (this.socket) {\n            this.socket.emit('code:discover:top_level', requestPayload);\n        }\n        \n        // Update stats display\n        this.updateStats();\n    }\n    \n    /**\n     * Legacy analyzeCode method - redirects to auto-discovery\n     */\n    analyzeCode() {\n        if (this.analyzing) {\n            return;\n        }\n\n        // Redirect to auto-discovery\n        this.autoDiscoverRootLevel();\n    }\n\n    /**\n     * Cancel ongoing analysis - removed since we no longer have a cancel button\n     */\n    cancelAnalysis() {\n        this.analyzing = false;\n        this.hideLoading();\n\n        if (this.socket) {\n            this.socket.emit('code:analysis:cancel');\n        }\n\n        this.updateBreadcrumb('Analysis cancelled', 'warning');\n        this.showNotification('Analysis cancelled', 'warning');\n        this.addEventToDisplay('Analysis cancelled', 'warning');\n    }\n\n    /**\n     * Create the events display area\n     */\n    createEventsDisplay() {\n        let eventsContainer = document.getElementById('analysis-events');\n        if (!eventsContainer) {\n            const treeContainer = document.getElementById('code-tree-container');\n            if (treeContainer) {\n                eventsContainer = document.createElement('div');\n                eventsContainer.id = 'analysis-events';\n                eventsContainer.className = 'analysis-events';\n                eventsContainer.style.display = 'none';\n                treeContainer.appendChild(eventsContainer);\n            }\n        }\n    }\n\n    /**\n     * Clear the events display\n     */\n    clearEventsDisplay() {\n        const eventsContainer = document.getElementById('analysis-events');\n        if (eventsContainer) {\n            eventsContainer.innerHTML = '';\n            eventsContainer.style.display = 'block';\n        }\n    }\n\n    /**\n     * Add an event to the display\n     */\n    addEventToDisplay(message, type = 'info') {\n        const eventsContainer = document.getElementById('analysis-events');\n        if (eventsContainer) {\n            const eventEl = document.createElement('div');\n            eventEl.className = 'analysis-event';\n            eventEl.style.borderLeftColor = type === 'warning' ? '#f59e0b' : \n                                          type === 'error' ? '#ef4444' : '#3b82f6';\n            \n            const timestamp = new Date().toLocaleTimeString();\n            eventEl.innerHTML = `<span style=\"color: #718096;\">[${timestamp}]</span> ${message}`;\n            \n            eventsContainer.appendChild(eventEl);\n            // Auto-scroll to bottom\n            eventsContainer.scrollTop = eventsContainer.scrollHeight;\n        }\n    }\n\n    /**\n     * Setup Socket.IO event handlers\n     */\n    setupEventHandlers() {\n        if (!this.socket) return;\n\n        // Analysis lifecycle events\n        this.socket.on('code:analysis:accepted', (data) => this.onAnalysisAccepted(data));\n        this.socket.on('code:analysis:queued', (data) => this.onAnalysisQueued(data));\n        this.socket.on('code:analysis:start', (data) => this.onAnalysisStart(data));\n        this.socket.on('code:analysis:complete', (data) => this.onAnalysisComplete(data));\n        this.socket.on('code:analysis:cancelled', (data) => this.onAnalysisCancelled(data));\n        this.socket.on('code:analysis:error', (data) => this.onAnalysisError(data));\n\n        // Node discovery events\n        this.socket.on('code:top_level:discovered', (data) => this.onTopLevelDiscovered(data));\n        this.socket.on('code:directory:discovered', (data) => this.onDirectoryDiscovered(data));\n        this.socket.on('code:file:discovered', (data) => this.onFileDiscovered(data));\n        this.socket.on('code:file:analyzed', (data) => this.onFileAnalyzed(data));\n        this.socket.on('code:node:found', (data) => this.onNodeFound(data));\n\n        // Progress updates\n        this.socket.on('code:analysis:progress', (data) => this.onProgressUpdate(data));\n        \n        // Lazy loading responses\n        this.socket.on('code:directory:contents', (data) => {\n            // Update the requested directory with its contents\n            if (data.path) {\n                // Convert absolute path back to relative path to match tree nodes\n                let searchPath = data.path;\n                const workingDir = this.getWorkingDirectory();\n                if (workingDir && searchPath.startsWith(workingDir)) {\n                    // Remove working directory prefix to get relative path\n                    searchPath = searchPath.substring(workingDir.length).replace(/^\\//, '');\n                    // If empty after removing prefix, it's the root\n                    if (!searchPath) {\n                        searchPath = '.';\n                    }\n                }\n                \n                const node = this.findNodeByPath(searchPath);\n                if (node && data.children) {\n                    // Find D3 node and remove loading pulse (use searchPath, not data.path)\n                    const d3Node = this.findD3NodeByPath(searchPath);\n                    if (d3Node && this.loadingNodes.has(searchPath)) {\n                        this.removeLoadingPulse(d3Node);\n                    }\n                    node.children = data.children.map(child => {\n                        // Construct full path for child by combining parent path with child name\n                        // The backend now returns just the item name, not the full path\n                        let childPath;\n                        if (searchPath === '.' || searchPath === '') {\n                            // Root level - child path is just the name\n                            childPath = child.name || child.path;\n                        } else {\n                            // Subdirectory - combine parent path with child name\n                            // Use child.name (backend returns just the name) or fallback to child.path\n                            const childName = child.name || child.path;\n                            childPath = `${searchPath}/${childName}`;\n                        }\n                        \n                        return {\n                            ...child,\n                            path: childPath,  // Override with constructed path\n                            loaded: child.type === 'directory' ? false : undefined,\n                            analyzed: child.type === 'file' ? false : undefined,\n                            expanded: false,\n                            children: []\n                        };\n                    });\n                    node.loaded = true;\n                    node.expanded = true; // Mark as expanded to show children\n                    \n                    // Update D3 hierarchy and make sure the node is expanded\n                    if (this.root && this.svg) {\n                        // Store old root to preserve expansion state\n                        const oldRoot = this.root;\n                        \n                        // Recreate hierarchy with updated data\n                        this.root = d3.hierarchy(this.treeData);\n                        this.root.x0 = this.height / 2;\n                        this.root.y0 = 0;\n                        \n                        // Preserve expansion state from old tree\n                        this.preserveExpansionState(oldRoot, this.root);\n                        \n                        // Find the D3 node again after hierarchy recreation\n                        const updatedD3Node = this.findD3NodeByPath(searchPath);\n                        if (updatedD3Node) {\n                            // Ensure children are visible (not collapsed)\n                            updatedD3Node.children = updatedD3Node._children || updatedD3Node.children;\n                            updatedD3Node._children = null;\n                            updatedD3Node.data.expanded = true;\n                        }\n                        \n                        this.update(this.root);\n                    }\n                    \n                    // Update stats based on discovered contents\n                    if (data.stats) {\n                        this.stats.files += data.stats.files || 0;\n                        this.stats.directories += data.stats.directories || 0;\n                        this.updateStats();\n                    }\n                    \n                    this.updateBreadcrumb(`Loaded ${data.path}`, 'success');\n                    this.hideLoading();\n                }\n            }\n        });\n        \n        // Top level discovery response\n        this.socket.on('code:top_level:discovered', (data) => {\n            if (data.items && Array.isArray(data.items)) {\n                \n                // Add discovered items to the root node\n                this.treeData.children = data.items.map(item => ({\n                    name: item.name,\n                    path: item.path,\n                    type: item.type,\n                    language: item.type === 'file' ? this.detectLanguage(item.path) : undefined,\n                    size: item.size,\n                    lines: item.lines,\n                    loaded: item.type === 'directory' ? false : undefined,\n                    analyzed: item.type === 'file' ? false : undefined,\n                    expanded: false,\n                    children: []\n                }));\n                \n                this.treeData.loaded = true;\n                \n                // Update stats\n                if (data.stats) {\n                    this.stats = { ...this.stats, ...data.stats };\n                    this.updateStats();\n                }\n                \n                // Update D3 hierarchy\n                if (typeof d3 !== 'undefined') {\n                    // Clear any existing nodes before creating new ones\n                    this.clearD3Visualization();\n                    \n                    // Create new hierarchy\n                    this.root = d3.hierarchy(this.treeData);\n                    this.root.x0 = this.height / 2;\n                    this.root.y0 = 0;\n                    \n                    if (this.svg) {\n                        this.update(this.root);\n                    }\n                }\n                \n                this.analyzing = false;\n                this.hideLoading();\n                this.updateBreadcrumb(`Discovered ${data.items.length} root items`, 'success');\n                this.showNotification(`Found ${data.items.length} items in project root`, 'success');\n            }\n        });\n    }\n\n    /**\n     * Handle analysis start event\n     */\n    onAnalysisStart(data) {\n        this.analyzing = true;\n        const message = data.message || 'Starting code analysis...';\n        \n        // Update activity ticker\n        this.updateActivityTicker('🚀 Starting analysis...', 'info');\n        \n        this.updateBreadcrumb(message, 'info');\n        this.addEventToDisplay(`🚀 ${message}`, 'info');\n        \n        // Initialize or clear the tree\n        if (!this.treeData || this.treeData.children.length === 0) {\n            this.initializeTreeData();\n        }\n        \n        // Reset stats\n        this.stats = { \n            files: 0, \n            classes: 0, \n            functions: 0, \n            methods: 0, \n            lines: 0 \n        };\n        this.updateStats();\n    }\n\n    /**\n     * Handle top-level discovery event (initial root directory scan)\n     */\n    onTopLevelDiscovered(data) {\n        // Received top-level discovery response\n        \n        // Update activity ticker\n        this.updateActivityTicker(`📁 Discovered ${(data.items || []).length} top-level items`, 'success');\n        \n        // Add to events display\n        this.addEventToDisplay(`📁 Found ${(data.items || []).length} top-level items in project root`, 'info');\n        \n        // The root node (with path '.') should receive the children\n        const rootNode = this.findNodeByPath('.');\n        \n        console.log('🔎 Looking for root node with path \".\", found:', rootNode ? {\n            name: rootNode.name,\n            path: rootNode.path,\n            currentChildren: rootNode.children ? rootNode.children.length : 0\n        } : 'NOT FOUND');\n        \n        if (rootNode && data.items) {\n            console.log('🌳 Populating root node with children');\n            \n            // Update the root node with discovered children\n            rootNode.children = data.items.map(child => {\n                // Items at root level get their name as the path\n                const childPath = child.name;\n                \n                console.log(`  Adding child: ${child.name} with path: ${childPath}`);\n                \n                return {\n                    name: child.name,\n                    path: childPath,  // Just the name for top-level items\n                    type: child.type,\n                    loaded: child.type === 'directory' ? false : undefined,\n                    analyzed: child.type === 'file' ? false : undefined,\n                    expanded: false,\n                    children: child.type === 'directory' ? [] : undefined,\n                    size: child.size,\n                    has_code: child.has_code\n                };\n            });\n            \n            rootNode.loaded = true;\n            rootNode.expanded = true;\n            \n            // Update D3 hierarchy and render\n            if (this.root && this.svg) {\n                // Recreate hierarchy with new data\n                this.root = d3.hierarchy(this.treeData);\n                this.root.x0 = this.height / 2;\n                this.root.y0 = 0;\n                \n                // Update the tree visualization\n                this.update(this.root);\n            }\n            \n            // Hide loading and show success\n            this.hideLoading();\n            this.updateBreadcrumb(`Discovered ${data.items.length} items`, 'success');\n            this.showNotification(`Found ${data.items.length} top-level items`, 'success');\n        } else {\n            console.error('❌ Could not find root node to populate');\n            this.showNotification('Failed to populate root directory', 'error');\n        }\n        \n        // Mark analysis as complete\n        this.analyzing = false;\n    }\n    \n    /**\n     * Handle directory discovered event\n     */\n    onDirectoryDiscovered(data) {\n        // Update activity ticker first\n        this.updateActivityTicker(`📁 Discovered: ${data.name || 'directory'}`);\n        \n        // Add to events display\n        this.addEventToDisplay(`📁 Found ${(data.children || []).length} items in: ${data.name || data.path}`, 'info');\n        \n        console.log('📥 Received directory discovery:', {\n            path: data.path,\n            name: data.name,\n            childrenCount: (data.children || []).length,\n            children: (data.children || []).map(c => ({ name: c.name, type: c.type })),\n            workingDir: this.getWorkingDirectory()\n        });\n        \n        // Convert absolute path back to relative path to match tree nodes\n        let searchPath = data.path;\n        const workingDir = this.getWorkingDirectory();\n        if (workingDir && searchPath.startsWith(workingDir)) {\n            // Remove working directory prefix to get relative path\n            searchPath = searchPath.substring(workingDir.length).replace(/^\\//, '');\n            // If empty after removing prefix, it's the root\n            if (!searchPath) {\n                searchPath = '.';\n            }\n        }\n        \n        console.log('🔎 Searching for node with path:', searchPath);\n        \n        // Find the node that was clicked to trigger this discovery\n        const node = this.findNodeByPath(searchPath);\n        \n        // Located target node for expansion\n        \n        if (node && data.children) {\n            // Update the node with discovered children\n            node.children = data.children.map(child => {\n                // Construct full path for child by combining parent path with child name\n                // The backend now returns just the item name, not the full path\n                let childPath;\n                if (searchPath === '.' || searchPath === '') {\n                    // Root level - child path is just the name\n                    childPath = child.name || child.path;\n                } else {\n                    // Subdirectory - combine parent path with child name\n                    // Use child.name (backend returns just the name) or fallback to child.path\n                    const childName = child.name || child.path;\n                    childPath = `${searchPath}/${childName}`;\n                }\n                \n                return {\n                    name: child.name,\n                    path: childPath,  // Use constructed path instead of child.path\n                    type: child.type,\n                    loaded: child.type === 'directory' ? false : undefined,\n                    analyzed: child.type === 'file' ? false : undefined,\n                    expanded: false,\n                    children: child.type === 'directory' ? [] : undefined,\n                    size: child.size,\n                    has_code: child.has_code\n                };\n            });\n            node.loaded = true;\n            node.expanded = true;\n            \n            // Find D3 node and remove loading pulse (use searchPath, not data.path)\n            const d3Node = this.findD3NodeByPath(searchPath);\n            if (d3Node) {\n                // Remove loading animation\n                if (this.loadingNodes.has(searchPath)) {\n                    this.removeLoadingPulse(d3Node);\n                }\n            }\n            \n            // Update D3 hierarchy and redraw with expanded node\n            if (this.root && this.svg) {\n                // Store old root to preserve expansion state\n                const oldRoot = this.root;\n                \n                // Recreate hierarchy with updated data\n                this.root = d3.hierarchy(this.treeData);\n                \n                // Restore positions for smooth animation\n                this.root.x0 = this.height / 2;\n                this.root.y0 = 0;\n                \n                // Preserve expansion state from old tree\n                this.preserveExpansionState(oldRoot, this.root);\n                \n                // Find the D3 node again after hierarchy recreation\n                const updatedD3Node = this.findD3NodeByPath(searchPath);\n                if (updatedD3Node && updatedD3Node.data.children && updatedD3Node.data.children.length > 0) {\n                    // Ensure the node is expanded to show children\n                    updatedD3Node.children = updatedD3Node._children || updatedD3Node.children;\n                    updatedD3Node._children = null;\n                    // Mark data as expanded\n                    updatedD3Node.data.expanded = true;\n                }\n                \n                this.update(this.root);\n            }\n            \n            this.updateBreadcrumb(`Loaded ${node.children.length} items from ${node.name}`, 'success');\n            this.updateStats();\n        } else if (!node) {\n            this.logAllPaths(this.treeData);\n        } else if (node && !data.children) {\n            // This might be a top-level directory discovery\n            const pathParts = data.path ? data.path.split('/').filter(p => p) : [];\n            const isTopLevel = pathParts.length === 1;\n            \n            if (isTopLevel || data.forceAdd) {\n                const dirNode = {\n                    name: data.name || pathParts[pathParts.length - 1] || 'Unknown',\n                    path: data.path,\n                    type: 'directory',\n                    children: [],\n                    loaded: false,\n                    expanded: false,\n                    stats: data.stats || {}\n                };\n                \n                this.addNodeToTree(dirNode, data.parent || '');\n                this.updateBreadcrumb(`Discovered: ${data.path}`, 'info');\n            }\n        }\n    }\n\n    /**\n     * Handle file discovered event\n     */\n    onFileDiscovered(data) {\n        // Update activity ticker\n        const fileName = data.name || (data.path ? data.path.split('/').pop() : 'file');\n        this.updateActivityTicker(`📄 Found: ${fileName}`);\n        \n        // Add to events display\n        this.addEventToDisplay(`📄 Discovered: ${data.path || 'Unknown file'}`, 'info');\n        \n        const pathParts = data.path ? data.path.split('/').filter(p => p) : [];\n        const parentPath = pathParts.slice(0, -1).join('/');\n        \n        const fileNode = {\n            name: data.name || pathParts[pathParts.length - 1] || 'Unknown',\n            path: data.path,\n            type: 'file',\n            language: data.language || this.detectLanguage(data.path),\n            size: data.size || 0,\n            lines: data.lines || 0,\n            children: [],\n            analyzed: false\n        };\n        \n        this.addNodeToTree(fileNode, parentPath);\n        this.stats.files++;\n        this.updateStats();\n        this.updateBreadcrumb(`Found: ${data.path}`, 'info');\n    }\n\n    /**\n     * Handle file analyzed event\n     */\n    onFileAnalyzed(data) {\n        // Remove loading pulse if this file was being analyzed\n        const d3Node = this.findD3NodeByPath(data.path);\n        if (d3Node && this.loadingNodes.has(data.path)) {\n            this.removeLoadingPulse(d3Node);\n        }\n        // Update activity ticker\n        if (data.path) {\n            const fileName = data.path.split('/').pop();\n            this.updateActivityTicker(`🔍 Analyzed: ${fileName}`);\n        }\n        \n        const fileNode = this.findNodeByPath(data.path);\n        if (fileNode) {\n            fileNode.analyzed = true;\n            fileNode.complexity = data.complexity || 0;\n            fileNode.lines = data.lines || 0;\n            \n            // Add code elements as children\n            if (data.elements && Array.isArray(data.elements)) {\n                fileNode.children = data.elements.map(elem => ({\n                    name: elem.name,\n                    type: elem.type.toLowerCase(),\n                    path: `${data.path}#${elem.name}`,\n                    line: elem.line,\n                    complexity: elem.complexity || 1,\n                    docstring: elem.docstring || '',\n                    children: elem.methods ? elem.methods.map(m => ({\n                        name: m.name,\n                        type: 'method',\n                        path: `${data.path}#${elem.name}.${m.name}`,\n                        line: m.line,\n                        complexity: m.complexity || 1,\n                        docstring: m.docstring || ''\n                    })) : []\n                }));\n            }\n            \n            // Update stats\n            if (data.stats) {\n                this.stats.classes += data.stats.classes || 0;\n                this.stats.functions += data.stats.functions || 0;\n                this.stats.methods += data.stats.methods || 0;\n                this.stats.lines += data.stats.lines || 0;\n            }\n            \n            this.updateStats();\n            if (this.root) {\n                this.update(this.root);\n            }\n            \n            this.updateBreadcrumb(`Analyzed: ${data.path}`, 'success');\n        }\n    }\n\n    /**\n     * Handle node found event\n     */\n    onNodeFound(data) {\n        // Add to events display with appropriate icon\n        const typeIcon = data.type === 'class' ? '🏛️' : \n                        data.type === 'function' ? '⚡' : \n                        data.type === 'method' ? '🔧' : '📦';\n        this.addEventToDisplay(`${typeIcon} Found ${data.type || 'node'}: ${data.name || 'Unknown'}`);\n        \n        // Extract node info\n        const nodeInfo = {\n            name: data.name || 'Unknown',\n            type: (data.type || 'unknown').toLowerCase(),\n            path: data.path || '',\n            line: data.line || 0,\n            complexity: data.complexity || 1,\n            docstring: data.docstring || ''\n        };\n\n        // Map event types to our internal types\n        const typeMapping = {\n            'class': 'class',\n            'function': 'function',\n            'method': 'method',\n            'module': 'module',\n            'file': 'file',\n            'directory': 'directory'\n        };\n\n        nodeInfo.type = typeMapping[nodeInfo.type] || nodeInfo.type;\n\n        // Determine parent path\n        let parentPath = '';\n        if (data.parent_path) {\n            parentPath = data.parent_path;\n        } else if (data.file_path) {\n            parentPath = data.file_path;\n        } else if (nodeInfo.path.includes('/')) {\n            const parts = nodeInfo.path.split('/');\n            parts.pop();\n            parentPath = parts.join('/');\n        }\n\n        // Update stats based on node type\n        switch(nodeInfo.type) {\n            case 'class':\n                this.stats.classes++;\n                break;\n            case 'function':\n                this.stats.functions++;\n                break;\n            case 'method':\n                this.stats.methods++;\n                break;\n            case 'file':\n                this.stats.files++;\n                break;\n        }\n\n        // Add node to tree\n        this.addNodeToTree(nodeInfo, parentPath);\n        this.updateStats();\n\n        // Show progress in breadcrumb\n        const elementType = nodeInfo.type.charAt(0).toUpperCase() + nodeInfo.type.slice(1);\n        this.updateBreadcrumb(`Found ${elementType}: ${nodeInfo.name}`, 'info');\n    }\n\n    /**\n     * Handle progress update\n     */\n    onProgressUpdate(data) {\n        const progress = data.progress || 0;\n        const message = data.message || `Processing... ${progress}%`;\n        \n        this.updateBreadcrumb(message, 'info');\n        \n        // Update progress bar if it exists\n        const progressBar = document.querySelector('.code-tree-progress');\n        if (progressBar) {\n            progressBar.style.width = `${progress}%`;\n        }\n    }\n\n    /**\n     * Handle analysis complete event\n     */\n    onAnalysisComplete(data) {\n        this.analyzing = false;\n        this.hideLoading();\n        \n        // Update activity ticker\n        this.updateActivityTicker('✅ Ready', 'success');\n        \n        // Add completion event\n        this.addEventToDisplay('✅ Analysis complete!', 'success');\n\n        // Update tree visualization\n        if (this.root && this.svg) {\n            this.update(this.root);\n        }\n\n        // Update stats from completion data\n        if (data.stats) {\n            this.stats = { ...this.stats, ...data.stats };\n            this.updateStats();\n        }\n\n        const message = data.message || `Analysis complete: ${this.stats.files} files, ${this.stats.classes} classes, ${this.stats.functions} functions`;\n        this.updateBreadcrumb(message, 'success');\n        this.showNotification(message, 'success');\n    }\n\n    /**\n     * Handle analysis error\n     */\n    onAnalysisError(data) {\n        this.analyzing = false;\n        this.hideLoading();\n\n        const message = data.message || data.error || 'Analysis failed';\n        this.updateBreadcrumb(message, 'error');\n        this.showNotification(message, 'error');\n    }\n\n    /**\n     * Handle analysis accepted\n     */\n    onAnalysisAccepted(data) {\n        const message = data.message || 'Analysis request accepted';\n        this.updateBreadcrumb(message, 'info');\n    }\n\n    /**\n     * Handle analysis queued\n     */\n    onAnalysisQueued(data) {\n        const position = data.position || 0;\n        const message = `Analysis queued (position ${position})`;\n        this.updateBreadcrumb(message, 'warning');\n        this.showNotification(message, 'info');\n    }\n    \n    /**\n     * Handle INFO events for granular work tracking\n     */\n    onInfoEvent(data) {\n        // Log to console for debugging\n        \n        // Update breadcrumb for certain events\n        if (data.type && data.type.startsWith('discovery.')) {\n            // Discovery events\n            if (data.type === 'discovery.start') {\n                this.updateBreadcrumb(data.message, 'info');\n            } else if (data.type === 'discovery.complete') {\n                this.updateBreadcrumb(data.message, 'success');\n                // Show stats if available\n                if (data.stats) {\n                }\n            } else if (data.type === 'discovery.directory' || data.type === 'discovery.file') {\n                // Quick flash of discovery events\n                this.updateBreadcrumb(data.message, 'info');\n            }\n        } else if (data.type && data.type.startsWith('analysis.')) {\n            // Analysis events\n            if (data.type === 'analysis.start') {\n                this.updateBreadcrumb(data.message, 'info');\n            } else if (data.type === 'analysis.complete') {\n                this.updateBreadcrumb(data.message, 'success');\n                // Show stats if available\n                if (data.stats) {\n                    const statsMsg = `Found: ${data.stats.classes || 0} classes, ${data.stats.functions || 0} functions, ${data.stats.methods || 0} methods`;\n                }\n            } else if (data.type === 'analysis.class' || data.type === 'analysis.function' || data.type === 'analysis.method') {\n                // Show found elements briefly\n                this.updateBreadcrumb(data.message, 'info');\n            } else if (data.type === 'analysis.parse') {\n                this.updateBreadcrumb(data.message, 'info');\n            }\n        } else if (data.type && data.type.startsWith('filter.')) {\n            // Filter events - optionally show in debug mode\n            if (window.debugMode || this.showFilterEvents) {\n                console.debug('[FILTER]', data.type, data.path, data.reason);\n                if (this.showFilterEvents) {\n                    this.updateBreadcrumb(data.message, 'warning');\n                }\n            }\n        } else if (data.type && data.type.startsWith('cache.')) {\n            // Cache events\n            if (data.type === 'cache.hit') {\n                console.debug('[CACHE HIT]', data.file);\n                if (this.showCacheEvents) {\n                    this.updateBreadcrumb(data.message, 'info');\n                }\n            } else if (data.type === 'cache.miss') {\n                console.debug('[CACHE MISS]', data.file);\n            }\n        }\n        \n        // Optionally add to an event log display if enabled\n        if (this.eventLogEnabled && data.message) {\n            this.addEventToDisplay(data);\n        }\n    }\n    \n    /**\n     * Add event to display log (if we have one)\n     */\n    addEventToDisplay(data) {\n        // Could be implemented to show events in a dedicated log area\n        // For now, just maintain a recent events list\n        if (!this.recentEvents) {\n            this.recentEvents = [];\n        }\n        \n        this.recentEvents.unshift({\n            timestamp: data.timestamp || new Date().toISOString(),\n            type: data.type,\n            message: data.message,\n            data: data\n        });\n        \n        // Keep only last 100 events\n        if (this.recentEvents.length > 100) {\n            this.recentEvents.pop();\n        }\n        \n        // Could update a UI element here if we had an event log display\n    }\n\n    /**\n     * Handle analysis cancelled\n     */\n    onAnalysisCancelled(data) {\n        this.analyzing = false;\n        this.hideLoading();\n        const message = data.message || 'Analysis cancelled';\n        this.updateBreadcrumb(message, 'warning');\n    }\n\n    /**\n     * Show notification toast\n     */\n    showNotification(message, type = 'info') {\n        const notification = document.createElement('div');\n        notification.className = `code-tree-notification ${type}`;\n        notification.textContent = message;\n        \n        // Change from appending to container to positioning absolutely within it\n        const container = document.getElementById('code-tree-container');\n        if (container) {\n            // Position relative to the container\n            notification.style.position = 'absolute';\n            notification.style.top = '10px';\n            notification.style.right = '10px';\n            notification.style.zIndex = '1000';\n            \n            // Ensure container is positioned\n            if (!container.style.position || container.style.position === 'static') {\n                container.style.position = 'relative';\n            }\n            \n            container.appendChild(notification);\n            \n            // Animate out after 3 seconds\n            setTimeout(() => {\n                notification.style.animation = 'slideOutRight 0.3s ease';\n                setTimeout(() => notification.remove(), 300);\n            }, 3000);\n        }\n    }\n\n    /**\n     * Add node to tree structure\n     */\n    addNodeToTree(nodeInfo, parentPath = '') {\n        // CRITICAL: Validate that nodeInfo.path doesn't contain absolute paths\n        // The backend should only send relative paths now\n        if (nodeInfo.path && nodeInfo.path.startsWith('/')) {\n            console.error('Absolute path detected in node, skipping:', nodeInfo.path);\n            return;\n        }\n        \n        // Also validate parent path\n        if (parentPath && parentPath.startsWith('/')) {\n            console.error('Absolute path detected in parent, skipping:', parentPath);\n            return;\n        }\n        \n        // Find parent node\n        let parentNode = this.treeData;\n        \n        if (parentPath) {\n            parentNode = this.findNodeByPath(parentPath);\n            if (!parentNode) {\n                // CRITICAL: Do NOT create parent structure if it doesn't exist\n                // This prevents creating nodes above the working directory\n                console.warn('Parent node not found, skipping node creation:', parentPath);\n                console.warn('Attempted to add node:', nodeInfo);\n                return;\n            }\n        }\n\n        // Check if node already exists\n        const existingNode = parentNode.children?.find(c => \n            c.path === nodeInfo.path || \n            (c.name === nodeInfo.name && c.type === nodeInfo.type)\n        );\n\n        if (existingNode) {\n            // Update existing node\n            Object.assign(existingNode, nodeInfo);\n            return;\n        }\n\n        // Add new node\n        if (!parentNode.children) {\n            parentNode.children = [];\n        }\n        \n        // Ensure the node has a children array\n        if (!nodeInfo.children) {\n            nodeInfo.children = [];\n        }\n        \n        parentNode.children.push(nodeInfo);\n\n        // Store node reference for quick access\n        this.nodes.set(nodeInfo.path, nodeInfo);\n\n        // Update tree if initialized\n        if (this.root && this.svg) {\n            // Recreate hierarchy with new data\n            this.root = d3.hierarchy(this.treeData);\n            this.root.x0 = this.height / 2;\n            this.root.y0 = 0;\n            \n            // Update only if we have a reasonable number of nodes to avoid performance issues\n            if (this.nodes.size < 1000) {\n                this.update(this.root);\n            } else if (this.nodes.size % 100 === 0) {\n                // Update every 100 nodes for large trees\n                this.update(this.root);\n            }\n        }\n    }\n\n    /**\n     * Find node by path in tree\n     */\n    findNodeByPath(path, node = null) {\n        if (!node) {\n            node = this.treeData;\n            // Searching for node by path\n            // Root node identified\n        }\n\n        if (node.path === path) {\n            return node;\n        }\n\n        if (node.children) {\n            for (const child of node.children) {\n                const found = this.findNodeByPath(path, child);\n                if (found) {\n                    return found;\n                }\n            }\n        }\n\n        if (!node.parent) {\n            // Node path not found in current tree structure\n        }\n        return null;\n    }\n    \n    /**\n     * Helper to log all paths in tree for debugging\n     */\n    logAllPaths(node, indent = '') {\n        console.log(`${indent}${node.path} (${node.name})`);\n        if (node.children) {\n            for (const child of node.children) {\n                this.logAllPaths(child, indent + '  ');\n            }\n        }\n    }\n    \n    /**\n     * Find D3 hierarchy node by path\n     */\n    findD3NodeByPath(path) {\n        if (!this.root) return null;\n        return this.root.descendants().find(d => d.data.path === path);\n    }\n    \n    /**\n     * Preserve expansion state when recreating hierarchy\n     */\n    preserveExpansionState(oldRoot, newRoot) {\n        if (!oldRoot || !newRoot) return;\n        \n        // Create a map of expanded nodes from the old tree\n        const expansionMap = new Map();\n        oldRoot.descendants().forEach(node => {\n            if (node.data.expanded || (node.children && !node._children)) {\n                expansionMap.set(node.data.path, true);\n            }\n        });\n        \n        // Apply expansion state to new tree\n        newRoot.descendants().forEach(node => {\n            if (expansionMap.has(node.data.path)) {\n                node.children = node._children || node.children;\n                node._children = null;\n                node.data.expanded = true;\n            }\n        });\n    }\n\n    /**\n     * Update statistics display\n     */\n    updateStats() {\n        // Update stats display - use correct IDs from HTML\n        const statsElements = {\n            'file-count': this.stats.files,\n            'class-count': this.stats.classes,\n            'function-count': this.stats.functions,\n            'line-count': this.stats.lines\n        };\n\n        for (const [id, value] of Object.entries(statsElements)) {\n            const elem = document.getElementById(id);\n            if (elem) {\n                elem.textContent = value.toLocaleString();\n            }\n        }\n\n        // Update progress text\n        const progressText = document.getElementById('code-progress-text');\n        if (progressText) {\n            const statusText = this.analyzing ? \n                `Analyzing... ${this.stats.files} files processed` : \n                `Ready - ${this.stats.files} files in tree`;\n            progressText.textContent = statusText;\n        }\n    }\n\n    /**\n     * Update breadcrumb trail\n     */\n    updateBreadcrumb(message, type = 'info') {\n        const breadcrumbContent = document.getElementById('breadcrumb-content');\n        if (breadcrumbContent) {\n            breadcrumbContent.textContent = message;\n            breadcrumbContent.className = `breadcrumb-${type}`;\n        }\n    }\n\n    /**\n     * Detect language from file extension\n     */\n    detectLanguage(filePath) {\n        const ext = filePath.split('.').pop().toLowerCase();\n        const languageMap = {\n            'py': 'python',\n            'js': 'javascript',\n            'ts': 'typescript',\n            'jsx': 'javascript',\n            'tsx': 'typescript',\n            'java': 'java',\n            'cpp': 'cpp',\n            'c': 'c',\n            'cs': 'csharp',\n            'rb': 'ruby',\n            'go': 'go',\n            'rs': 'rust',\n            'php': 'php',\n            'swift': 'swift',\n            'kt': 'kotlin',\n            'scala': 'scala',\n            'r': 'r',\n            'sh': 'bash',\n            'ps1': 'powershell'\n        };\n        return languageMap[ext] || 'unknown';\n    }\n\n    /**\n     * Add visualization controls for layout toggle\n     */\n    addVisualizationControls() {\n        const controls = this.svg.append('g')\n            .attr('class', 'viz-controls')\n            .attr('transform', 'translate(10, 10)');\n            \n        // Add layout toggle button\n        const toggleButton = controls.append('g')\n            .attr('class', 'layout-toggle')\n            .style('cursor', 'pointer')\n            .on('click', () => this.toggleLayout());\n            \n        toggleButton.append('rect')\n            .attr('width', 120)\n            .attr('height', 30)\n            .attr('rx', 5)\n            .attr('fill', '#3b82f6')\n            .attr('opacity', 0.8);\n            \n        toggleButton.append('text')\n            .attr('x', 60)\n            .attr('y', 20)\n            .attr('text-anchor', 'middle')\n            .attr('fill', 'white')\n            .style('font-size', '12px')\n            .text(this.isRadialLayout ? 'Switch to Linear' : 'Switch to Radial');\n    }\n    \n    /**\n     * Toggle between radial and linear layouts\n     */\n    toggleLayout() {\n        this.isRadialLayout = !this.isRadialLayout;\n        this.createVisualization();\n        if (this.root) {\n            this.update(this.root);\n        }\n        this.showNotification(\n            this.isRadialLayout ? 'Switched to radial layout' : 'Switched to linear layout',\n            'info'\n        );\n    }\n\n    /**\n     * Convert radial coordinates to Cartesian\n     */\n    radialPoint(x, y) {\n        return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];\n    }\n\n    /**\n     * Update D3 tree visualization\n     */\n    update(source) {\n        if (!this.treeLayout || !this.treeGroup || !source) {\n            return;\n        }\n\n        // Compute the new tree layout\n        const treeData = this.treeLayout(this.root);\n        const nodes = treeData.descendants();\n        const links = treeData.descendants().slice(1);\n\n        if (this.isRadialLayout) {\n            // Radial layout adjustments\n            nodes.forEach(d => {\n                // Store original x,y for transitions\n                if (d.x0 === undefined) {\n                    d.x0 = d.x;\n                    d.y0 = d.y;\n                }\n            });\n        } else {\n            // Linear layout with nodeSize doesn't need manual normalization\n            // The tree layout handles spacing automatically\n        }\n\n        // Update nodes\n        const node = this.treeGroup.selectAll('g.node')\n            .data(nodes, d => d.id || (d.id = ++this.nodeId));\n\n        // Enter new nodes\n        const nodeEnter = node.enter().append('g')\n            .attr('class', 'node')\n            .attr('transform', d => {\n                if (this.isRadialLayout) {\n                    const [x, y] = this.radialPoint(source.x0 || 0, source.y0 || 0);\n                    return `translate(${x},${y})`;\n                } else {\n                    return `translate(${source.y0},${source.x0})`;\n                }\n            })\n            .on('click', (event, d) => this.onNodeClick(event, d));\n\n        // Add circles for nodes\n        nodeEnter.append('circle')\n            .attr('class', 'node-circle')\n            .attr('r', 1e-6)\n            .style('fill', d => this.getNodeColor(d))\n            .style('stroke', d => this.getNodeStrokeColor(d))\n            .style('stroke-width', 2)\n            .on('mouseover', (event, d) => this.showTooltip(event, d))\n            .on('mouseout', () => this.hideTooltip());\n\n        // Add labels for nodes with smart positioning\n        nodeEnter.append('text')\n            .attr('class', 'node-label')\n            .attr('dy', '.35em')\n            .attr('x', d => {\n                if (this.isRadialLayout) {\n                    // For radial layout, initial position\n                    return 0;\n                } else {\n                    // Linear layout: standard positioning\n                    return d.children || d._children ? -13 : 13;\n                }\n            })\n            .attr('text-anchor', d => {\n                if (this.isRadialLayout) {\n                    return 'start';  // Will be adjusted in update\n                } else {\n                    // Linear layout: standard anchoring\n                    return d.children || d._children ? 'end' : 'start';\n                }\n            })\n            .text(d => {\n                // Truncate long names\n                const maxLength = 20;\n                const name = d.data.name || '';\n                return name.length > maxLength ? \n                       name.substring(0, maxLength - 3) + '...' : name;\n            })\n            .style('fill-opacity', 1e-6)\n            .style('font-size', '12px')\n            .style('font-family', '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif')\n            .style('text-shadow', '1px 1px 2px rgba(255,255,255,0.8), -1px -1px 2px rgba(255,255,255,0.8)');\n\n        // Add icons for node types\n        nodeEnter.append('text')\n            .attr('class', 'node-icon')\n            .attr('dy', '.35em')\n            .attr('x', 0)\n            .attr('text-anchor', 'middle')\n            .text(d => this.getNodeIcon(d))\n            .style('font-size', '10px')\n            .style('fill', 'white');\n\n        // Transition to new positions\n        const nodeUpdate = nodeEnter.merge(node);\n\n        nodeUpdate.transition()\n            .duration(this.duration)\n            .attr('transform', d => {\n                if (this.isRadialLayout) {\n                    const [x, y] = this.radialPoint(d.x, d.y);\n                    return `translate(${x},${y})`;\n                } else {\n                    return `translate(${d.y},${d.x})`;\n                }\n            });\n\n        nodeUpdate.select('circle.node-circle')\n            .attr('r', 8)\n            .style('fill', d => this.getNodeColor(d))\n            .style('stroke', d => this.getNodeStrokeColor(d))\n            .attr('cursor', 'pointer');\n\n        // Update text labels with proper rotation for radial layout\n        const isRadial = this.isRadialLayout;  // Capture the layout type\n        nodeUpdate.select('text.node-label')\n            .style('fill-opacity', 1)\n            .style('fill', '#333')\n            .each(function(d) {\n                const selection = d3.select(this);\n                \n                if (isRadial) {\n                    // For radial layout, apply rotation and positioning\n                    const angle = (d.x * 180 / Math.PI) - 90;  // Convert to degrees\n                    \n                    // Determine if text should be flipped (left side of circle)\n                    const shouldFlip = angle > 90 || angle < -90;\n                    \n                    // Calculate text position and rotation\n                    if (shouldFlip) {\n                        // Text on left side - rotate 180 degrees to read properly\n                        selection\n                            .attr('transform', `rotate(${angle + 180})`)\n                            .attr('x', -15)  // Negative offset for flipped text\n                            .attr('text-anchor', 'end')\n                            .attr('dy', '.35em');\n                    } else {\n                        // Text on right side - normal orientation\n                        selection\n                            .attr('transform', `rotate(${angle})`)\n                            .attr('x', 15)  // Positive offset for normal text\n                            .attr('text-anchor', 'start')\n                            .attr('dy', '.35em');\n                    }\n                } else {\n                    // Linear layout - no rotation needed\n                    selection\n                        .attr('transform', null)\n                        .attr('x', d.children || d._children ? -13 : 13)\n                        .attr('text-anchor', d.children || d._children ? 'end' : 'start')\n                        .attr('dy', '.35em');\n                }\n            });\n\n        // Remove exiting nodes\n        const nodeExit = node.exit().transition()\n            .duration(this.duration)\n            .attr('transform', d => {\n                if (this.isRadialLayout) {\n                    const [x, y] = this.radialPoint(source.x, source.y);\n                    return `translate(${x},${y})`;\n                } else {\n                    return `translate(${source.y},${source.x})`;\n                }\n            })\n            .remove();\n\n        nodeExit.select('circle')\n            .attr('r', 1e-6);\n\n        nodeExit.select('text.node-label')\n            .style('fill-opacity', 1e-6);\n        \n        nodeExit.select('text.node-icon')\n            .style('fill-opacity', 1e-6);\n\n        // Update links\n        const link = this.treeGroup.selectAll('path.link')\n            .data(links, d => d.id);\n\n        // Enter new links\n        const linkEnter = link.enter().insert('path', 'g')\n            .attr('class', 'link')\n            .attr('d', d => {\n                const o = {x: source.x0, y: source.y0};\n                return this.isRadialLayout ? \n                    this.radialDiagonal(o, o) : \n                    this.diagonal(o, o);\n            })\n            .style('fill', 'none')\n            .style('stroke', '#ccc')\n            .style('stroke-width', 2);\n\n        // Transition to new positions\n        const linkUpdate = linkEnter.merge(link);\n\n        linkUpdate.transition()\n            .duration(this.duration)\n            .attr('d', d => this.isRadialLayout ? \n                this.radialDiagonal(d, d.parent) : \n                this.diagonal(d, d.parent));\n\n        // Remove exiting links\n        link.exit().transition()\n            .duration(this.duration)\n            .attr('d', d => {\n                const o = {x: source.x, y: source.y};\n                return this.isRadialLayout ? \n                    this.radialDiagonal(o, o) : \n                    this.diagonal(o, o);\n            })\n            .remove();\n\n        // Store old positions for transition\n        nodes.forEach(d => {\n            d.x0 = d.x;\n            d.y0 = d.y;\n        });\n    }\n\n    /**\n     * Center the view on a specific node (Linear layout)\n     */\n    centerOnNode(d) {\n        if (!this.svg || !this.zoom) return;\n        \n        // Get current transform or use default zoom level\n        const currentTransform = d3.zoomTransform(this.svg.node());\n        // Zoom in to 2x for better focus on clicked node\n        const targetScale = currentTransform.k < 2 ? 2 : currentTransform.k;\n        \n        // Account for the initial tree group offset\n        const initialOffsetX = this.margin.left + 100;\n        const initialOffsetY = this.height / 2;\n        \n        // Calculate position to center the node accounting for the tree group's transform\n        const x = initialOffsetX - d.y * targetScale + this.width / 2;\n        const y = initialOffsetY - d.x * targetScale + this.height / 2;\n        \n        this.svg.transition()\n            .duration(750)\n            .call(\n                this.zoom.transform,\n                d3.zoomIdentity\n                    .translate(x, y)\n                    .scale(targetScale)\n            );\n    }\n    \n    /**\n     * Center the view on a specific node (Radial layout)\n     */\n    centerOnNodeRadial(d) {\n        if (!this.svg || !this.zoom) return;\n        \n        // Use the same radialPoint function for consistency\n        const [x, y] = this.radialPoint(d.x, d.y);\n        \n        // Get current transform or use default zoom level\n        const currentTransform = d3.zoomTransform(this.svg.node());\n        // Zoom in to 2x for better focus on clicked node\n        const targetScale = currentTransform.k < 2 ? 2 : currentTransform.k;\n        \n        // Account for the initial tree group centering\n        const centerX = this.width / 2;\n        const centerY = this.height / 2;\n        \n        // Calculate translation to center the node\n        // The tree group is centered at centerX, centerY\n        // We need to offset by the node's position scaled\n        const targetX = centerX - x * targetScale;\n        const targetY = centerY - y * targetScale;\n        \n        // Apply smooth transition to center the node with zoom\n        this.svg.transition()\n            .duration(750)\n            .call(\n                this.zoom.transform,\n                d3.zoomIdentity\n                    .translate(targetX, targetY)\n                    .scale(targetScale)\n            );\n    }\n    \n    /**\n     * Highlight the active node with larger icon\n     */\n    highlightActiveNode(d) {\n        // Reset all nodes to normal size and clear parent context\n        // First clear classes on the selection\n        const allCircles = this.treeGroup.selectAll('circle.node-circle');\n        allCircles\n            .classed('active', false)\n            .classed('parent-context', false);\n        \n        // Then apply transition separately\n        allCircles\n            .transition()\n            .duration(300)\n            .attr('r', 8)\n            .style('stroke', null)\n            .style('stroke-width', null)\n            .style('opacity', null);\n        \n        // Reset all labels to normal\n        this.treeGroup.selectAll('text.node-label')\n            .style('font-weight', 'normal')\n            .style('font-size', '12px');\n        \n        // Find and increase size of clicked node - use data matching\n        // Make the size increase MUCH more dramatic: 8 -> 20 (2.5x the size)\n        const activeNodeCircle = this.treeGroup.selectAll('g.node')\n            .filter(node => node === d)\n            .select('circle.node-circle');\n        \n        // First set the class (not part of transition)\n        activeNodeCircle.classed('active', true);\n        \n        // Then apply the transition with styles - MUCH LARGER\n        activeNodeCircle\n            .transition()\n            .duration(300)\n            .attr('r', 20)  // Much larger radius (2.5x)\n            .style('stroke', '#3b82f6')\n            .style('stroke-width', 5)  // Thicker border\n            .style('filter', 'drop-shadow(0 0 15px rgba(59, 130, 246, 0.6))');  // Stronger glow effect\n        \n        // Also make the label bold\n        this.treeGroup.selectAll('g.node')\n            .filter(node => node === d)\n            .select('text.node-label')\n            .style('font-weight', 'bold')\n            .style('font-size', '14px');  // Slightly larger text\n        \n        // Store active node\n        this.activeNode = d;\n    }\n    \n    /**\n     * Add pulsing animation for loading state\n     */\n    addLoadingPulse(d) {\n        // Use consistent selection pattern\n        const node = this.treeGroup.selectAll('g.node')\n            .filter(node => node === d)\n            .select('circle.node-circle');\n        \n        // Add to loading set\n        this.loadingNodes.add(d.data.path);\n        \n        // Add pulsing class and orange color - separate operations\n        node.classed('loading-pulse', true);\n        node.style('fill', '#fb923c');  // Orange color for loading\n        \n        // Create pulse animation\n        const pulseAnimation = () => {\n            if (!this.loadingNodes.has(d.data.path)) return;\n            \n            node.transition()\n                .duration(600)\n                .attr('r', 14)\n                .style('opacity', 0.6)\n                .transition()\n                .duration(600)\n                .attr('r', 10)\n                .style('opacity', 1)\n                .on('end', () => {\n                    if (this.loadingNodes.has(d.data.path)) {\n                        pulseAnimation(); // Continue pulsing\n                    }\n                });\n        };\n        \n        pulseAnimation();\n    }\n    \n    /**\n     * Remove pulsing animation when loading complete\n     */\n    removeLoadingPulse(d) {\n        // Remove from loading set\n        this.loadingNodes.delete(d.data.path);\n        \n        // Use consistent selection pattern\n        const node = this.treeGroup.selectAll('g.node')\n            .filter(node => node === d)\n            .select('circle.node-circle');\n        \n        // Clear class first\n        node.classed('loading-pulse', false);\n        \n        // Then interrupt and transition\n        node.interrupt() // Stop animation\n            .transition()\n            .duration(300)\n            .attr('r', this.activeNode === d ? 20 : 8)  // Use 20 for active node\n            .style('opacity', 1)\n            .style('fill', d => this.getNodeColor(d));  // Restore original color\n    }\n    \n    /**\n     * Show parent node alongside for context\n     */\n    showWithParent(d) {\n        if (!d.parent) return;\n        \n        // Make parent more visible\n        const parentNode = this.treeGroup.selectAll('g.node')\n            .filter(node => node === d.parent);\n        \n        // Highlight parent with different style - separate class from styles\n        const parentCircle = parentNode.select('circle.node-circle');\n        parentCircle.classed('parent-context', true);\n        parentCircle\n            .style('stroke', '#10b981')\n            .style('stroke-width', 3)\n            .style('opacity', 0.8);\n        \n        // For radial, adjust zoom to show both parent and clicked node\n        if (this.isRadialLayout && d.parent) {\n            // Calculate bounding box including parent and immediate children\n            const nodes = [d, d.parent];\n            if (d.children) nodes.push(...d.children);\n            else if (d._children) nodes.push(...d._children);\n            \n            const angles = nodes.map(n => n.x);\n            const radii = nodes.map(n => n.y);\n            \n            const minAngle = Math.min(...angles);\n            const maxAngle = Math.max(...angles);\n            const maxRadius = Math.max(...radii);\n            \n            // Zoom to fit parent and children\n            const angleSpan = maxAngle - minAngle;\n            const scale = Math.min(\n                angleSpan > 0 ? (Math.PI * 2) / (angleSpan * 2) : 2.5,  // Fit angle span\n                this.width / (2 * maxRadius),      // Fit radius\n                2.5  // Max zoom\n            );\n            \n            // Calculate center angle and radius\n            const centerAngle = (minAngle + maxAngle) / 2;\n            const centerRadius = maxRadius / 2;\n            const centerX = centerRadius * Math.cos(centerAngle - Math.PI / 2);\n            const centerY = centerRadius * Math.sin(centerAngle - Math.PI / 2);\n            \n            this.svg.transition()\n                .duration(750)\n                .call(\n                    this.zoom.transform,\n                    d3.zoomIdentity\n                        .translate(this.width / 2 - centerX * scale, this.height / 2 - centerY * scale)\n                        .scale(scale)\n                );\n        }\n    }\n    \n    /**\n     * Handle node click - implement lazy loading with enhanced visual feedback\n     */\n    onNodeClick(event, d) {\n        // Handle node click interaction\n        \n        // Check event parameter\n        if (event) {\n            try {\n                if (typeof event.stopPropagation === 'function') {\n                    event.stopPropagation();\n                } else {\n                }\n            } catch (error) {\n                console.error('[CodeTree] ERROR calling stopPropagation:', error);\n            }\n        } else {\n        }\n        \n        // Check d parameter structure\n        if (!d) {\n            console.error('[CodeTree] ERROR: d is null/undefined, cannot continue');\n            return;\n        }\n        \n        if (!d.data) {\n            console.error('[CodeTree] ERROR: d.data is null/undefined, cannot continue');\n            return;\n        }\n        \n        // Node interaction detected\n        \n        // === PHASE 1: Immediate Visual Effects (Synchronous) ===\n        // These execute immediately before any async operations\n        \n        \n        // Center on clicked node (immediate visual effect)\n        try {\n            if (this.isRadialLayout) {\n                if (typeof this.centerOnNodeRadial === 'function') {\n                    this.centerOnNodeRadial(d);\n                } else {\n                    console.error('[CodeTree] centerOnNodeRadial is not a function!');\n                }\n            } else {\n                if (typeof this.centerOnNode === 'function') {\n                    this.centerOnNode(d);\n                } else {\n                    console.error('[CodeTree] centerOnNode is not a function!');\n                }\n            }\n        } catch (error) {\n            console.error('[CodeTree] ERROR during centering:', error, error.stack);\n        }\n        \n        \n        // Highlight with larger icon (immediate visual effect)\n        try {\n            if (typeof this.highlightActiveNode === 'function') {\n                this.highlightActiveNode(d);\n            } else {\n                console.error('[CodeTree] highlightActiveNode is not a function!');\n            }\n        } catch (error) {\n            console.error('[CodeTree] ERROR during highlightActiveNode:', error, error.stack);\n        }\n        \n        \n        // Show parent context (immediate visual effect)\n        try {\n            if (typeof this.showWithParent === 'function') {\n                this.showWithParent(d);\n            } else {\n                console.error('[CodeTree] showWithParent is not a function!');\n            }\n        } catch (error) {\n            console.error('[CodeTree] ERROR during showWithParent:', error, error.stack);\n        }\n        \n        \n        // Add pulsing animation immediately for directories\n        \n        if (d.data.type === 'directory' && !d.data.loaded) {\n            try {\n                if (typeof this.addLoadingPulse === 'function') {\n                    this.addLoadingPulse(d);\n                } else {\n                    console.error('[CodeTree] addLoadingPulse is not a function!');\n                }\n            } catch (error) {\n                console.error('[CodeTree] ERROR during addLoadingPulse:', error, error.stack);\n            }\n        } else {\n        }\n        \n        \n        // === PHASE 2: Prepare Data (Synchronous) ===\n        \n        \n        // Get selected languages from checkboxes\n        const selectedLanguages = [];\n        const checkboxes = document.querySelectorAll('.language-checkbox:checked');\n        checkboxes.forEach(cb => {\n            selectedLanguages.push(cb.value);\n        });\n        \n        // Get ignore patterns\n        const ignorePatternsElement = document.getElementById('ignore-patterns');\n        const ignorePatterns = ignorePatternsElement?.value || '';\n        \n        \n        // === PHASE 3: Async Operations (Delayed) ===\n        // Add a small delay to ensure visual effects are rendered first\n        \n        // For directories that haven't been loaded yet, request discovery\n        if (d.data.type === 'directory' && !d.data.loaded) {\n            // Mark as loading immediately to prevent duplicate requests\n            d.data.loaded = 'loading';\n            \n            // Ensure path is absolute or relative to working directory\n            const fullPath = this.ensureFullPath(d.data.path);\n            \n            // Sending discovery request for child content\n            \n            // Store reference to the D3 node for later expansion\n            const clickedD3Node = d;\n            \n            // Delay the socket request to ensure visual effects are rendered\n            setTimeout(() => {\n                \n                // Request directory contents via Socket.IO\n                if (this.socket) {\n                    this.socket.emit('code:discover:directory', {\n                        path: fullPath,\n                        depth: 1,  // Only get immediate children\n                        languages: selectedLanguages,\n                        ignore_patterns: ignorePatterns\n                    });\n                    \n                    this.updateBreadcrumb(`Loading ${d.data.name}...`, 'info');\n                    this.showNotification(`Loading directory: ${d.data.name}`, 'info');\n                } else {\n                }\n            }, 100);  // 100ms delay to ensure visual effects render first\n        } \n        // For files that haven't been analyzed, request analysis\n        else if (d.data.type === 'file' && !d.data.analyzed) {\n            // Only analyze files of selected languages\n            const fileLanguage = this.detectLanguage(d.data.path);\n            if (!selectedLanguages.includes(fileLanguage) && fileLanguage !== 'unknown') {\n                this.showNotification(`Skipping ${d.data.name} - ${fileLanguage} not selected`, 'warning');\n                return;\n            }\n            \n            // Add pulsing animation immediately\n            this.addLoadingPulse(d);\n            \n            // Mark as loading immediately\n            d.data.analyzed = 'loading';\n            \n            // Ensure path is absolute or relative to working directory\n            const fullPath = this.ensureFullPath(d.data.path);\n            \n            // Delay the socket request to ensure visual effects are rendered\n            setTimeout(() => {\n                \n                if (this.socket) {\n                    this.socket.emit('code:analyze:file', {\n                        path: fullPath\n                    });\n                    \n                    this.updateBreadcrumb(`Analyzing ${d.data.name}...`, 'info');\n                    this.showNotification(`Analyzing: ${d.data.name}`, 'info');\n                }\n            }, 100);  // 100ms delay to ensure visual effects render first\n        }\n        // Toggle children visibility for already loaded nodes\n        else if (d.data.type === 'directory' && d.data.loaded === true) {\n            // Directory is loaded, toggle expansion\n            if (d.children) {\n                // Collapse - hide children\n                d._children = d.children;\n                d.children = null;\n                d.data.expanded = false;\n            } else if (d._children) {\n                // Expand - show children\n                d.children = d._children;\n                d._children = null;\n                d.data.expanded = true;\n            } else if (d.data.children && d.data.children.length > 0) {\n                // Children exist in data but not in D3 node, recreate hierarchy\n                this.root = d3.hierarchy(this.treeData);\n                const updatedD3Node = this.findD3NodeByPath(d.data.path);\n                if (updatedD3Node) {\n                    updatedD3Node.children = updatedD3Node._children || updatedD3Node.children;\n                    updatedD3Node._children = null;\n                    updatedD3Node.data.expanded = true;\n                }\n            }\n            this.update(this.root);\n        }\n        // Also handle other nodes that might have children\n        else if (d.children || d._children) {\n            if (d.children) {\n                d._children = d.children;\n                d.children = null;\n                d.data.expanded = false;\n            } else {\n                d.children = d._children;\n                d._children = null;\n                d.data.expanded = true;\n            }\n            this.update(d);\n        } else {\n        }\n        \n        // Update selection\n        this.selectedNode = d;\n        try {\n            this.highlightNode(d);\n        } catch (error) {\n            console.error('[CodeTree] ERROR during highlightNode:', error);\n        }\n        \n    }\n    \n    /**\n     * Ensure path is absolute or relative to working directory\n     */\n    ensureFullPath(path) {\n        console.log('🔗 ensureFullPath called with:', path);\n        \n        if (!path) return path;\n        \n        // If already absolute, return as is\n        if (path.startsWith('/')) {\n            console.log('  → Already absolute, returning:', path);\n            return path;\n        }\n        \n        // Get working directory\n        const workingDir = this.getWorkingDirectory();\n        console.log('  → Working directory:', workingDir);\n        \n        if (!workingDir) {\n            console.log('  → No working directory, returning original:', path);\n            return path;\n        }\n        \n        // Special handling for root path\n        if (path === '.') {\n            console.log('  → Root path detected, returning working dir:', workingDir);\n            return workingDir;\n        }\n        \n        // If path equals working directory, return as is\n        if (path === workingDir) {\n            console.log('  → Path equals working directory, returning:', workingDir);\n            return workingDir;\n        }\n        \n        // Combine working directory with relative path\n        const result = `${workingDir}/${path}`.replace(/\\/+/g, '/');\n        console.log('  → Combining with working dir, result:', result);\n        return result;\n    }\n\n    /**\n     * Highlight selected node\n     */\n    highlightNode(node) {\n        // Remove previous highlights\n        this.treeGroup.selectAll('circle.node-circle')\n            .style('stroke-width', 2)\n            .classed('selected', false);\n\n        // Highlight selected node\n        this.treeGroup.selectAll('circle.node-circle')\n            .filter(d => d === node)\n            .style('stroke-width', 4)\n            .classed('selected', true);\n    }\n\n    /**\n     * Create diagonal path for links\n     */\n    diagonal(s, d) {\n        return `M ${s.y} ${s.x}\n                C ${(s.y + d.y) / 2} ${s.x},\n                  ${(s.y + d.y) / 2} ${d.x},\n                  ${d.y} ${d.x}`;\n    }\n    \n    /**\n     * Create radial diagonal path for links\n     */\n    radialDiagonal(s, d) {\n        const path = d3.linkRadial()\n            .angle(d => d.x)\n            .radius(d => d.y);\n        return path({source: s, target: d});\n    }\n\n    /**\n     * Get node color based on type and complexity\n     */\n    getNodeColor(d) {\n        const type = d.data.type;\n        const complexity = d.data.complexity || 1;\n\n        // Base colors by type\n        const baseColors = {\n            'root': '#6B7280',\n            'directory': '#3B82F6',\n            'file': '#10B981',\n            'module': '#8B5CF6',\n            'class': '#F59E0B',\n            'function': '#EF4444',\n            'method': '#EC4899'\n        };\n\n        const baseColor = baseColors[type] || '#6B7280';\n\n        // Adjust brightness based on complexity (higher complexity = darker)\n        if (complexity > 10) {\n            return d3.color(baseColor).darker(0.5);\n        } else if (complexity > 5) {\n            return d3.color(baseColor).darker(0.25);\n        }\n        \n        return baseColor;\n    }\n\n    /**\n     * Get node stroke color\n     */\n    getNodeStrokeColor(d) {\n        if (d.data.loaded === 'loading' || d.data.analyzed === 'loading') {\n            return '#FCD34D';  // Yellow for loading\n        }\n        if (d.data.type === 'directory' && !d.data.loaded) {\n            return '#94A3B8';  // Gray for unloaded\n        }\n        if (d.data.type === 'file' && !d.data.analyzed) {\n            return '#CBD5E1';  // Light gray for unanalyzed\n        }\n        return this.getNodeColor(d);\n    }\n\n    /**\n     * Get icon for node type\n     */\n    getNodeIcon(d) {\n        const icons = {\n            'root': '📦',\n            'directory': '📁',\n            'file': '📄',\n            'module': '📦',\n            'class': 'C',\n            'function': 'ƒ',\n            'method': 'm'\n        };\n        return icons[d.data.type] || '•';\n    }\n\n    /**\n     * Show tooltip on hover\n     */\n    showTooltip(event, d) {\n        if (!this.tooltip) return;\n\n        const info = [];\n        info.push(`<strong>${d.data.name}</strong>`);\n        info.push(`Type: ${d.data.type}`);\n        \n        if (d.data.language) {\n            info.push(`Language: ${d.data.language}`);\n        }\n        if (d.data.complexity) {\n            info.push(`Complexity: ${d.data.complexity}`);\n        }\n        if (d.data.lines) {\n            info.push(`Lines: ${d.data.lines}`);\n        }\n        if (d.data.path) {\n            info.push(`Path: ${d.data.path}`);\n        }\n        \n        // Special messages for lazy-loaded nodes\n        if (d.data.type === 'directory' && !d.data.loaded) {\n            info.push('<em>Click to explore contents</em>');\n        } else if (d.data.type === 'file' && !d.data.analyzed) {\n            info.push('<em>Click to analyze file</em>');\n        }\n\n        this.tooltip.transition()\n            .duration(200)\n            .style('opacity', .9);\n\n        this.tooltip.html(info.join('<br>'))\n            .style('left', (event.pageX + 10) + 'px')\n            .style('top', (event.pageY - 28) + 'px');\n    }\n\n    /**\n     * Hide tooltip\n     */\n    hideTooltip() {\n        if (!this.tooltip) return;\n        \n        this.tooltip.transition()\n            .duration(500)\n            .style('opacity', 0);\n    }\n\n    /**\n     * Filter tree based on language and search\n     */\n    filterTree() {\n        if (!this.root) return;\n\n        // Apply filters\n        this.root.descendants().forEach(d => {\n            d.data._hidden = false;\n\n            // Language filter\n            if (this.languageFilter !== 'all') {\n                if (d.data.type === 'file' && d.data.language !== this.languageFilter) {\n                    d.data._hidden = true;\n                }\n            }\n\n            // Search filter\n            if (this.searchTerm) {\n                if (!d.data.name.toLowerCase().includes(this.searchTerm)) {\n                    d.data._hidden = true;\n                }\n            }\n        });\n\n        // Update display\n        this.update(this.root);\n    }\n\n    /**\n     * Expand all nodes in the tree\n     */\n    expandAll() {\n        if (!this.root) return;\n        \n        // Recursively expand all nodes\n        const expandRecursive = (node) => {\n            if (node._children) {\n                node.children = node._children;\n                node._children = null;\n            }\n            if (node.children) {\n                node.children.forEach(expandRecursive);\n            }\n        };\n        \n        expandRecursive(this.root);\n        this.update(this.root);\n        this.showNotification('All nodes expanded', 'info');\n    }\n\n    /**\n     * Collapse all nodes in the tree\n     */\n    collapseAll() {\n        if (!this.root) return;\n        \n        // Recursively collapse all nodes except root\n        const collapseRecursive = (node) => {\n            if (node.children) {\n                node._children = node.children;\n                node.children = null;\n            }\n            if (node._children) {\n                node._children.forEach(collapseRecursive);\n            }\n        };\n        \n        this.root.children?.forEach(collapseRecursive);\n        this.update(this.root);\n        this.showNotification('All nodes collapsed', 'info');\n    }\n\n    /**\n     * Reset zoom to fit the tree\n     */\n    resetZoom() {\n        if (!this.svg || !this.zoom) return;\n        \n        // Reset to identity transform for radial layout (centered)\n        this.svg.transition()\n            .duration(750)\n            .call(\n                this.zoom.transform,\n                d3.zoomIdentity\n            );\n        \n        this.showNotification('Zoom reset', 'info');\n    }\n\n    /**\n     * Focus on a specific node and its subtree\n     */\n    focusOnNode(node) {\n        if (!this.svg || !this.zoom || !node) return;\n        \n        // Get all descendants of this node\n        const descendants = node.descendants ? node.descendants() : [node];\n        \n        if (this.isRadialLayout) {\n            // For radial layout, calculate the bounding box in polar coordinates\n            const angles = descendants.map(d => d.x);\n            const radii = descendants.map(d => d.y);\n            \n            const minAngle = Math.min(...angles);\n            const maxAngle = Math.max(...angles);\n            const minRadius = Math.min(...radii);\n            const maxRadius = Math.max(...radii);\n            \n            // Convert polar bounds to Cartesian for centering\n            const centerAngle = (minAngle + maxAngle) / 2;\n            const centerRadius = (minRadius + maxRadius) / 2;\n            \n            // Convert to Cartesian coordinates\n            const centerX = centerRadius * Math.cos(centerAngle - Math.PI / 2);\n            const centerY = centerRadius * Math.sin(centerAngle - Math.PI / 2);\n            \n            // Calculate the span for zoom scale\n            const angleSpan = maxAngle - minAngle;\n            const radiusSpan = maxRadius - minRadius;\n            \n            // Calculate scale to fit the subtree\n            // Use angle span to determine scale (radial layout specific)\n            let scale = 1;\n            if (angleSpan > 0 && radiusSpan > 0) {\n                // Scale based on the larger dimension\n                const angleFactor = Math.PI * 2 / angleSpan;  // Full circle / angle span\n                const radiusFactor = this.radius / radiusSpan;\n                scale = Math.min(angleFactor, radiusFactor, 3);  // Max zoom of 3x\n                scale = Math.max(scale, 1);  // Min zoom of 1x\n            }\n            \n            // Animate the zoom and center\n            this.svg.transition()\n                .duration(750)\n                .call(\n                    this.zoom.transform,\n                    d3.zoomIdentity\n                        .translate(this.width/2 - centerX * scale, this.height/2 - centerY * scale)\n                        .scale(scale)\n                );\n                \n        } else {\n            // For linear/tree layout\n            const xValues = descendants.map(d => d.x);\n            const yValues = descendants.map(d => d.y);\n            \n            const minX = Math.min(...xValues);\n            const maxX = Math.max(...xValues);\n            const minY = Math.min(...yValues);\n            const maxY = Math.max(...yValues);\n            \n            // Calculate center\n            const centerX = (minX + maxX) / 2;\n            const centerY = (minY + maxY) / 2;\n            \n            // Calculate bounds\n            const width = maxX - minX;\n            const height = maxY - minY;\n            \n            // Calculate scale to fit\n            const padding = 100;\n            let scale = 1;\n            if (width > 0 && height > 0) {\n                const scaleX = (this.width - padding) / width;\n                const scaleY = (this.height - padding) / height;\n                scale = Math.min(scaleX, scaleY, 2.5);  // Max zoom of 2.5x\n                scale = Math.max(scale, 0.5);  // Min zoom of 0.5x\n            }\n            \n            // Animate zoom to focus\n            this.svg.transition()\n                .duration(750)\n                .call(\n                    this.zoom.transform,\n                    d3.zoomIdentity\n                        .translate(this.width/2 - centerX * scale, this.height/2 - centerY * scale)\n                        .scale(scale)\n                );\n        }\n        \n        // Update breadcrumb with focused path\n        const path = this.getNodePath(node);\n        this.updateBreadcrumb(`Focused: ${path}`, 'info');\n    }\n    \n    /**\n     * Get the full path of a node\n     */\n    getNodePath(node) {\n        const path = [];\n        let current = node;\n        while (current) {\n            if (current.data && current.data.name) {\n                path.unshift(current.data.name);\n            }\n            current = current.parent;\n        }\n        return path.join(' / ');\n    }\n\n    /**\n     * Toggle legend visibility\n     */\n    toggleLegend() {\n        const legend = document.getElementById('tree-legend');\n        if (legend) {\n            if (legend.style.display === 'none') {\n                legend.style.display = 'block';\n            } else {\n                legend.style.display = 'none';\n            }\n        }\n    }\n\n    /**\n     * Get the current working directory\n     */\n    getWorkingDirectory() {\n        // Try to get from dashboard's working directory manager\n        if (window.dashboard && window.dashboard.workingDirectoryManager) {\n            return window.dashboard.workingDirectoryManager.getCurrentWorkingDir();\n        }\n        \n        // Fallback to checking the DOM element\n        const workingDirPath = document.getElementById('working-dir-path');\n        if (workingDirPath) {\n            const pathText = workingDirPath.textContent.trim();\n            if (pathText && pathText !== 'Loading...' && pathText !== 'Not selected') {\n                return pathText;\n            }\n        }\n        \n        return null;\n    }\n    \n    /**\n     * Show a message when no working directory is selected\n     */\n    showNoWorkingDirectoryMessage() {\n        const container = document.getElementById('code-tree-container');\n        if (!container) return;\n        \n        // Remove any existing message\n        this.removeNoWorkingDirectoryMessage();\n        \n        // Hide loading if shown\n        this.hideLoading();\n        \n        // Create message element\n        const messageDiv = document.createElement('div');\n        messageDiv.id = 'no-working-dir-message';\n        messageDiv.className = 'no-working-dir-message';\n        messageDiv.innerHTML = `\n            <div class=\"message-icon\">📁</div>\n            <h3>No Working Directory Selected</h3>\n            <p>Please select a working directory from the top menu to analyze code.</p>\n            <button id=\"select-working-dir-btn\" class=\"btn btn-primary\">\n                Select Working Directory\n            </button>\n        `;\n        messageDiv.style.cssText = `\n            text-align: center;\n            padding: 40px;\n            color: #666;\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        `;\n        \n        // Style the message elements\n        const messageIcon = messageDiv.querySelector('.message-icon');\n        if (messageIcon) {\n            messageIcon.style.cssText = 'font-size: 48px; margin-bottom: 16px; opacity: 0.5;';\n        }\n        \n        const h3 = messageDiv.querySelector('h3');\n        if (h3) {\n            h3.style.cssText = 'margin: 16px 0; color: #333; font-size: 20px;';\n        }\n        \n        const p = messageDiv.querySelector('p');\n        if (p) {\n            p.style.cssText = 'margin: 16px 0; color: #666; font-size: 14px;';\n        }\n        \n        const button = messageDiv.querySelector('button');\n        if (button) {\n            button.style.cssText = `\n                margin-top: 20px;\n                padding: 10px 20px;\n                background: #3b82f6;\n                color: white;\n                border: none;\n                border-radius: 6px;\n                cursor: pointer;\n                font-size: 14px;\n                transition: background 0.2s;\n            `;\n            button.addEventListener('mouseenter', () => {\n                button.style.background = '#2563eb';\n            });\n            button.addEventListener('mouseleave', () => {\n                button.style.background = '#3b82f6';\n            });\n            button.addEventListener('click', () => {\n                // Trigger working directory selection\n                const changeDirBtn = document.getElementById('change-dir-btn');\n                if (changeDirBtn) {\n                    changeDirBtn.click();\n                } else if (window.dashboard && window.dashboard.workingDirectoryManager) {\n                    window.dashboard.workingDirectoryManager.showChangeDirDialog();\n                }\n            });\n        }\n        \n        container.appendChild(messageDiv);\n        \n        // Update breadcrumb\n        this.updateBreadcrumb('Please select a working directory', 'warning');\n    }\n    \n    /**\n     * Remove the no working directory message\n     */\n    removeNoWorkingDirectoryMessage() {\n        const message = document.getElementById('no-working-dir-message');\n        if (message) {\n            message.remove();\n        }\n    }\n    \n    /**\n     * Export tree data\n     */\n    exportTree() {\n        const exportData = {\n            timestamp: new Date().toISOString(),\n            workingDirectory: this.getWorkingDirectory(),\n            stats: this.stats,\n            tree: this.treeData\n        };\n\n        const blob = new Blob([JSON.stringify(exportData, null, 2)], \n                             {type: 'application/json'});\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `code-tree-${Date.now()}.json`;\n        link.click();\n        URL.revokeObjectURL(url);\n\n        this.showNotification('Tree exported successfully', 'success');\n    }\n\n    /**\n     * Update activity ticker with real-time messages\n     */\n    updateActivityTicker(message, type = 'info') {\n        const breadcrumb = document.getElementById('breadcrumb-content');\n        if (breadcrumb) {\n            // Add spinning icon for loading states\n            const icon = type === 'info' && message.includes('...') ? '⟳ ' : '';\n            breadcrumb.innerHTML = `${icon}${message}`;\n            breadcrumb.className = `breadcrumb-${type}`;\n        }\n    }\n    \n    /**\n     * Update ticker message\n     */\n    updateTicker(message, type = 'info') {\n        const ticker = document.getElementById('code-tree-ticker');\n        if (ticker) {\n            ticker.textContent = message;\n            ticker.className = `ticker ticker-${type}`;\n            \n            // Auto-hide after 5 seconds for non-error messages\n            if (type !== 'error') {\n                setTimeout(() => {\n                    ticker.style.opacity = '0';\n                    setTimeout(() => {\n                        ticker.style.opacity = '1';\n                        ticker.textContent = '';\n                    }, 300);\n                }, 5000);\n            }\n        }\n    }\n}\n\n// Export for use in other modules\nwindow.CodeTree = CodeTree;\n\n// Auto-initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Check if we're on a page with code tree container\n    if (document.getElementById('code-tree-container')) {\n        window.codeTree = new CodeTree();\n        \n        // Listen for tab changes to initialize when code tab is selected\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('[data-tab=\"code\"]')) {\n                setTimeout(() => {\n                    if (window.codeTree && !window.codeTree.initialized) {\n                        window.codeTree.initialize();\n                    } else if (window.codeTree) {\n                        window.codeTree.renderWhenVisible();\n                    }\n                }, 100);\n            }\n        });\n    }\n});/* Cache buster: 1756393851 */\n"],"names":["CodeTree","constructor","this","container","svg","treeData","root","treeLayout","treeGroup","nodes","Map","stats","files","classes","functions","methods","lines","isRadialLayout","margin","top","right","bottom","left","width","height","radius","Math","min","nodeId","duration","languageFilter","searchTerm","tooltip","initialized","analyzing","selectedNode","socket","autoDiscovered","zoom","activeNode","loadingNodes","Set","initialize","document","getElementById","console","error","tabPanel","workingDir","getWorkingDirectory","showNoWorkingDirectoryMessage","setupControls","initializeTreeData","subscribeToEvents","updateActivityTicker","classList","contains","createVisualization","update","autoDiscoverRootLevel","renderWhenVisible","removeNoWorkingDirectoryMessage","addEventListener","e","target","value","filterTree","searchBox","toLowerCase","expandBtn","expandAll","collapseBtn","collapseAll","resetZoomBtn","resetZoom","toggleLegendBtn","toggleLegend","onWorkingDirectoryChanged","detail","directory","newDirectory","clear","updateStats","showLoading","loadingDiv","createElement","id","innerHTML","appendChild","remove","hideLoading","add","d3","select","selectAll","node","containerNode","containerWidth","clientWidth","containerHeight","clientHeight","append","attr","centerX","centerY","cluster","size","PI","separation","a","b","parent","depthFactor","max","depth","siblingCount","children","length","siblingFactor","radiusFactor","tree","nodeSize","scaleExtent","on","event","transform","x","y","k","call","addVisualizationControls","style","clearD3Visualization","dirName","split","pop","name","path","type","loaded","expanded","hierarchy","x0","y0","window","setupEventHandlers","dashboard","socketClient","warn","startsWith","match","showNotification","hasListeners","updateBreadcrumb","selectedLanguages","querySelectorAll","forEach","cb","push","ignorePatterns","requestPayload","languages","ignore_patterns","request_id","Date","now","emit","analyzeCode","cancelAnalysis","addEventToDisplay","createEventsDisplay","eventsContainer","treeContainer","className","display","clearEventsDisplay","message","eventEl","borderLeftColor","timestamp","toLocaleTimeString","scrollTop","scrollHeight","data","onAnalysisAccepted","onAnalysisQueued","onAnalysisStart","onAnalysisComplete","onAnalysisCancelled","onAnalysisError","onTopLevelDiscovered","onDirectoryDiscovered","onFileDiscovered","onFileAnalyzed","onNodeFound","onProgressUpdate","searchPath","substring","replace","findNodeByPath","d3Node","findD3NodeByPath","has","removeLoadingPulse","map","child","childPath","childName","analyzed","oldRoot","preserveExpansionState","updatedD3Node","_children","directories","items","Array","isArray","item","language","detectLanguage","rootNode","log","currentChildren","has_code","childrenCount","c","pathParts","filter","p","forceAdd","dirNode","addNodeToTree","logAllPaths","fileName","parentPath","slice","join","fileNode","complexity","elements","elem","line","docstring","m","typeIcon","nodeInfo","class","function","method","module","file","parent_path","file_path","includes","parts","elementType","charAt","toUpperCase","progress","progressBar","querySelector","position","onInfoEvent","debugMode","showFilterEvents","debug","reason","showCacheEvents","eventLogEnabled","recentEvents","unshift","toISOString","notification","textContent","zIndex","setTimeout","animation","parentNode","existingNode","find","Object","assign","set","found","indent","descendants","d","newRoot","expansionMap","statsElements","entries","toLocaleString","progressText","statusText","breadcrumbContent","filePath","py","js","ts","jsx","tsx","java","cpp","cs","rb","go","rs","php","swift","kt","scala","r","sh","ps1","toggleButton","toggleLayout","text","radialPoint","cos","sin","source","links","nodeEnter","enter","onNodeClick","getNodeColor","getNodeStrokeColor","showTooltip","hideTooltip","maxLength","getNodeIcon","nodeUpdate","merge","transition","isRadial","each","selection","angle","nodeExit","exit","link","insert","o","radialDiagonal","diagonal","centerOnNode","currentTransform","zoomTransform","targetScale","initialOffsetX","initialOffsetY","zoomIdentity","translate","scale","centerOnNodeRadial","targetX","targetY","highlightActiveNode","allCircles","classed","activeNodeCircle","addLoadingPulse","pulseAnimation","delete","interrupt","showWithParent","parentCircle","angles","n","radii","minAngle","maxAngle","maxRadius","angleSpan","centerAngle","centerRadius","stopPropagation","stack","ignorePatternsElement","fileLanguage","fullPath","ensureFullPath","highlightNode","result","s","linkRadial","baseColor","color","darker","info","html","pageX","pageY","_hidden","expandRecursive","collapseRecursive","focusOnNode","minRadius","radiusSpan","angleFactor","xValues","yValues","minX","maxX","minY","maxY","padding","scaleX","scaleY","getNodePath","current","legend","workingDirectoryManager","getCurrentWorkingDir","workingDirPath","pathText","trim","messageDiv","cssText","messageIcon","h3","button","background","changeDirBtn","click","showChangeDirDialog","exportTree","exportData","workingDirectory","blob","Blob","JSON","stringify","url","URL","createObjectURL","href","download","revokeObjectURL","breadcrumb","icon","updateTicker","ticker","opacity","codeTree","matches"],"mappings":"AAQA,MAAMA,EACF,WAAAC,GACIC,KAAKC,UAAY,KACjBD,KAAKE,IAAM,KACXF,KAAKG,SAAW,KAChBH,KAAKI,KAAO,KACZJ,KAAKK,WAAa,KAClBL,KAAKM,UAAY,KACjBN,KAAKO,UAAYC,IACjBR,KAAKS,MAAQ,CACTC,MAAO,EACPC,QAAS,EACTC,UAAW,EACXC,QAAS,EACTC,MAAO,GAGXd,KAAKe,gBAAiB,EACtBf,KAAKgB,OAAS,CAACC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrDpB,KAAKqB,MAAQ,IAAMrB,KAAKgB,OAAOI,KAAOpB,KAAKgB,OAAOE,MAClDlB,KAAKsB,OAAS,IAAMtB,KAAKgB,OAAOC,IAAMjB,KAAKgB,OAAOG,OAClDnB,KAAKuB,OAASC,KAAKC,IAAIzB,KAAKqB,MAAOrB,KAAKsB,QAAU,EAClDtB,KAAK0B,OAAS,EACd1B,KAAK2B,SAAW,IAChB3B,KAAK4B,eAAiB,MACtB5B,KAAK6B,WAAa,GAClB7B,KAAK8B,QAAU,KACf9B,KAAK+B,aAAc,EACnB/B,KAAKgC,WAAY,EACjBhC,KAAKiC,aAAe,KACpBjC,KAAKkC,OAAS,KACdlC,KAAKmC,gBAAiB,EACtBnC,KAAKoC,KAAO,KACZpC,KAAKqC,WAAa,KAClBrC,KAAKsC,iBAAmBC,GAC5B,CAKA,UAAAC,GACI,GAAIxC,KAAK+B,YACL,OAIJ,GADA/B,KAAKC,UAAYwC,SAASC,eAAe,wBACpC1C,KAAKC,UAEN,YADA0C,QAAQC,MAAM,iCAKlB,MAAMC,EAAWJ,SAASC,eAAe,YACzC,IAAKG,EAED,YADAF,QAAQC,MAAM,4BAKlB,MAAME,EAAa9C,KAAK+C,sBACxB,IAAKD,GAA6B,eAAfA,GAA8C,iBAAfA,EAG9C,OAFA9C,KAAKgD,qCACLhD,KAAK+B,aAAc,GAKvB/B,KAAKiD,gBACLjD,KAAKkD,qBACLlD,KAAKmD,oBAGqBV,SAASC,eAAe,wBACxB1C,KAAKgC,WAC3BhC,KAAKoD,qBAAqB,+BAAgC,QAI1DP,EAASQ,UAAUC,SAAS,YAC5BtD,KAAKuD,sBACDvD,KAAKI,MAAQJ,KAAKE,KAClBF,KAAKwD,OAAOxD,KAAKI,MAGrBJ,KAAKyD,yBAGTzD,KAAK+B,aAAc,CACvB,CAKA,iBAAA2B,GAEI,MAAMZ,EAAa9C,KAAK+C,sBACnBD,GAA6B,eAAfA,GAA8C,iBAAfA,GAMlD9C,KAAK2D,kCAEA3D,KAAK+B,aAKL/B,KAAKE,IAOFF,KAAKI,MAAQJ,KAAKE,KAClBF,KAAKwD,OAAOxD,KAAKI,OAPrBJ,KAAKuD,sBACDvD,KAAKE,KAAOF,KAAKM,WACjBN,KAAKwD,OAAOxD,KAAKI,OAUpBJ,KAAKmC,gBACNnC,KAAKyD,yBAlBLzD,KAAKwC,cARLxC,KAAKgD,+BA4Bb,CAKA,aAAAC,GAGI,MAAMrB,EAAiBa,SAASC,eAAe,mBAC3Cd,GACAA,EAAegC,iBAAiB,SAAWC,IACvC7D,KAAK4B,eAAiBiC,EAAEC,OAAOC,MAC/B/D,KAAKgE,eAIb,MAAMC,EAAYxB,SAASC,eAAe,eACtCuB,GACAA,EAAUL,iBAAiB,QAAUC,IACjC7D,KAAK6B,WAAagC,EAAEC,OAAOC,MAAMG,cACjClE,KAAKgE,eAIb,MAAMG,EAAY1B,SAASC,eAAe,mBACtCyB,GACAA,EAAUP,iBAAiB,QAAS,IAAM5D,KAAKoE,aAGnD,MAAMC,EAAc5B,SAASC,eAAe,qBACxC2B,GACAA,EAAYT,iBAAiB,QAAS,IAAM5D,KAAKsE,eAGrD,MAAMC,EAAe9B,SAASC,eAAe,mBACzC6B,GACAA,EAAaX,iBAAiB,QAAS,IAAM5D,KAAKwE,aAGtD,MAAMC,EAAkBhC,SAASC,eAAe,sBAC5C+B,GACAA,EAAgBb,iBAAiB,QAAS,IAAM5D,KAAK0E,gBAIzDjC,SAASmB,iBAAiB,0BAA4BC,IAClD7D,KAAK2E,0BAA0Bd,EAAEe,OAAOC,YAEhD,CAKA,yBAAAF,CAA0BG,GACtB,IAAKA,GAAiC,eAAjBA,GAAkD,iBAAjBA,EAelD,OAbA9E,KAAKgD,gCAELhD,KAAKmC,gBAAiB,EACtBnC,KAAKgC,WAAY,EACjBhC,KAAKO,MAAMwE,QACX/E,KAAKS,MAAQ,CACTC,MAAO,EACPC,QAAS,EACTC,UAAW,EACXC,QAAS,EACTC,MAAO,QAEXd,KAAKgF,cAKThF,KAAK2D,kCAGL3D,KAAKmC,gBAAiB,EACtBnC,KAAKgC,WAAY,EAGjBhC,KAAKO,MAAMwE,QACX/E,KAAKS,MAAQ,CACTC,MAAO,EACPC,QAAS,EACTC,UAAW,EACXC,QAAS,EACTC,MAAO,GAIXd,KAAKkD,qBACDlD,KAAKE,KACLF,KAAKwD,OAAOxD,KAAKI,MAIrB,MAAMyC,EAAWJ,SAASC,eAAe,YACrCG,GAAYA,EAASQ,UAAUC,SAAS,WAExCtD,KAAKyD,wBAGTzD,KAAKgF,aACT,CAKA,WAAAC,GACI,IAAIC,EAAazC,SAASC,eAAe,qBACzC,IAAKwC,EAAY,CAEb,MAAMjF,EAAYwC,SAASC,eAAe,uBACtCzC,IACAiF,EAAazC,SAAS0C,cAAc,OACpCD,EAAWE,GAAK,oBAChBF,EAAWG,UAAY,2KAIvBpF,EAAUqF,YAAYJ,GAE9B,CACIA,GACAA,EAAW7B,UAAUkC,OAAO,SAEpC,CAKA,WAAAC,GACI,MAAMN,EAAazC,SAASC,eAAe,qBACvCwC,GACAA,EAAW7B,UAAUoC,IAAI,SAEjC,CAKA,mBAAAlC,GACI,GAAkB,oBAAPmC,GAEP,YADA/C,QAAQC,MAAM,uBAIlB,MAAM3C,EAAYyF,GAAGC,OAAO,wBAG5B,GAFA1F,EAAU2F,UAAU,KAAKL,UAEpBtF,IAAcA,EAAU4F,OAEzB,YADAlD,QAAQC,MAAM,iCAKlB,MAAMkD,EAAgB7F,EAAU4F,OAC1BE,EAAiBD,EAAcE,aAAe,IAC9CC,EAAkBH,EAAcI,cAAgB,IAEtDlG,KAAKqB,MAAQ0E,EAAiB/F,KAAKgB,OAAOI,KAAOpB,KAAKgB,OAAOE,MAC7DlB,KAAKsB,OAAS2E,EAAkBjG,KAAKgB,OAAOC,IAAMjB,KAAKgB,OAAOG,OAC9DnB,KAAKuB,OAASC,KAAKC,IAAIzB,KAAKqB,MAAOrB,KAAKsB,QAAU,EAGlDtB,KAAKE,IAAMD,EAAUkG,OAAO,OACvBC,KAAK,QAASL,GACdK,KAAK,SAAUH,GAGpB,MAAMI,EAAUN,EAAiB,EAC3BO,EAAUL,EAAkB,EAG9BjG,KAAKe,eAELf,KAAKM,UAAYN,KAAKE,IAAIiG,OAAO,KAC5BC,KAAK,YAAa,aAAaC,KAAWC,MAG/CtG,KAAKM,UAAYN,KAAKE,IAAIiG,OAAO,KAC5BC,KAAK,YAAa,aAAapG,KAAKgB,OAAOI,KAAO,OAAOkF,MAI9DtG,KAAKe,eAELf,KAAKK,WAAaqF,GAAGa,UAChBC,KAAK,CAAC,EAAIhF,KAAKiF,GAAIzG,KAAKuB,OAAS,MACjCmF,WAAW,CAACC,EAAGC,KAEZ,GAAID,EAAEE,QAAUD,EAAEC,OAAQ,CAEtB,MAAMC,EAActF,KAAKuF,IAAI,EAAG,EAAIJ,EAAEK,OAEhCC,EAAeN,EAAEE,QAAUF,EAAEE,OAAOK,UAAUC,QAAe,EAC7DC,EAAgBH,EAAe,EAAI,EAAKA,EAAe,EAAI,IAAM,EAEjEI,EAAe,EAAe,GAAVV,EAAEK,MAC5B,OAAQF,EAAcM,GAAkBT,EAAEK,OAAS,GAAKK,CAC5D,CAEI,OAAO,GAAKV,EAAEK,OAAS,KAMnChH,KAAKK,WAAaqF,GAAG4B,OAChBC,SAAS,CAAC,GAAI,MACdb,WAAW,CAACC,EAAGC,IAERD,EAAEE,QAAUD,EAAEC,OAEP,EAGA,KAMvB7G,KAAKoC,KAAOsD,GAAGtD,OACVoF,YAAY,CAAC,GAAK,KAClBC,GAAG,OAASC,IACL1H,KAAKe,eAELf,KAAKM,UAAU8F,KAAK,YAChB,aAAaC,EAAUqB,EAAMC,UAAUC,KAAKtB,EAAUoB,EAAMC,UAAUE,YAAYH,EAAMC,UAAUG,MAGtG9H,KAAKM,UAAU8F,KAAK,YAChB,aAAapG,KAAKgB,OAAOI,KAAO,IAAMsG,EAAMC,UAAUC,KAAKtB,EAAUoB,EAAMC,UAAUE,YAAYH,EAAMC,UAAUG,QAIjI9H,KAAKE,IAAI6H,KAAK/H,KAAKoC,MAGnBpC,KAAKgI,2BAGLhI,KAAK8B,QAAU4D,GAAGC,OAAO,QAAQQ,OAAO,OACnCC,KAAK,QAAS,qBACd6B,MAAM,UAAW,GACjBA,MAAM,WAAY,YAClBA,MAAM,aAAc,sBACpBA,MAAM,QAAS,SACfA,MAAM,UAAW,OACjBA,MAAM,gBAAiB,OACvBA,MAAM,YAAa,QACnBA,MAAM,iBAAkB,OACjC,CAKA,oBAAAC,GACQlI,KAAKM,YAELN,KAAKM,UAAUsF,UAAU,UAAUL,SACnCvF,KAAKM,UAAUsF,UAAU,aAAaL,UAG1CvF,KAAK0B,OAAS,CAClB,CAKA,kBAAAwB,GACI,MAAMJ,EAAa9C,KAAK+C,sBAClBoF,EAAUrF,GAAaA,EAAWsF,MAAM,KAAKC,OAA0B,eAI7ErI,KAAKG,SAAW,CACZmI,KAAMH,EACNI,KAAM,IACNC,KAAM,OACNtB,SAAU,GACVuB,QAAQ,EACRC,UAAU,GAGI,oBAAPhD,KACP1F,KAAKI,KAAOsF,GAAGiD,UAAU3I,KAAKG,UAC9BH,KAAKI,KAAKwI,GAAK5I,KAAKsB,OAAS,EAC7BtB,KAAKI,KAAKyI,GAAK,EAEvB,CAKA,iBAAA1F,GACSnD,KAAKkC,SACF4G,OAAO5G,QACPlC,KAAKkC,OAAS4G,OAAO5G,OACrBlC,KAAK+I,sBACED,OAAOE,WAAWC,cAAc/G,QACvClC,KAAKkC,OAAS4G,OAAOE,UAAUC,aAAa/G,OAC5ClC,KAAK+I,sBACED,OAAOG,cAAc/G,SAC5BlC,KAAKkC,OAAS4G,OAAOG,aAAa/G,OAClClC,KAAK+I,sBAGjB,CAKA,qBAAAtF,GACI,GAAIzD,KAAKmC,gBAAkBnC,KAAKgC,UAC5B,OAIJhC,KAAKoD,qBAAqB,sCAAuC,QAGjE,MAAMN,EAAa9C,KAAK+C,sBACxB,IAAKD,GAA6B,eAAfA,GAA8C,iBAAfA,EAG9C,OAFAH,QAAQuG,KAAK,uDACblJ,KAAKgD,gCAKT,IAAKF,EAAWqG,WAAW,OAASrG,EAAWsG,MAAM,aAGjD,OAFAzG,QAAQC,MAAM,qCAAsCE,QACpD9C,KAAKqJ,iBAAiB,iCAAkC,SAK5DrJ,KAAKmC,gBAAiB,EACtBnC,KAAKgC,WAAY,EAGjBhC,KAAKO,MAAMwE,QACX/E,KAAKS,MAAQ,CACTC,MAAO,EACPC,QAAS,EACTC,UAAW,EACXC,QAAS,EACTC,MAAO,GAIPd,KAAKkC,SAAWlC,KAAKkC,OAAOoH,aAAa,oBACzCtJ,KAAK+I,qBAIT,MAAMZ,EAAUrF,EAAWsF,MAAM,KAAKC,OAAS,eAC/CrI,KAAKG,SAAW,CACZmI,KAAMH,EACNI,KAAM,IACNC,KAAM,OACNtB,SAAU,GACVuB,QAAQ,EACRC,UAAU,GAGI,oBAAPhD,KACP1F,KAAKI,KAAOsF,GAAGiD,UAAU3I,KAAKG,UAC9BH,KAAKI,KAAKwI,GAAK5I,KAAKsB,OAAS,EAC7BtB,KAAKI,KAAKyI,GAAK,GAInB7I,KAAKiF,cACLjF,KAAKuJ,iBAAiB,4BAA4BpB,OAAc,QAGhE,MAAMqB,EAAoB,GAC1B/G,SAASgH,iBAAiB,8BAA8BC,QAAQC,IAC5DH,EAAkBI,KAAKD,EAAG5F,SAI9B,MAAM8F,EAAiBpH,SAASC,eAAe,oBAAoBqB,OAAS,GAKtE+F,EAAiB,CACnBvB,KAAMzF,EACNkE,MAAO,YACP+C,UAAWP,EACXQ,gBAAiBH,EACjBI,WAAY,YAAYC,KAAKC,SAK7BnK,KAAKkC,QACLlC,KAAKkC,OAAOkI,KAAK,0BAA2BN,GAIhD9J,KAAKgF,aACT,CAKA,WAAAqF,GACQrK,KAAKgC,WAKThC,KAAKyD,uBACT,CAKA,cAAA6G,GACItK,KAAKgC,WAAY,EACjBhC,KAAKwF,cAEDxF,KAAKkC,QACLlC,KAAKkC,OAAOkI,KAAK,wBAGrBpK,KAAKuJ,iBAAiB,qBAAsB,WAC5CvJ,KAAKqJ,iBAAiB,qBAAsB,WAC5CrJ,KAAKuK,kBAAkB,qBAAsB,UACjD,CAKA,mBAAAC,GACI,IAAIC,EAAkBhI,SAASC,eAAe,mBAC9C,IAAK+H,EAAiB,CAClB,MAAMC,EAAgBjI,SAASC,eAAe,uBAC1CgI,IACAD,EAAkBhI,SAAS0C,cAAc,OACzCsF,EAAgBrF,GAAK,kBACrBqF,EAAgBE,UAAY,kBAC5BF,EAAgBxC,MAAM2C,QAAU,OAChCF,EAAcpF,YAAYmF,GAElC,CACJ,CAKA,kBAAAI,GACI,MAAMJ,EAAkBhI,SAASC,eAAe,mBAC5C+H,IACAA,EAAgBpF,UAAY,GAC5BoF,EAAgBxC,MAAM2C,QAAU,QAExC,CAKA,iBAAAL,CAAkBO,EAAStC,EAAO,QAC9B,MAAMiC,EAAkBhI,SAASC,eAAe,mBAChD,GAAI+H,EAAiB,CACjB,MAAMM,EAAUtI,SAAS0C,cAAc,OACvC4F,EAAQJ,UAAY,iBACpBI,EAAQ9C,MAAM+C,gBAA2B,YAATxC,EAAqB,UACd,UAATA,EAAmB,UAAY,UAE7D,MAAMyC,GAAA,IAAgBf,MAAOgB,qBAC7BH,EAAQ1F,UAAY,kCAAkC4F,aAAqBH,IAE3EL,EAAgBnF,YAAYyF,GAE5BN,EAAgBU,UAAYV,EAAgBW,YAChD,CACJ,CAKA,kBAAArC,GACS/I,KAAKkC,SAGVlC,KAAKkC,OAAOuF,GAAG,yBAA2B4D,GAASrL,KAAKsL,mBAAmBD,IAC3ErL,KAAKkC,OAAOuF,GAAG,uBAAyB4D,GAASrL,KAAKuL,iBAAiBF,IACvErL,KAAKkC,OAAOuF,GAAG,sBAAwB4D,GAASrL,KAAKwL,gBAAgBH,IACrErL,KAAKkC,OAAOuF,GAAG,yBAA2B4D,GAASrL,KAAKyL,mBAAmBJ,IAC3ErL,KAAKkC,OAAOuF,GAAG,0BAA4B4D,GAASrL,KAAK0L,oBAAoBL,IAC7ErL,KAAKkC,OAAOuF,GAAG,sBAAwB4D,GAASrL,KAAK2L,gBAAgBN,IAGrErL,KAAKkC,OAAOuF,GAAG,4BAA8B4D,GAASrL,KAAK4L,qBAAqBP,IAChFrL,KAAKkC,OAAOuF,GAAG,4BAA8B4D,GAASrL,KAAK6L,sBAAsBR,IACjFrL,KAAKkC,OAAOuF,GAAG,uBAAyB4D,GAASrL,KAAK8L,iBAAiBT,IACvErL,KAAKkC,OAAOuF,GAAG,qBAAuB4D,GAASrL,KAAK+L,eAAeV,IACnErL,KAAKkC,OAAOuF,GAAG,kBAAoB4D,GAASrL,KAAKgM,YAAYX,IAG7DrL,KAAKkC,OAAOuF,GAAG,yBAA2B4D,GAASrL,KAAKiM,iBAAiBZ,IAGzErL,KAAKkC,OAAOuF,GAAG,0BAA4B4D,IAEvC,GAAIA,EAAK9C,KAAM,CAEX,IAAI2D,EAAab,EAAK9C,KACtB,MAAMzF,EAAa9C,KAAK+C,sBACpBD,GAAcoJ,EAAW/C,WAAWrG,KAEpCoJ,EAAaA,EAAWC,UAAUrJ,EAAWqE,QAAQiF,QAAQ,MAAO,IAE/DF,IACDA,EAAa,MAIrB,MAAMrG,EAAO7F,KAAKqM,eAAeH,GACjC,GAAIrG,GAAQwF,EAAKnE,SAAU,CAEvB,MAAMoF,EAAStM,KAAKuM,iBAAiBL,GA+BrC,GA9BII,GAAUtM,KAAKsC,aAAakK,IAAIN,IAChClM,KAAKyM,mBAAmBH,GAE5BzG,EAAKqB,SAAWmE,EAAKnE,SAASwF,IAAIC,IAG9B,IAAIC,EACJ,GAAmB,MAAfV,GAAqC,KAAfA,EAEtBU,EAAYD,EAAMrE,MAAQqE,EAAMpE,SAC7B,CAGH,MAAMsE,EAAYF,EAAMrE,MAAQqE,EAAMpE,KACtCqE,EAAY,GAAGV,KAAcW,GACjC,CAEA,MAAO,IACAF,EACHpE,KAAMqE,EACNnE,OAAuB,cAAfkE,EAAMnE,WAA+B,EAC7CsE,SAAyB,SAAfH,EAAMnE,WAA0B,EAC1CE,UAAU,EACVxB,SAAU,MAGlBrB,EAAK4C,QAAS,EACd5C,EAAK6C,UAAW,EAGZ1I,KAAKI,MAAQJ,KAAKE,IAAK,CAEvB,MAAM6M,EAAU/M,KAAKI,KAGrBJ,KAAKI,KAAOsF,GAAGiD,UAAU3I,KAAKG,UAC9BH,KAAKI,KAAKwI,GAAK5I,KAAKsB,OAAS,EAC7BtB,KAAKI,KAAKyI,GAAK,EAGf7I,KAAKgN,uBAAuBD,EAAS/M,KAAKI,MAG1C,MAAM6M,EAAgBjN,KAAKuM,iBAAiBL,GACxCe,IAEAA,EAAc/F,SAAW+F,EAAcC,WAAaD,EAAc/F,SAClE+F,EAAcC,UAAY,KAC1BD,EAAc5B,KAAK3C,UAAW,GAGlC1I,KAAKwD,OAAOxD,KAAKI,KACrB,CAGIiL,EAAK5K,QACLT,KAAKS,MAAMC,OAAS2K,EAAK5K,MAAMC,OAAS,EACxCV,KAAKS,MAAM0M,aAAe9B,EAAK5K,MAAM0M,aAAe,EACpDnN,KAAKgF,eAGThF,KAAKuJ,iBAAiB,UAAU8B,EAAK9C,OAAQ,WAC7CvI,KAAKwF,aACT,CACJ,IAIJxF,KAAKkC,OAAOuF,GAAG,4BAA8B4D,IACrCA,EAAK+B,OAASC,MAAMC,QAAQjC,EAAK+B,SAGjCpN,KAAKG,SAAS+G,SAAWmE,EAAK+B,MAAMV,IAAIa,IAAA,CACpCjF,KAAMiF,EAAKjF,KACXC,KAAMgF,EAAKhF,KACXC,KAAM+E,EAAK/E,KACXgF,SAAwB,SAAdD,EAAK/E,KAAkBxI,KAAKyN,eAAeF,EAAKhF,WAAQ,EAClE/B,KAAM+G,EAAK/G,KACX1F,MAAOyM,EAAKzM,MACZ2H,OAAsB,cAAd8E,EAAK/E,WAA+B,EAC5CsE,SAAwB,SAAdS,EAAK/E,WAA0B,EACzCE,UAAU,EACVxB,SAAU,MAGdlH,KAAKG,SAASsI,QAAS,EAGnB4C,EAAK5K,QACLT,KAAKS,MAAQ,IAAKT,KAAKS,SAAU4K,EAAK5K,OACtCT,KAAKgF,eAIS,oBAAPU,KAEP1F,KAAKkI,uBAGLlI,KAAKI,KAAOsF,GAAGiD,UAAU3I,KAAKG,UAC9BH,KAAKI,KAAKwI,GAAK5I,KAAKsB,OAAS,EAC7BtB,KAAKI,KAAKyI,GAAK,EAEX7I,KAAKE,KACLF,KAAKwD,OAAOxD,KAAKI,OAIzBJ,KAAKgC,WAAY,EACjBhC,KAAKwF,cACLxF,KAAKuJ,iBAAiB,cAAc8B,EAAK+B,MAAMjG,oBAAqB,WACpEnH,KAAKqJ,iBAAiB,SAASgC,EAAK+B,MAAMjG,+BAAgC,cAGtF,CAKA,eAAAqE,CAAgBH,GACZrL,KAAKgC,WAAY,EACjB,MAAM8I,EAAUO,EAAKP,SAAW,4BAGhC9K,KAAKoD,qBAAqB,0BAA2B,QAErDpD,KAAKuJ,iBAAiBuB,EAAS,QAC/B9K,KAAKuK,kBAAkB,MAAMO,IAAW,QAGnC9K,KAAKG,UAA8C,IAAlCH,KAAKG,SAAS+G,SAASC,QACzCnH,KAAKkD,qBAITlD,KAAKS,MAAQ,CACTC,MAAO,EACPC,QAAS,EACTC,UAAW,EACXC,QAAS,EACTC,MAAO,GAEXd,KAAKgF,aACT,CAKA,oBAAA4G,CAAqBP,GAIjBrL,KAAKoD,qBAAqB,kBAAkBiI,EAAK+B,OAAS,IAAIjG,yBAA0B,WAGxFnH,KAAKuK,kBAAkB,aAAac,EAAK+B,OAAS,IAAIjG,yCAA0C,QAGhG,MAAMuG,EAAW1N,KAAKqM,eAAe,KAErC1J,QAAQgL,IAAI,iDAAkDD,EAAW,CACrEpF,KAAMoF,EAASpF,KACfC,KAAMmF,EAASnF,KACfqF,gBAAiBF,EAASxG,SAAWwG,EAASxG,SAASC,OAAS,GAChE,aAEAuG,GAAYrC,EAAK+B,OACjBzK,QAAQgL,IAAI,yCAGZD,EAASxG,SAAWmE,EAAK+B,MAAMV,IAAIC,IAE/B,MAAMC,EAAYD,EAAMrE,KAIxB,OAFA3F,QAAQgL,IAAI,mBAAmBhB,EAAMrE,mBAAmBsE,KAEjD,CACHtE,KAAMqE,EAAMrE,KACZC,KAAMqE,EACNpE,KAAMmE,EAAMnE,KACZC,OAAuB,cAAfkE,EAAMnE,WAA+B,EAC7CsE,SAAyB,SAAfH,EAAMnE,WAA0B,EAC1CE,UAAU,EACVxB,SAAyB,cAAfyF,EAAMnE,KAAuB,QAAK,EAC5ChC,KAAMmG,EAAMnG,KACZqH,SAAUlB,EAAMkB,YAIxBH,EAASjF,QAAS,EAClBiF,EAAShF,UAAW,EAGhB1I,KAAKI,MAAQJ,KAAKE,MAElBF,KAAKI,KAAOsF,GAAGiD,UAAU3I,KAAKG,UAC9BH,KAAKI,KAAKwI,GAAK5I,KAAKsB,OAAS,EAC7BtB,KAAKI,KAAKyI,GAAK,EAGf7I,KAAKwD,OAAOxD,KAAKI,OAIrBJ,KAAKwF,cACLxF,KAAKuJ,iBAAiB,cAAc8B,EAAK+B,MAAMjG,eAAgB,WAC/DnH,KAAKqJ,iBAAiB,SAASgC,EAAK+B,MAAMjG,yBAA0B,aAEpExE,QAAQC,MAAM,0CACd5C,KAAKqJ,iBAAiB,oCAAqC,UAI/DrJ,KAAKgC,WAAY,CACrB,CAKA,qBAAA6J,CAAsBR,GAElBrL,KAAKoD,qBAAqB,kBAAkBiI,EAAK/C,MAAQ,eAGzDtI,KAAKuK,kBAAkB,aAAac,EAAKnE,UAAY,IAAIC,oBAAoBkE,EAAK/C,MAAQ+C,EAAK9C,OAAQ,QAEvG5F,QAAQgL,IAAI,mCAAoC,CAC5CpF,KAAM8C,EAAK9C,KACXD,KAAM+C,EAAK/C,KACXwF,eAAgBzC,EAAKnE,UAAY,IAAIC,OACrCD,UAAWmE,EAAKnE,UAAY,IAAIwF,IAAIqB,IAAA,CAAQzF,KAAMyF,EAAEzF,KAAME,KAAMuF,EAAEvF,QAClE1F,WAAY9C,KAAK+C,wBAIrB,IAAImJ,EAAab,EAAK9C,KACtB,MAAMzF,EAAa9C,KAAK+C,sBACpBD,GAAcoJ,EAAW/C,WAAWrG,KAEpCoJ,EAAaA,EAAWC,UAAUrJ,EAAWqE,QAAQiF,QAAQ,MAAO,IAE/DF,IACDA,EAAa,MAIrBvJ,QAAQgL,IAAI,mCAAoCzB,GAGhD,MAAMrG,EAAO7F,KAAKqM,eAAeH,GAIjC,GAAIrG,GAAQwF,EAAKnE,SAAU,CAEvBrB,EAAKqB,SAAWmE,EAAKnE,SAASwF,IAAIC,IAG9B,IAAIC,EACJ,GAAmB,MAAfV,GAAqC,KAAfA,EAEtBU,EAAYD,EAAMrE,MAAQqE,EAAMpE,SAC7B,CAGH,MAAMsE,EAAYF,EAAMrE,MAAQqE,EAAMpE,KACtCqE,EAAY,GAAGV,KAAcW,GACjC,CAEA,MAAO,CACHvE,KAAMqE,EAAMrE,KACZC,KAAMqE,EACNpE,KAAMmE,EAAMnE,KACZC,OAAuB,cAAfkE,EAAMnE,WAA+B,EAC7CsE,SAAyB,SAAfH,EAAMnE,WAA0B,EAC1CE,UAAU,EACVxB,SAAyB,cAAfyF,EAAMnE,KAAuB,QAAK,EAC5ChC,KAAMmG,EAAMnG,KACZqH,SAAUlB,EAAMkB,YAGxBhI,EAAK4C,QAAS,EACd5C,EAAK6C,UAAW,EAGhB,MAAM4D,EAAStM,KAAKuM,iBAAiBL,GASrC,GARII,GAEItM,KAAKsC,aAAakK,IAAIN,IACtBlM,KAAKyM,mBAAmBH,GAK5BtM,KAAKI,MAAQJ,KAAKE,IAAK,CAEvB,MAAM6M,EAAU/M,KAAKI,KAGrBJ,KAAKI,KAAOsF,GAAGiD,UAAU3I,KAAKG,UAG9BH,KAAKI,KAAKwI,GAAK5I,KAAKsB,OAAS,EAC7BtB,KAAKI,KAAKyI,GAAK,EAGf7I,KAAKgN,uBAAuBD,EAAS/M,KAAKI,MAG1C,MAAM6M,EAAgBjN,KAAKuM,iBAAiBL,GACxCe,GAAiBA,EAAc5B,KAAKnE,UAAY+F,EAAc5B,KAAKnE,SAASC,OAAS,IAErF8F,EAAc/F,SAAW+F,EAAcC,WAAaD,EAAc/F,SAClE+F,EAAcC,UAAY,KAE1BD,EAAc5B,KAAK3C,UAAW,GAGlC1I,KAAKwD,OAAOxD,KAAKI,KACrB,CAEAJ,KAAKuJ,iBAAiB,UAAU1D,EAAKqB,SAASC,qBAAqBtB,EAAKyC,OAAQ,WAChFtI,KAAKgF,aACT,MAAA,GAAYa,GAEZ,GAAWA,IAASwF,EAAKnE,SAAU,CAE/B,MAAM8G,EAAY3C,EAAK9C,KAAO8C,EAAK9C,KAAKH,MAAM,KAAK6F,OAAOC,GAAKA,GAAK,GAGpE,GAFwC,IAArBF,EAAU7G,QAEXkE,EAAK8C,SAAU,CAC7B,MAAMC,EAAU,CACZ9F,KAAM+C,EAAK/C,MAAQ0F,EAAUA,EAAU7G,OAAS,IAAM,UACtDoB,KAAM8C,EAAK9C,KACXC,KAAM,YACNtB,SAAU,GACVuB,QAAQ,EACRC,UAAU,EACVjI,MAAO4K,EAAK5K,OAAS,CAAA,GAGzBT,KAAKqO,cAAcD,EAAS/C,EAAKxE,QAAU,IAC3C7G,KAAKuJ,iBAAiB,eAAe8B,EAAK9C,OAAQ,OACtD,CACJ,OApBIvI,KAAKsO,YAAYtO,KAAKG,SAqB9B,CAKA,gBAAA2L,CAAiBT,GAEb,MAAMkD,EAAWlD,EAAK/C,OAAS+C,EAAK9C,KAAO8C,EAAK9C,KAAKH,MAAM,KAAKC,MAAQ,QACxErI,KAAKoD,qBAAqB,aAAamL,KAGvCvO,KAAKuK,kBAAkB,kBAAkBc,EAAK9C,MAAQ,iBAAkB,QAExE,MAAMyF,EAAY3C,EAAK9C,KAAO8C,EAAK9C,KAAKH,MAAM,KAAK6F,OAAOC,GAAKA,GAAK,GAC9DM,EAAaR,EAAUS,MAAM,GAAG,GAAIC,KAAK,KAEzCC,EAAW,CACbrG,KAAM+C,EAAK/C,MAAQ0F,EAAUA,EAAU7G,OAAS,IAAM,UACtDoB,KAAM8C,EAAK9C,KACXC,KAAM,OACNgF,SAAUnC,EAAKmC,UAAYxN,KAAKyN,eAAepC,EAAK9C,MACpD/B,KAAM6E,EAAK7E,MAAQ,EACnB1F,MAAOuK,EAAKvK,OAAS,EACrBoG,SAAU,GACV4F,UAAU,GAGd9M,KAAKqO,cAAcM,EAAUH,GAC7BxO,KAAKS,MAAMC,QACXV,KAAKgF,cACLhF,KAAKuJ,iBAAiB,UAAU8B,EAAK9C,OAAQ,OACjD,CAKA,cAAAwD,CAAeV,GAEX,MAAMiB,EAAStM,KAAKuM,iBAAiBlB,EAAK9C,MAK1C,GAJI+D,GAAUtM,KAAKsC,aAAakK,IAAInB,EAAK9C,OACrCvI,KAAKyM,mBAAmBH,GAGxBjB,EAAK9C,KAAM,CACX,MAAMgG,EAAWlD,EAAK9C,KAAKH,MAAM,KAAKC,MACtCrI,KAAKoD,qBAAqB,gBAAgBmL,IAC9C,CAEA,MAAMI,EAAW3O,KAAKqM,eAAehB,EAAK9C,MACtCoG,IACAA,EAAS7B,UAAW,EACpB6B,EAASC,WAAavD,EAAKuD,YAAc,EACzCD,EAAS7N,MAAQuK,EAAKvK,OAAS,EAG3BuK,EAAKwD,UAAYxB,MAAMC,QAAQjC,EAAKwD,YACpCF,EAASzH,SAAWmE,EAAKwD,SAASnC,IAAIoC,IAAA,CAClCxG,KAAMwG,EAAKxG,KACXE,KAAMsG,EAAKtG,KAAKtE,cAChBqE,KAAM,GAAG8C,EAAK9C,QAAQuG,EAAKxG,OAC3ByG,KAAMD,EAAKC,KACXH,WAAYE,EAAKF,YAAc,EAC/BI,UAAWF,EAAKE,WAAa,GAC7B9H,SAAU4H,EAAKjO,QAAUiO,EAAKjO,QAAQ6L,IAAIuC,IAAA,CACtC3G,KAAM2G,EAAE3G,KACRE,KAAM,SACND,KAAM,GAAG8C,EAAK9C,QAAQuG,EAAKxG,QAAQ2G,EAAE3G,OACrCyG,KAAME,EAAEF,KACRH,WAAYK,EAAEL,YAAc,EAC5BI,UAAWC,EAAED,WAAa,MACxB,OAKV3D,EAAK5K,QACLT,KAAKS,MAAME,SAAW0K,EAAK5K,MAAME,SAAW,EAC5CX,KAAKS,MAAMG,WAAayK,EAAK5K,MAAMG,WAAa,EAChDZ,KAAKS,MAAMI,SAAWwK,EAAK5K,MAAMI,SAAW,EAC5Cb,KAAKS,MAAMK,OAASuK,EAAK5K,MAAMK,OAAS,GAG5Cd,KAAKgF,cACDhF,KAAKI,MACLJ,KAAKwD,OAAOxD,KAAKI,MAGrBJ,KAAKuJ,iBAAiB,aAAa8B,EAAK9C,OAAQ,WAExD,CAKA,WAAAyD,CAAYX,GAER,MAAM6D,EAAyB,UAAd7D,EAAK7C,KAAmB,MACX,aAAd6C,EAAK7C,KAAsB,IACb,WAAd6C,EAAK7C,KAAoB,KAAO,KAChDxI,KAAKuK,kBAAkB,GAAG2E,WAAkB7D,EAAK7C,MAAQ,WAAW6C,EAAK/C,MAAQ,aAGjF,MAAM6G,EAAW,CACb7G,KAAM+C,EAAK/C,MAAQ,UACnBE,MAAO6C,EAAK7C,MAAQ,WAAWtE,cAC/BqE,KAAM8C,EAAK9C,MAAQ,GACnBwG,KAAM1D,EAAK0D,MAAQ,EACnBH,WAAYvD,EAAKuD,YAAc,EAC/BI,UAAW3D,EAAK2D,WAAa,IAajCG,EAAS3G,KATW,CAChB4G,MAAS,QACTC,SAAY,WACZC,OAAU,SACVC,OAAU,SACVC,KAAQ,OACR3K,UAAa,aAGWsK,EAAS3G,OAAS2G,EAAS3G,KAGvD,IAAIgG,EAAa,GACjB,GAAInD,EAAKoE,YACLjB,EAAanD,EAAKoE,iBACtB,GAAWpE,EAAKqE,UACZlB,EAAanD,EAAKqE,eACtB,GAAWP,EAAS5G,KAAKoH,SAAS,KAAM,CACpC,MAAMC,EAAQT,EAAS5G,KAAKH,MAAM,KAClCwH,EAAMvH,MACNmG,EAAaoB,EAAMlB,KAAK,IAC5B,CAGA,OAAOS,EAAS3G,MACZ,IAAK,QACDxI,KAAKS,MAAME,UACX,MACJ,IAAK,WACDX,KAAKS,MAAMG,YACX,MACJ,IAAK,SACDZ,KAAKS,MAAMI,UACX,MACJ,IAAK,OACDb,KAAKS,MAAMC,QAKnBV,KAAKqO,cAAcc,EAAUX,GAC7BxO,KAAKgF,cAGL,MAAM6K,EAAcV,EAAS3G,KAAKsH,OAAO,GAAGC,cAAgBZ,EAAS3G,KAAKiG,MAAM,GAChFzO,KAAKuJ,iBAAiB,SAASsG,MAAgBV,EAAS7G,OAAQ,OACpE,CAKA,gBAAA2D,CAAiBZ,GACb,MAAM2E,EAAW3E,EAAK2E,UAAY,EAC5BlF,EAAUO,EAAKP,SAAW,iBAAiBkF,KAEjDhQ,KAAKuJ,iBAAiBuB,EAAS,QAG/B,MAAMmF,EAAcxN,SAASyN,cAAc,uBACvCD,IACAA,EAAYhI,MAAM5G,MAAQ,GAAG2O,KAErC,CAKA,kBAAAvE,CAAmBJ,GACfrL,KAAKgC,WAAY,EACjBhC,KAAKwF,cAGLxF,KAAKoD,qBAAqB,UAAW,WAGrCpD,KAAKuK,kBAAkB,uBAAwB,WAG3CvK,KAAKI,MAAQJ,KAAKE,KAClBF,KAAKwD,OAAOxD,KAAKI,MAIjBiL,EAAK5K,QACLT,KAAKS,MAAQ,IAAKT,KAAKS,SAAU4K,EAAK5K,OACtCT,KAAKgF,eAGT,MAAM8F,EAAUO,EAAKP,SAAW,sBAAsB9K,KAAKS,MAAMC,gBAAgBV,KAAKS,MAAME,oBAAoBX,KAAKS,MAAMG,sBAC3HZ,KAAKuJ,iBAAiBuB,EAAS,WAC/B9K,KAAKqJ,iBAAiByB,EAAS,UACnC,CAKA,eAAAa,CAAgBN,GACZrL,KAAKgC,WAAY,EACjBhC,KAAKwF,cAEL,MAAMsF,EAAUO,EAAKP,SAAWO,EAAKzI,OAAS,kBAC9C5C,KAAKuJ,iBAAiBuB,EAAS,SAC/B9K,KAAKqJ,iBAAiByB,EAAS,QACnC,CAKA,kBAAAQ,CAAmBD,GACf,MAAMP,EAAUO,EAAKP,SAAW,4BAChC9K,KAAKuJ,iBAAiBuB,EAAS,OACnC,CAKA,gBAAAS,CAAiBF,GACb,MACMP,EAAU,6BADCO,EAAK8E,UAAY,KAElCnQ,KAAKuJ,iBAAiBuB,EAAS,WAC/B9K,KAAKqJ,iBAAiByB,EAAS,OACnC,CAKA,WAAAsF,CAAY/E,GAIJA,EAAK7C,MAAQ6C,EAAK7C,KAAKW,WAAW,cAEhB,oBAAdkC,EAAK7C,KACLxI,KAAKuJ,iBAAiB8B,EAAKP,QAAS,QACf,uBAAdO,EAAK7C,MACZxI,KAAKuJ,iBAAiB8B,EAAKP,QAAS,WAEhCO,EAAK5K,OAEY,wBAAd4K,EAAK7C,MAAgD,mBAAd6C,EAAK7C,MAEnDxI,KAAKuJ,iBAAiB8B,EAAKP,QAAS,QAEjCO,EAAK7C,MAAQ6C,EAAK7C,KAAKW,WAAW,aAEvB,mBAAdkC,EAAK7C,KACLxI,KAAKuJ,iBAAiB8B,EAAKP,QAAS,QACf,sBAAdO,EAAK7C,MACZxI,KAAKuJ,iBAAiB8B,EAAKP,QAAS,WAEhCO,EAAK5K,QACsB4K,EAAK5K,MAAME,QAAyB0K,EAAK5K,MAAMG,UAA6ByK,EAAK5K,MAAMI,WAEjG,mBAAdwK,EAAK7C,MAA2C,sBAAd6C,EAAK7C,MAA8C,oBAAd6C,EAAK7C,MAG9D,mBAAd6C,EAAK7C,OADZxI,KAAKuJ,iBAAiB8B,EAAKP,QAAS,QAIjCO,EAAK7C,MAAQ6C,EAAK7C,KAAKW,WAAW,YAErCL,OAAOuH,WAAarQ,KAAKsQ,oBACzB3N,QAAQ4N,MAAM,WAAYlF,EAAK7C,KAAM6C,EAAK9C,KAAM8C,EAAKmF,QACjDxQ,KAAKsQ,kBACLtQ,KAAKuJ,iBAAiB8B,EAAKP,QAAS,YAGrCO,EAAK7C,MAAQ6C,EAAK7C,KAAKW,WAAW,YAEvB,cAAdkC,EAAK7C,MACL7F,QAAQ4N,MAAM,cAAelF,EAAKmE,MAC9BxP,KAAKyQ,iBACLzQ,KAAKuJ,iBAAiB8B,EAAKP,QAAS,SAEnB,eAAdO,EAAK7C,MACZ7F,QAAQ4N,MAAM,eAAgBlF,EAAKmE,OAKvCxP,KAAK0Q,iBAAmBrF,EAAKP,SAC7B9K,KAAKuK,kBAAkBc,EAE/B,CAKA,iBAAAd,CAAkBc,GAGTrL,KAAK2Q,eACN3Q,KAAK2Q,aAAe,IAGxB3Q,KAAK2Q,aAAaC,QAAQ,CACtB3F,UAAWI,EAAKJ,YAAA,IAAiBf,MAAO2G,cACxCrI,KAAM6C,EAAK7C,KACXsC,QAASO,EAAKP,QACdO,SAIArL,KAAK2Q,aAAaxJ,OAAS,KAC3BnH,KAAK2Q,aAAatI,KAI1B,CAKA,mBAAAqD,CAAoBL,GAChBrL,KAAKgC,WAAY,EACjBhC,KAAKwF,cACL,MAAMsF,EAAUO,EAAKP,SAAW,qBAChC9K,KAAKuJ,iBAAiBuB,EAAS,UACnC,CAKA,gBAAAzB,CAAiByB,EAAStC,EAAO,QAC7B,MAAMsI,EAAerO,SAAS0C,cAAc,OAC5C2L,EAAanG,UAAY,0BAA0BnC,IACnDsI,EAAaC,YAAcjG,EAG3B,MAAM7K,EAAYwC,SAASC,eAAe,uBACtCzC,IAEA6Q,EAAa7I,MAAMkI,SAAW,WAC9BW,EAAa7I,MAAMhH,IAAM,OACzB6P,EAAa7I,MAAM/G,MAAQ,OAC3B4P,EAAa7I,MAAM+I,OAAS,OAGvB/Q,EAAUgI,MAAMkI,UAAyC,WAA7BlQ,EAAUgI,MAAMkI,WAC7ClQ,EAAUgI,MAAMkI,SAAW,YAG/BlQ,EAAUqF,YAAYwL,GAGtBG,WAAW,KACPH,EAAa7I,MAAMiJ,UAAY,0BAC/BD,WAAW,IAAMH,EAAavL,SAAU,MACzC,KAEX,CAKA,aAAA8I,CAAcc,EAAUX,EAAa,IAGjC,GAAIW,EAAS5G,MAAQ4G,EAAS5G,KAAKY,WAAW,KAE1C,YADAxG,QAAQC,MAAM,4CAA6CuM,EAAS5G,MAKxE,GAAIiG,GAAcA,EAAWrF,WAAW,KAEpC,YADAxG,QAAQC,MAAM,8CAA+C4L,GAKjE,IAAI2C,EAAanR,KAAKG,SAEtB,GAAIqO,IACA2C,EAAanR,KAAKqM,eAAemC,IAC5B2C,GAKD,OAFAxO,QAAQuG,KAAK,iDAAkDsF,QAC/D7L,QAAQuG,KAAK,yBAA0BiG,GAM/C,MAAMiC,EAAeD,EAAWjK,UAAUmK,KAAKtD,GAC3CA,EAAExF,OAAS4G,EAAS5G,MACnBwF,EAAEzF,OAAS6G,EAAS7G,MAAQyF,EAAEvF,OAAS2G,EAAS3G,MAGjD4I,EAEAE,OAAOC,OAAOH,EAAcjC,IAK3BgC,EAAWjK,WACZiK,EAAWjK,SAAW,IAIrBiI,EAASjI,WACViI,EAASjI,SAAW,IAGxBiK,EAAWjK,SAAS0C,KAAKuF,GAGzBnP,KAAKO,MAAMiR,IAAIrC,EAAS5G,KAAM4G,GAG1BnP,KAAKI,MAAQJ,KAAKE,MAElBF,KAAKI,KAAOsF,GAAGiD,UAAU3I,KAAKG,UAC9BH,KAAKI,KAAKwI,GAAK5I,KAAKsB,OAAS,EAC7BtB,KAAKI,KAAKyI,GAAK,GAGX7I,KAAKO,MAAMiG,KAAO,KAEXxG,KAAKO,MAAMiG,KAAO,KAAQ,IADjCxG,KAAKwD,OAAOxD,KAAKI,OAM7B,CAKA,cAAAiM,CAAe9D,EAAM1C,EAAO,MAOxB,GANKA,IACDA,EAAO7F,KAAKG,UAKZ0F,EAAK0C,OAASA,EACd,OAAO1C,EAGX,GAAIA,EAAKqB,SACL,IAAA,MAAWyF,KAAS9G,EAAKqB,SAAU,CAC/B,MAAMuK,EAAQzR,KAAKqM,eAAe9D,EAAMoE,GACxC,GAAI8E,EACA,OAAOA,CAEf,CAMJ,OAHK5L,EAAKgB,OAGH,IACX,CAKA,WAAAyH,CAAYzI,EAAM6L,EAAS,IAEvB,GADA/O,QAAQgL,IAAI,GAAG+D,IAAS7L,EAAK0C,SAAS1C,EAAKyC,SACvCzC,EAAKqB,SACL,IAAA,MAAWyF,KAAS9G,EAAKqB,SACrBlH,KAAKsO,YAAY3B,EAAO+E,EAAS,KAG7C,CAKA,gBAAAnF,CAAiBhE,GACb,OAAKvI,KAAKI,KACHJ,KAAKI,KAAKuR,cAAcN,KAAKO,GAAKA,EAAEvG,KAAK9C,OAASA,GADlC,IAE3B,CAKA,sBAAAyE,CAAuBD,EAAS8E,GAC5B,IAAK9E,IAAY8E,EAAS,OAG1B,MAAMC,MAAmBtR,IACzBuM,EAAQ4E,cAAcjI,QAAQ7D,KACtBA,EAAKwF,KAAK3C,UAAa7C,EAAKqB,WAAarB,EAAKqH,YAC9C4E,EAAaN,IAAI3L,EAAKwF,KAAK9C,MAAM,KAKzCsJ,EAAQF,cAAcjI,QAAQ7D,IACtBiM,EAAatF,IAAI3G,EAAKwF,KAAK9C,QAC3B1C,EAAKqB,SAAWrB,EAAKqH,WAAarH,EAAKqB,SACvCrB,EAAKqH,UAAY,KACjBrH,EAAKwF,KAAK3C,UAAW,IAGjC,CAKA,WAAA1D,GAEI,MAAM+M,EAAgB,CAClB,aAAc/R,KAAKS,MAAMC,MACzB,cAAeV,KAAKS,MAAME,QAC1B,iBAAkBX,KAAKS,MAAMG,UAC7B,aAAcZ,KAAKS,MAAMK,OAG7B,IAAA,MAAYsE,EAAIrB,KAAUuN,OAAOU,QAAQD,GAAgB,CACrD,MAAMjD,EAAOrM,SAASC,eAAe0C,GACjC0J,IACAA,EAAKiC,YAAchN,EAAMkO,iBAEjC,CAGA,MAAMC,EAAezP,SAASC,eAAe,sBAC7C,GAAIwP,EAAc,CACd,MAAMC,EAAanS,KAAKgC,UACpB,gBAAgBhC,KAAKS,MAAMC,wBAC3B,WAAWV,KAAKS,MAAMC,sBAC1BwR,EAAanB,YAAcoB,CAC/B,CACJ,CAKA,gBAAA5I,CAAiBuB,EAAStC,EAAO,QAC7B,MAAM4J,EAAoB3P,SAASC,eAAe,sBAC9C0P,IACAA,EAAkBrB,YAAcjG,EAChCsH,EAAkBzH,UAAY,cAAcnC,IAEpD,CAKA,cAAAiF,CAAe4E,GAuBX,MArBoB,CAChBC,GAAM,SACNC,GAAM,aACNC,GAAM,aACNC,IAAO,aACPC,IAAO,aACPC,KAAQ,OACRC,IAAO,MACP7E,EAAK,IACL8E,GAAM,SACNC,GAAM,OACNC,GAAM,KACNC,GAAM,OACNC,IAAO,MACPC,MAAS,QACTC,GAAM,SACNC,MAAS,QACTC,EAAK,IACLC,GAAM,OACNC,IAAO,cApBClB,EAASjK,MAAM,KAAKC,MAAMnE,gBAsBX,SAC/B,CAKA,wBAAA8D,GACI,MAKMwL,EALWxT,KAAKE,IAAIiG,OAAO,KAC5BC,KAAK,QAAS,gBACdA,KAAK,YAAa,qBAGOD,OAAO,KAChCC,KAAK,QAAS,iBACd6B,MAAM,SAAU,WAChBR,GAAG,QAAS,IAAMzH,KAAKyT,gBAE5BD,EAAarN,OAAO,QACfC,KAAK,QAAS,KACdA,KAAK,SAAU,IACfA,KAAK,KAAM,GACXA,KAAK,OAAQ,WACbA,KAAK,UAAW,IAErBoN,EAAarN,OAAO,QACfC,KAAK,IAAK,IACVA,KAAK,IAAK,IACVA,KAAK,cAAe,UACpBA,KAAK,OAAQ,SACb6B,MAAM,YAAa,QACnByL,KAAK1T,KAAKe,eAAiB,mBAAqB,mBACzD,CAKA,YAAA0S,GACIzT,KAAKe,gBAAkBf,KAAKe,eAC5Bf,KAAKuD,sBACDvD,KAAKI,MACLJ,KAAKwD,OAAOxD,KAAKI,MAErBJ,KAAKqJ,iBACDrJ,KAAKe,eAAiB,4BAA8B,4BACpD,OAER,CAKA,WAAA4S,CAAY/L,EAAGC,GACX,MAAO,EAAEA,GAAKA,GAAKrG,KAAKoS,IAAIhM,GAAKpG,KAAKiF,GAAK,GAAIoB,EAAIrG,KAAKqS,IAAIjM,GAChE,CAKA,MAAApE,CAAOsQ,GACH,IAAK9T,KAAKK,aAAeL,KAAKM,YAAcwT,EACxC,OAIJ,MAAM3T,EAAWH,KAAKK,WAAWL,KAAKI,MAChCG,EAAQJ,EAASwR,cACjBoC,EAAQ5T,EAASwR,cAAclD,MAAM,GAEvCzO,KAAKe,gBAELR,EAAMmJ,QAAQkI,SAEG,IAATA,EAAEhJ,KACFgJ,EAAEhJ,GAAKgJ,EAAEhK,EACTgK,EAAE/I,GAAK+I,EAAE/J,KASrB,MAAMhC,EAAO7F,KAAKM,UAAUsF,UAAU,UACjCyF,KAAK9K,EAAOqR,GAAKA,EAAExM,KAAOwM,EAAExM,KAAOpF,KAAK0B,SAGvCsS,EAAYnO,EAAKoO,QAAQ9N,OAAO,KACjCC,KAAK,QAAS,QACdA,KAAK,YAAawL,IACf,GAAI5R,KAAKe,eAAgB,CACrB,MAAO6G,EAAGC,GAAK7H,KAAK2T,YAAYG,EAAOlL,IAAM,EAAGkL,EAAOjL,IAAM,GAC7D,MAAO,aAAajB,KAAKC,IAC7B,CACI,MAAO,aAAaiM,EAAOjL,MAAMiL,EAAOlL,QAG/CnB,GAAG,QAAS,CAACC,EAAOkK,IAAM5R,KAAKkU,YAAYxM,EAAOkK,IAGvDoC,EAAU7N,OAAO,UACZC,KAAK,QAAS,eACdA,KAAK,IAAK,MACV6B,MAAM,UAAajI,KAAKmU,aAAavC,IACrC3J,MAAM,SAAU2J,GAAK5R,KAAKoU,mBAAmBxC,IAC7C3J,MAAM,eAAgB,GACtBR,GAAG,YAAa,CAACC,EAAOkK,IAAM5R,KAAKqU,YAAY3M,EAAOkK,IACtDnK,GAAG,WAAY,IAAMzH,KAAKsU,eAG/BN,EAAU7N,OAAO,QACZC,KAAK,QAAS,cACdA,KAAK,KAAM,SACXA,KAAK,IAAKwL,GACH5R,KAAKe,eAEE,EAGA6Q,EAAE1K,UAAY0K,EAAE1E,WAAY,GAAM,IAGhD9G,KAAK,cAAewL,GACb5R,KAAKe,eACE,QAGA6Q,EAAE1K,UAAY0K,EAAE1E,UAAY,MAAQ,SAGlDwG,KAAK9B,IAEF,MACMtJ,EAAOsJ,EAAEvG,KAAK/C,MAAQ,GAC5B,OAAOA,EAAKnB,OAFM,GAGXmB,EAAK6D,UAAU,EAAGoI,IAAiB,MAAQjM,IAErDL,MAAM,eAAgB,MACtBA,MAAM,YAAa,QACnBA,MAAM,cAAe,qEACrBA,MAAM,cAAe,0EAG1B+L,EAAU7N,OAAO,QACZC,KAAK,QAAS,aACdA,KAAK,KAAM,SACXA,KAAK,IAAK,GACVA,KAAK,cAAe,UACpBsN,KAAK9B,GAAK5R,KAAKwU,YAAY5C,IAC3B3J,MAAM,YAAa,QACnBA,MAAM,OAAQ,SAGnB,MAAMwM,EAAaT,EAAUU,MAAM7O,GAEnC4O,EAAWE,aACNhT,SAAS3B,KAAK2B,UACdyE,KAAK,YAAawL,IACf,GAAI5R,KAAKe,eAAgB,CACrB,MAAO6G,EAAGC,GAAK7H,KAAK2T,YAAY/B,EAAEhK,EAAGgK,EAAE/J,GACvC,MAAO,aAAaD,KAAKC,IAC7B,CACI,MAAO,aAAa+J,EAAE/J,KAAK+J,EAAEhK,OAIzC6M,EAAW9O,OAAO,sBACbS,KAAK,IAAK,GACV6B,MAAM,OAAQ2J,GAAK5R,KAAKmU,aAAavC,IACrC3J,MAAM,SAAU2J,GAAK5R,KAAKoU,mBAAmBxC,IAC7CxL,KAAK,SAAU,WAGpB,MAAMwO,EAAW5U,KAAKe,eACtB0T,EAAW9O,OAAO,mBACbsC,MAAM,eAAgB,GACtBA,MAAM,OAAQ,QACd4M,KAAK,SAASjD,GACX,MAAMkD,EAAYpP,GAAGC,OAAO3F,MAE5B,GAAI4U,EAAU,CAEV,MAAMG,EAAe,IAANnD,EAAEhK,EAAUpG,KAAKiF,GAAM,GAGnBsO,EAAQ,IAAMA,GAAQ,GAKrCD,EACK1O,KAAK,YAAa,UAAU2O,EAAQ,QACpC3O,KAAK,KAAK,IACVA,KAAK,cAAe,OACpBA,KAAK,KAAM,SAGhB0O,EACK1O,KAAK,YAAa,UAAU2O,MAC5B3O,KAAK,IAAK,IACVA,KAAK,cAAe,SACpBA,KAAK,KAAM,QAExB,MAEI0O,EACK1O,KAAK,YAAa,MAClBA,KAAK,IAAKwL,EAAE1K,UAAY0K,EAAE1E,WAAY,GAAM,IAC5C9G,KAAK,cAAewL,EAAE1K,UAAY0K,EAAE1E,UAAY,MAAQ,SACxD9G,KAAK,KAAM,QAExB,GAGJ,MAAM4O,EAAWnP,EAAKoP,OAAON,aACxBhT,SAAS3B,KAAK2B,UACdyE,KAAK,YAAawL,IACf,GAAI5R,KAAKe,eAAgB,CACrB,MAAO6G,EAAGC,GAAK7H,KAAK2T,YAAYG,EAAOlM,EAAGkM,EAAOjM,GACjD,MAAO,aAAaD,KAAKC,IAC7B,CACI,MAAO,aAAaiM,EAAOjM,KAAKiM,EAAOlM,OAG9CrC,SAELyP,EAASrP,OAAO,UACXS,KAAK,IAAK,MAEf4O,EAASrP,OAAO,mBACXsC,MAAM,eAAgB,MAE3B+M,EAASrP,OAAO,kBACXsC,MAAM,eAAgB,MAG3B,MAAMiN,EAAOlV,KAAKM,UAAUsF,UAAU,aACjCyF,KAAK0I,EAAOnC,GAAKA,EAAExM,IAGN8P,EAAKjB,QAAQkB,OAAO,OAAQ,KACzC/O,KAAK,QAAS,QACdA,KAAK,IAAKwL,IACP,MAAMwD,EAAI,CAACxN,EAAGkM,EAAOlL,GAAIf,EAAGiM,EAAOjL,IACnC,OAAO7I,KAAKe,eACRf,KAAKqV,eAAeD,EAAGA,GACvBpV,KAAKsV,SAASF,EAAGA,KAExBnN,MAAM,OAAQ,QACdA,MAAM,SAAU,QAChBA,MAAM,eAAgB,GAGEyM,MAAMQ,GAExBP,aACNhT,SAAS3B,KAAK2B,UACdyE,KAAK,IAAKwL,GAAK5R,KAAKe,eACjBf,KAAKqV,eAAezD,EAAGA,EAAE/K,QACzB7G,KAAKsV,SAAS1D,EAAGA,EAAE/K,SAG3BqO,EAAKD,OAAON,aACPhT,SAAS3B,KAAK2B,UACdyE,KAAK,IAAKwL,IACP,MAAMwD,EAAI,CAACxN,EAAGkM,EAAOlM,EAAGC,EAAGiM,EAAOjM,GAClC,OAAO7H,KAAKe,eACRf,KAAKqV,eAAeD,EAAGA,GACvBpV,KAAKsV,SAASF,EAAGA,KAExB7P,SAGLhF,EAAMmJ,QAAQkI,IACVA,EAAEhJ,GAAKgJ,EAAEhK,EACTgK,EAAE/I,GAAK+I,EAAE/J,GAEjB,CAKA,YAAA0N,CAAa3D,GACT,IAAK5R,KAAKE,MAAQF,KAAKoC,KAAM,OAG7B,MAAMoT,EAAmB9P,GAAG+P,cAAczV,KAAKE,IAAI2F,QAE7C6P,EAAcF,EAAiB1N,EAAI,EAAI,EAAI0N,EAAiB1N,EAG5D6N,EAAiB3V,KAAKgB,OAAOI,KAAO,IACpCwU,EAAiB5V,KAAKsB,OAAS,EAG/BsG,EAAI+N,EAAiB/D,EAAE/J,EAAI6N,EAAc1V,KAAKqB,MAAQ,EACtDwG,EAAI+N,EAAiBhE,EAAEhK,EAAI8N,EAAc1V,KAAKsB,OAAS,EAE7DtB,KAAKE,IAAIyU,aACJhT,SAAS,KACToG,KACG/H,KAAKoC,KAAKuF,UACVjC,GAAGmQ,aACEC,UAAUlO,EAAGC,GACbkO,MAAML,GAEvB,CAKA,kBAAAM,CAAmBpE,GACf,IAAK5R,KAAKE,MAAQF,KAAKoC,KAAM,OAG7B,MAAOwF,EAAGC,GAAK7H,KAAK2T,YAAY/B,EAAEhK,EAAGgK,EAAE/J,GAGjC2N,EAAmB9P,GAAG+P,cAAczV,KAAKE,IAAI2F,QAE7C6P,EAAcF,EAAiB1N,EAAI,EAAI,EAAI0N,EAAiB1N,EAS5DmO,EANUjW,KAAKqB,MAAQ,EAMHuG,EAAI8N,EACxBQ,EANUlW,KAAKsB,OAAS,EAMJuG,EAAI6N,EAG9B1V,KAAKE,IAAIyU,aACJhT,SAAS,KACToG,KACG/H,KAAKoC,KAAKuF,UACVjC,GAAGmQ,aACEC,UAAUG,EAASC,GACnBH,MAAML,GAEvB,CAKA,mBAAAS,CAAoBvE,GAGhB,MAAMwE,EAAapW,KAAKM,UAAUsF,UAAU,sBAC5CwQ,EACKC,QAAQ,UAAU,GAClBA,QAAQ,kBAAkB,GAG/BD,EACKzB,aACAhT,SAAS,KACTyE,KAAK,IAAK,GACV6B,MAAM,SAAU,MAChBA,MAAM,eAAgB,MACtBA,MAAM,UAAW,MAGtBjI,KAAKM,UAAUsF,UAAU,mBACpBqC,MAAM,cAAe,UACrBA,MAAM,YAAa,QAIxB,MAAMqO,EAAmBtW,KAAKM,UAAUsF,UAAU,UAC7CqI,OAAOpI,GAAQA,IAAS+L,GACxBjM,OAAO,sBAGZ2Q,EAAiBD,QAAQ,UAAU,GAGnCC,EACK3B,aACAhT,SAAS,KACTyE,KAAK,IAAK,IACV6B,MAAM,SAAU,WAChBA,MAAM,eAAgB,GACtBA,MAAM,SAAU,iDAGrBjI,KAAKM,UAAUsF,UAAU,UACpBqI,OAAOpI,GAAQA,IAAS+L,GACxBjM,OAAO,mBACPsC,MAAM,cAAe,QACrBA,MAAM,YAAa,QAGxBjI,KAAKqC,WAAauP,CACtB,CAKA,eAAA2E,CAAgB3E,GAEZ,MAAM/L,EAAO7F,KAAKM,UAAUsF,UAAU,UACjCqI,OAAOpI,GAAQA,IAAS+L,GACxBjM,OAAO,sBAGZ3F,KAAKsC,aAAamD,IAAImM,EAAEvG,KAAK9C,MAG7B1C,EAAKwQ,QAAQ,iBAAiB,GAC9BxQ,EAAKoC,MAAM,OAAQ,WAGnB,MAAMuO,EAAiB,KACdxW,KAAKsC,aAAakK,IAAIoF,EAAEvG,KAAK9C,OAElC1C,EAAK8O,aACAhT,SAAS,KACTyE,KAAK,IAAK,IACV6B,MAAM,UAAW,IACjB0M,aACAhT,SAAS,KACTyE,KAAK,IAAK,IACV6B,MAAM,UAAW,GACjBR,GAAG,MAAO,KACHzH,KAAKsC,aAAakK,IAAIoF,EAAEvG,KAAK9C,OAC7BiO,OAKhBA,GACJ,CAKA,kBAAA/J,CAAmBmF,GAEf5R,KAAKsC,aAAamU,OAAO7E,EAAEvG,KAAK9C,MAGhC,MAAM1C,EAAO7F,KAAKM,UAAUsF,UAAU,UACjCqI,OAAOpI,GAAQA,IAAS+L,GACxBjM,OAAO,sBAGZE,EAAKwQ,QAAQ,iBAAiB,GAG9BxQ,EAAK6Q,YACA/B,aACAhT,SAAS,KACTyE,KAAK,IAAKpG,KAAKqC,aAAeuP,EAAI,GAAK,GACvC3J,MAAM,UAAW,GACjBA,MAAM,OAAQ2J,GAAK5R,KAAKmU,aAAavC,GAC9C,CAKA,cAAA+E,CAAe/E,GACX,IAAKA,EAAE/K,OAAQ,OAGf,MAIM+P,EAJa5W,KAAKM,UAAUsF,UAAU,UACvCqI,OAAOpI,GAAQA,IAAS+L,EAAE/K,QAGClB,OAAO,sBAQvC,GAPAiR,EAAaP,QAAQ,kBAAkB,GACvCO,EACK3O,MAAM,SAAU,WAChBA,MAAM,eAAgB,GACtBA,MAAM,UAAW,IAGlBjI,KAAKe,gBAAkB6Q,EAAE/K,OAAQ,CAEjC,MAAMtG,EAAQ,CAACqR,EAAGA,EAAE/K,QAChB+K,EAAE1K,SAAU3G,EAAMqJ,QAAQgI,EAAE1K,UACvB0K,EAAE1E,WAAW3M,EAAMqJ,QAAQgI,EAAE1E,WAEtC,MAAM2J,EAAStW,EAAMmM,IAAIoK,GAAKA,EAAElP,GAC1BmP,EAAQxW,EAAMmM,IAAIoK,GAAKA,EAAEjP,GAEzBmP,EAAWxV,KAAKC,OAAOoV,GACvBI,EAAWzV,KAAKuF,OAAO8P,GACvBK,EAAY1V,KAAKuF,OAAOgQ,GAGxBI,EAAYF,EAAWD,EACvBjB,EAAQvU,KAAKC,IACf0V,EAAY,EAAe,EAAV3V,KAAKiF,IAAuB,EAAZ0Q,GAAiB,IAClDnX,KAAKqB,OAAS,EAAI6V,GAClB,KAIEE,GAAeJ,EAAWC,GAAY,EACtCI,EAAeH,EAAY,EAC3B7Q,EAAUgR,EAAe7V,KAAKoS,IAAIwD,EAAc5V,KAAKiF,GAAK,GAC1DH,EAAU+Q,EAAe7V,KAAKqS,IAAIuD,EAAc5V,KAAKiF,GAAK,GAEhEzG,KAAKE,IAAIyU,aACJhT,SAAS,KACToG,KACG/H,KAAKoC,KAAKuF,UACVjC,GAAGmQ,aACEC,UAAU9V,KAAKqB,MAAQ,EAAIgF,EAAU0P,EAAO/V,KAAKsB,OAAS,EAAIgF,EAAUyP,GACxEA,MAAMA,GAEvB,CACJ,CAKA,WAAA7B,CAAYxM,EAAOkK,GAIf,GAAIlK,EACA,IACyC,mBAA1BA,EAAM4P,iBACb5P,EAAM4P,iBAGd,OAAS1U,GACLD,QAAQC,MAAM,4CAA6CA,EAC/D,CAKJ,IAAKgP,EAED,YADAjP,QAAQC,MAAM,0DAIlB,IAAKgP,EAAEvG,KAEH,YADA1I,QAAQC,MAAM,+DAWlB,IACQ5C,KAAKe,eACkC,mBAA5Bf,KAAKgW,mBACZhW,KAAKgW,mBAAmBpE,GAExBjP,QAAQC,MAAM,oDAGe,mBAAtB5C,KAAKuV,aACZvV,KAAKuV,aAAa3D,GAElBjP,QAAQC,MAAM,6CAG1B,OAASA,GACLD,QAAQC,MAAM,qCAAsCA,EAAOA,EAAM2U,MACrE,CAIA,IAC4C,mBAA7BvX,KAAKmW,oBACZnW,KAAKmW,oBAAoBvE,GAEzBjP,QAAQC,MAAM,oDAEtB,OAASA,GACLD,QAAQC,MAAM,+CAAgDA,EAAOA,EAAM2U,MAC/E,CAIA,IACuC,mBAAxBvX,KAAK2W,eACZ3W,KAAK2W,eAAe/E,GAEpBjP,QAAQC,MAAM,+CAEtB,OAASA,GACLD,QAAQC,MAAM,0CAA2CA,EAAOA,EAAM2U,MAC1E,CAKA,GAAoB,cAAhB3F,EAAEvG,KAAK7C,OAAyBoJ,EAAEvG,KAAK5C,OACvC,IACwC,mBAAzBzI,KAAKuW,gBACZvW,KAAKuW,gBAAgB3E,GAErBjP,QAAQC,MAAM,gDAEtB,OAASA,GACLD,QAAQC,MAAM,2CAA4CA,EAAOA,EAAM2U,MAC3E,CASJ,MAAM/N,EAAoB,GACP/G,SAASgH,iBAAiB,8BAClCC,QAAQC,IACfH,EAAkBI,KAAKD,EAAG5F,SAI9B,MAAMyT,EAAwB/U,SAASC,eAAe,mBAChDmH,EAAiB2N,GAAuBzT,OAAS,GAOvD,GAAoB,cAAhB6N,EAAEvG,KAAK7C,MAAyBoJ,EAAEvG,KAAK5C,OA6B3C,GAEyB,SAAhBmJ,EAAEvG,KAAK7C,MAAoBoJ,EAAEvG,KAAKyB,SA6B3C,GAEyB,cAAhB8E,EAAEvG,KAAK7C,OAA0C,IAAlBoJ,EAAEvG,KAAK5C,OAAiB,CAE5D,GAAImJ,EAAE1K,SAEF0K,EAAE1E,UAAY0E,EAAE1K,SAChB0K,EAAE1K,SAAW,KACb0K,EAAEvG,KAAK3C,UAAW,OACtB,GAAWkJ,EAAE1E,UAET0E,EAAE1K,SAAW0K,EAAE1E,UACf0E,EAAE1E,UAAY,KACd0E,EAAEvG,KAAK3C,UAAW,OACtB,GAAWkJ,EAAEvG,KAAKnE,UAAY0K,EAAEvG,KAAKnE,SAASC,OAAS,EAAG,CAEtDnH,KAAKI,KAAOsF,GAAGiD,UAAU3I,KAAKG,UAC9B,MAAM8M,EAAgBjN,KAAKuM,iBAAiBqF,EAAEvG,KAAK9C,MAC/C0E,IACAA,EAAc/F,SAAW+F,EAAcC,WAAaD,EAAc/F,SAClE+F,EAAcC,UAAY,KAC1BD,EAAc5B,KAAK3C,UAAW,EAEtC,CACA1I,KAAKwD,OAAOxD,KAAKI,KACrB,MAESwR,EAAE1K,UAAY0K,EAAE1E,aACjB0E,EAAE1K,UACF0K,EAAE1E,UAAY0E,EAAE1K,SAChB0K,EAAE1K,SAAW,KACb0K,EAAEvG,KAAK3C,UAAW,IAElBkJ,EAAE1K,SAAW0K,EAAE1E,UACf0E,EAAE1E,UAAY,KACd0E,EAAEvG,KAAK3C,UAAW,GAEtB1I,KAAKwD,OAAOoO,QAlEqC,CAEjD,MAAM6F,EAAezX,KAAKyN,eAAemE,EAAEvG,KAAK9C,MAChD,IAAKiB,EAAkBmG,SAAS8H,IAAkC,YAAjBA,EAE7C,YADAzX,KAAKqJ,iBAAiB,YAAYuI,EAAEvG,KAAK/C,UAAUmP,iBAA6B,WAKpFzX,KAAKuW,gBAAgB3E,GAGrBA,EAAEvG,KAAKyB,SAAW,UAGlB,MAAM4K,EAAW1X,KAAK2X,eAAe/F,EAAEvG,KAAK9C,MAG5C0I,WAAW,KAEHjR,KAAKkC,SACLlC,KAAKkC,OAAOkI,KAAK,oBAAqB,CAClC7B,KAAMmP,IAGV1X,KAAKuJ,iBAAiB,aAAaqI,EAAEvG,KAAK/C,UAAW,QACrDtI,KAAKqJ,iBAAiB,cAAcuI,EAAEvG,KAAK/C,OAAQ,UAExD,IACP,KA5DmD,CAE/CsJ,EAAEvG,KAAK5C,OAAS,UAGhB,MAAMiP,EAAW1X,KAAK2X,eAAe/F,EAAEvG,KAAK9C,MAQ5C0I,WAAW,KAGHjR,KAAKkC,SACLlC,KAAKkC,OAAOkI,KAAK,0BAA2B,CACxC7B,KAAMmP,EACN1Q,MAAO,EACP+C,UAAWP,EACXQ,gBAAiBH,IAGrB7J,KAAKuJ,iBAAiB,WAAWqI,EAAEvG,KAAK/C,UAAW,QACnDtI,KAAKqJ,iBAAiB,sBAAsBuI,EAAEvG,KAAK/C,OAAQ,UAGhE,IACP,CAyEAtI,KAAKiC,aAAe2P,EACpB,IACI5R,KAAK4X,cAAchG,EACvB,OAAShP,GACLD,QAAQC,MAAM,yCAA0CA,EAC5D,CAEJ,CAKA,cAAA+U,CAAepP,GAGX,GAFA5F,QAAQgL,IAAI,iCAAkCpF,IAEzCA,EAAM,OAAOA,EAGlB,GAAIA,EAAKY,WAAW,KAEhB,OADAxG,QAAQgL,IAAI,mCAAoCpF,GACzCA,EAIX,MAAMzF,EAAa9C,KAAK+C,sBAGxB,GAFAJ,QAAQgL,IAAI,yBAA0B7K,IAEjCA,EAED,OADAH,QAAQgL,IAAI,gDAAiDpF,GACtDA,EAIX,GAAa,MAATA,EAEA,OADA5F,QAAQgL,IAAI,iDAAkD7K,GACvDA,EAIX,GAAIyF,IAASzF,EAET,OADAH,QAAQgL,IAAI,gDAAiD7K,GACtDA,EAIX,MAAM+U,EAAS,GAAG/U,KAAcyF,IAAO6D,QAAQ,OAAQ,KAEvD,OADAzJ,QAAQgL,IAAI,0CAA2CkK,GAChDA,CACX,CAKA,aAAAD,CAAc/R,GAEV7F,KAAKM,UAAUsF,UAAU,sBACpBqC,MAAM,eAAgB,GACtBoO,QAAQ,YAAY,GAGzBrW,KAAKM,UAAUsF,UAAU,sBACpBqI,OAAO2D,GAAKA,IAAM/L,GAClBoC,MAAM,eAAgB,GACtBoO,QAAQ,YAAY,EAC7B,CAKA,QAAAf,CAASwC,EAAGlG,GACR,MAAO,KAAKkG,EAAEjQ,KAAKiQ,EAAElQ,yBACRkQ,EAAEjQ,EAAI+J,EAAE/J,GAAK,KAAKiQ,EAAElQ,0BACpBkQ,EAAEjQ,EAAI+J,EAAE/J,GAAK,KAAK+J,EAAEhK,yBACrBgK,EAAE/J,KAAK+J,EAAEhK,GACzB,CAKA,cAAAyN,CAAeyC,EAAGlG,GAId,OAHalM,GAAGqS,aACXhD,MAAMnD,GAAKA,EAAEhK,GACbrG,OAAOqQ,GAAKA,EAAE/J,EACZU,CAAK,CAACuL,OAAQgE,EAAGhU,OAAQ8N,GACpC,CAKA,YAAAuC,CAAavC,GACT,MAAMpJ,EAAOoJ,EAAEvG,KAAK7C,KACdoG,EAAagD,EAAEvG,KAAKuD,YAAc,EAalCoJ,EAVa,CACf5X,KAAQ,UACRyE,UAAa,UACb2K,KAAQ,UACRD,OAAU,UACVH,MAAS,UACTC,SAAY,UACZC,OAAU,WAGe9G,IAAS,UAGtC,OAAIoG,EAAa,GACNlJ,GAAGuS,MAAMD,GAAWE,OAAO,IAC3BtJ,EAAa,EACblJ,GAAGuS,MAAMD,GAAWE,OAAO,KAG/BF,CACX,CAKA,kBAAA5D,CAAmBxC,GACf,MAAsB,YAAlBA,EAAEvG,KAAK5C,QAA4C,YAApBmJ,EAAEvG,KAAKyB,SAC/B,UAES,cAAhB8E,EAAEvG,KAAK7C,MAAyBoJ,EAAEvG,KAAK5C,OAGvB,SAAhBmJ,EAAEvG,KAAK7C,MAAoBoJ,EAAEvG,KAAKyB,SAG/B9M,KAAKmU,aAAavC,GAFd,UAHA,SAMf,CAKA,WAAA4C,CAAY5C,GAUR,MATc,CACVxR,KAAQ,KACRyE,UAAa,KACb2K,KAAQ,KACRD,OAAU,KACVH,MAAS,IACTC,SAAY,IACZC,OAAU,KAEDsC,EAAEvG,KAAK7C,OAAS,GACjC,CAKA,WAAA6L,CAAY3M,EAAOkK,GACf,IAAK5R,KAAK8B,QAAS,OAEnB,MAAMqW,EAAO,GACbA,EAAKvO,KAAK,WAAWgI,EAAEvG,KAAK/C,iBAC5B6P,EAAKvO,KAAK,SAASgI,EAAEvG,KAAK7C,QAEtBoJ,EAAEvG,KAAKmC,UACP2K,EAAKvO,KAAK,aAAagI,EAAEvG,KAAKmC,YAE9BoE,EAAEvG,KAAKuD,YACPuJ,EAAKvO,KAAK,eAAegI,EAAEvG,KAAKuD,cAEhCgD,EAAEvG,KAAKvK,OACPqX,EAAKvO,KAAK,UAAUgI,EAAEvG,KAAKvK,SAE3B8Q,EAAEvG,KAAK9C,MACP4P,EAAKvO,KAAK,SAASgI,EAAEvG,KAAK9C,QAIV,cAAhBqJ,EAAEvG,KAAK7C,MAAyBoJ,EAAEvG,KAAK5C,OAEhB,SAAhBmJ,EAAEvG,KAAK7C,MAAoBoJ,EAAEvG,KAAKyB,UACzCqL,EAAKvO,KAAK,kCAFVuO,EAAKvO,KAAK,sCAKd5J,KAAK8B,QAAQ6S,aACRhT,SAAS,KACTsG,MAAM,UAAW,IAEtBjI,KAAK8B,QAAQsW,KAAKD,EAAKzJ,KAAK,SACvBzG,MAAM,OAASP,EAAM2Q,MAAQ,GAAM,MACnCpQ,MAAM,MAAQP,EAAM4Q,MAAQ,GAAM,KAC3C,CAKA,WAAAhE,GACStU,KAAK8B,SAEV9B,KAAK8B,QAAQ6S,aACRhT,SAAS,KACTsG,MAAM,UAAW,EAC1B,CAKA,UAAAjE,GACShE,KAAKI,OAGVJ,KAAKI,KAAKuR,cAAcjI,QAAQkI,IAC5BA,EAAEvG,KAAKkN,SAAU,EAGW,QAAxBvY,KAAK4B,gBACe,SAAhBgQ,EAAEvG,KAAK7C,MAAmBoJ,EAAEvG,KAAKmC,WAAaxN,KAAK4B,iBACnDgQ,EAAEvG,KAAKkN,SAAU,GAKrBvY,KAAK6B,aACA+P,EAAEvG,KAAK/C,KAAKpE,cAAcyL,SAAS3P,KAAK6B,cACzC+P,EAAEvG,KAAKkN,SAAU,MAM7BvY,KAAKwD,OAAOxD,KAAKI,MACrB,CAKA,SAAAgE,GACI,IAAKpE,KAAKI,KAAM,OAGhB,MAAMoY,EAAmB3S,IACjBA,EAAKqH,YACLrH,EAAKqB,SAAWrB,EAAKqH,UACrBrH,EAAKqH,UAAY,MAEjBrH,EAAKqB,UACLrB,EAAKqB,SAASwC,QAAQ8O,IAI9BA,EAAgBxY,KAAKI,MACrBJ,KAAKwD,OAAOxD,KAAKI,MACjBJ,KAAKqJ,iBAAiB,qBAAsB,OAChD,CAKA,WAAA/E,GACI,IAAKtE,KAAKI,KAAM,OAGhB,MAAMqY,EAAqB5S,IACnBA,EAAKqB,WACLrB,EAAKqH,UAAYrH,EAAKqB,SACtBrB,EAAKqB,SAAW,MAEhBrB,EAAKqH,WACLrH,EAAKqH,UAAUxD,QAAQ+O,IAI/BzY,KAAKI,KAAK8G,UAAUwC,QAAQ+O,GAC5BzY,KAAKwD,OAAOxD,KAAKI,MACjBJ,KAAKqJ,iBAAiB,sBAAuB,OACjD,CAKA,SAAA7E,GACSxE,KAAKE,KAAQF,KAAKoC,OAGvBpC,KAAKE,IAAIyU,aACJhT,SAAS,KACToG,KACG/H,KAAKoC,KAAKuF,UACVjC,GAAGmQ,cAGX7V,KAAKqJ,iBAAiB,aAAc,QACxC,CAKA,WAAAqP,CAAY7S,GACR,IAAK7F,KAAKE,MAAQF,KAAKoC,OAASyD,EAAM,OAGtC,MAAM8L,EAAc9L,EAAK8L,YAAc9L,EAAK8L,cAAgB,CAAC9L,GAE7D,GAAI7F,KAAKe,eAAgB,CAErB,MAAM8V,EAASlF,EAAYjF,IAAIkF,GAAKA,EAAEhK,GAChCmP,EAAQpF,EAAYjF,IAAIkF,GAAKA,EAAE/J,GAE/BmP,EAAWxV,KAAKC,OAAOoV,GACvBI,EAAWzV,KAAKuF,OAAO8P,GACvB8B,EAAYnX,KAAKC,OAAOsV,GACxBG,EAAY1V,KAAKuF,OAAOgQ,GAGxBK,GAAeJ,EAAWC,GAAY,EACtCI,GAAgBsB,EAAYzB,GAAa,EAGzC7Q,EAAUgR,EAAe7V,KAAKoS,IAAIwD,EAAc5V,KAAKiF,GAAK,GAC1DH,EAAU+Q,EAAe7V,KAAKqS,IAAIuD,EAAc5V,KAAKiF,GAAK,GAG1D0Q,EAAYF,EAAWD,EACvB4B,EAAa1B,EAAYyB,EAI/B,IAAI5C,EAAQ,EACZ,GAAIoB,EAAY,GAAKyB,EAAa,EAAG,CAEjC,MAAMC,EAAwB,EAAVrX,KAAKiF,GAAS0Q,EAC5B9P,EAAerH,KAAKuB,OAASqX,EACnC7C,EAAQvU,KAAKC,IAAIoX,EAAaxR,EAAc,GAC5C0O,EAAQvU,KAAKuF,IAAIgP,EAAO,EAC5B,CAGA/V,KAAKE,IAAIyU,aACJhT,SAAS,KACToG,KACG/H,KAAKoC,KAAKuF,UACVjC,GAAGmQ,aACEC,UAAU9V,KAAKqB,MAAM,EAAIgF,EAAU0P,EAAO/V,KAAKsB,OAAO,EAAIgF,EAAUyP,GACpEA,MAAMA,GAGvB,KAAO,CAEH,MAAM+C,EAAUnH,EAAYjF,IAAIkF,GAAKA,EAAEhK,GACjCmR,EAAUpH,EAAYjF,IAAIkF,GAAKA,EAAE/J,GAEjCmR,EAAOxX,KAAKC,OAAOqX,GACnBG,EAAOzX,KAAKuF,OAAO+R,GACnBI,EAAO1X,KAAKC,OAAOsX,GACnBI,EAAO3X,KAAKuF,OAAOgS,GAGnB1S,GAAW2S,EAAOC,GAAQ,EAC1B3S,GAAW4S,EAAOC,GAAQ,EAG1B9X,EAAQ4X,EAAOD,EACf1X,EAAS6X,EAAOD,EAGhBE,EAAU,IAChB,IAAIrD,EAAQ,EACZ,GAAI1U,EAAQ,GAAKC,EAAS,EAAG,CACzB,MAAM+X,GAAUrZ,KAAKqB,MAAQ+X,GAAW/X,EAClCiY,GAAUtZ,KAAKsB,OAAS8X,GAAW9X,EACzCyU,EAAQvU,KAAKC,IAAI4X,EAAQC,EAAQ,KACjCvD,EAAQvU,KAAKuF,IAAIgP,EAAO,GAC5B,CAGA/V,KAAKE,IAAIyU,aACJhT,SAAS,KACToG,KACG/H,KAAKoC,KAAKuF,UACVjC,GAAGmQ,aACEC,UAAU9V,KAAKqB,MAAM,EAAIgF,EAAU0P,EAAO/V,KAAKsB,OAAO,EAAIgF,EAAUyP,GACpEA,MAAMA,GAEvB,CAGA,MAAMxN,EAAOvI,KAAKuZ,YAAY1T,GAC9B7F,KAAKuJ,iBAAiB,YAAYhB,IAAQ,OAC9C,CAKA,WAAAgR,CAAY1T,GACR,MAAM0C,EAAO,GACb,IAAIiR,EAAU3T,EACd,KAAO2T,GACCA,EAAQnO,MAAQmO,EAAQnO,KAAK/C,MAC7BC,EAAKqI,QAAQ4I,EAAQnO,KAAK/C,MAE9BkR,EAAUA,EAAQ3S,OAEtB,OAAO0B,EAAKmG,KAAK,MACrB,CAKA,YAAAhK,GACI,MAAM+U,EAAShX,SAASC,eAAe,eACnC+W,IAC6B,SAAzBA,EAAOxR,MAAM2C,QACb6O,EAAOxR,MAAM2C,QAAU,QAEvB6O,EAAOxR,MAAM2C,QAAU,OAGnC,CAKA,mBAAA7H,GAEI,GAAI+F,OAAOE,WAAaF,OAAOE,UAAU0Q,wBACrC,OAAO5Q,OAAOE,UAAU0Q,wBAAwBC,uBAIpD,MAAMC,EAAiBnX,SAASC,eAAe,oBAC/C,GAAIkX,EAAgB,CAChB,MAAMC,EAAWD,EAAe7I,YAAY+I,OAC5C,GAAID,GAAyB,eAAbA,GAA0C,iBAAbA,EACzC,OAAOA,CAEf,CAEA,OAAO,IACX,CAKA,6BAAA7W,GACI,MAAM/C,EAAYwC,SAASC,eAAe,uBAC1C,IAAKzC,EAAW,OAGhBD,KAAK2D,kCAGL3D,KAAKwF,cAGL,MAAMuU,EAAatX,SAAS0C,cAAc,OAC1C4U,EAAW3U,GAAK,yBAChB2U,EAAWpP,UAAY,yBACvBoP,EAAW1U,UAAY,qVAQvB0U,EAAW9R,MAAM+R,QAAU,iMAQ3B,MAAMC,EAAcF,EAAW7J,cAAc,iBACzC+J,IACAA,EAAYhS,MAAM+R,QAAU,uDAGhC,MAAME,EAAKH,EAAW7J,cAAc,MAChCgK,IACAA,EAAGjS,MAAM+R,QAAU,iDAGvB,MAAM9L,EAAI6L,EAAW7J,cAAc,KAC/BhC,IACAA,EAAEjG,MAAM+R,QAAU,iDAGtB,MAAMG,EAASJ,EAAW7J,cAAc,UACpCiK,IACAA,EAAOlS,MAAM+R,QAAU,oVAWvBG,EAAOvW,iBAAiB,aAAc,KAClCuW,EAAOlS,MAAMmS,WAAa,YAE9BD,EAAOvW,iBAAiB,aAAc,KAClCuW,EAAOlS,MAAMmS,WAAa,YAE9BD,EAAOvW,iBAAiB,QAAS,KAE7B,MAAMyW,EAAe5X,SAASC,eAAe,kBACzC2X,EACAA,EAAaC,QACNxR,OAAOE,WAAaF,OAAOE,UAAU0Q,yBAC5C5Q,OAAOE,UAAU0Q,wBAAwBa,yBAKrDta,EAAUqF,YAAYyU,GAGtB/Z,KAAKuJ,iBAAiB,oCAAqC,UAC/D,CAKA,+BAAA5F,GACI,MAAMmH,EAAUrI,SAASC,eAAe,0BACpCoI,GACAA,EAAQvF,QAEhB,CAKA,UAAAiV,GACI,MAAMC,EAAa,CACfxP,WAAA,IAAef,MAAO2G,cACtB6J,iBAAkB1a,KAAK+C,sBACvBtC,MAAOT,KAAKS,MACZ6G,KAAMtH,KAAKG,UAGTwa,EAAO,IAAIC,KAAK,CAACC,KAAKC,UAAUL,EAAY,KAAM,IACnC,CAACjS,KAAM,qBACtBuS,EAAMC,IAAIC,gBAAgBN,GAC1BzF,EAAOzS,SAAS0C,cAAc,KACpC+P,EAAKgG,KAAOH,EACZ7F,EAAKiG,SAAW,aAAajR,KAAKC,aAClC+K,EAAKoF,QACLU,IAAII,gBAAgBL,GAEpB/a,KAAKqJ,iBAAiB,6BAA8B,UACxD,CAKA,oBAAAjG,CAAqB0H,EAAStC,EAAO,QACjC,MAAM6S,EAAa5Y,SAASC,eAAe,sBAC3C,GAAI2Y,EAAY,CAEZ,MAAMC,EAAgB,SAAT9S,GAAmBsC,EAAQ6E,SAAS,OAAS,KAAO,GACjE0L,EAAWhW,UAAY,GAAGiW,IAAOxQ,IACjCuQ,EAAW1Q,UAAY,cAAcnC,GACzC,CACJ,CAKA,YAAA+S,CAAazQ,EAAStC,EAAO,QACzB,MAAMgT,EAAS/Y,SAASC,eAAe,oBACnC8Y,IACAA,EAAOzK,YAAcjG,EACrB0Q,EAAO7Q,UAAY,iBAAiBnC,IAGvB,UAATA,GACAyI,WAAW,KACPuK,EAAOvT,MAAMwT,QAAU,IACvBxK,WAAW,KACPuK,EAAOvT,MAAMwT,QAAU,IACvBD,EAAOzK,YAAc,IACtB,MACJ,KAGf,EAIJjI,OAAOhJ,SAAWA,EAGlB2C,SAASmB,iBAAiB,mBAAoB,KAEtCnB,SAASC,eAAe,yBACxBoG,OAAO4S,SAAW,IAAI5b,EAGtB2C,SAASmB,iBAAiB,QAAUC,IAC5BA,EAAEC,OAAO6X,QAAQ,sBACjB1K,WAAW,KACHnI,OAAO4S,WAAa5S,OAAO4S,SAAS3Z,YACpC+G,OAAO4S,SAASlZ,aACTsG,OAAO4S,UACd5S,OAAO4S,SAAShY,qBAErB"}