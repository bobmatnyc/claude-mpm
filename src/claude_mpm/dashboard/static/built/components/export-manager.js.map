{"version":3,"file":"export-manager.js","sources":["../../js/components/export-manager.js"],"sourcesContent":["/**\n * Export Manager Module\n *\n * Handles export functionality and utility functions for the dashboard.\n * Provides data export capabilities and common utility functions used across modules.\n *\n * WHY: Extracted from main dashboard to centralize export logic and utility functions\n * that don't belong to specific functional areas. This provides a clean place for\n * shared utilities while keeping export logic organized and testable.\n *\n * DESIGN DECISION: Combines export functionality with general utilities to avoid\n * creating too many small modules while keeping related functionality together.\n * Provides both data export and UI utility functions.\n */\nclass ExportManager {\n    constructor(eventViewer) {\n        this.eventViewer = eventViewer;\n        this.setupEventHandlers();\n\n        console.log('Export manager initialized');\n    }\n\n    /**\n     * Set up event handlers for export functionality\n     */\n    setupEventHandlers() {\n        const clearBtn = document.querySelector('button[onclick=\"clearEvents()\"]');\n        const exportBtn = document.getElementById('export-btn');\n\n        if (clearBtn) {\n            clearBtn.addEventListener('click', () => {\n                this.clearEvents();\n            });\n        }\n\n        if (exportBtn) {\n            exportBtn.addEventListener('click', () => {\n                this.exportEvents();\n            });\n        }\n    }\n\n    /**\n     * Export current events to file\n     * Delegates to the event viewer's export functionality\n     */\n    exportEvents() {\n        if (this.eventViewer) {\n            this.eventViewer.exportEvents();\n        } else {\n            console.error('Cannot export events: EventViewer not available');\n        }\n    }\n\n    /**\n     * Clear all events and reset dashboard state\n     * This is a coordinated clear that notifies all relevant modules\n     */\n    clearEvents() {\n        // Dispatch event to notify other modules\n        document.dispatchEvent(new CustomEvent('eventsClearing'));\n\n        // Clear events from event viewer\n        if (this.eventViewer) {\n            this.eventViewer.clearEvents();\n        }\n\n        // Dispatch event to notify clearing is complete\n        document.dispatchEvent(new CustomEvent('eventsCleared'));\n\n        console.log('Events cleared');\n    }\n\n    /**\n     * Export events with custom filtering\n     * @param {Object} options - Export options\n     * @param {string} options.format - Export format ('json', 'csv', 'txt')\n     * @param {Array} options.events - Events to export (optional, uses all if not provided)\n     * @param {string} options.filename - Custom filename (optional)\n     */\n    exportEventsCustom(options = {}) {\n        const {\n            format = 'json',\n            events = null,\n            filename = null\n        } = options;\n\n        const eventsToExport = events || (this.eventViewer ? this.eventViewer.events : []);\n\n        if (eventsToExport.length === 0) {\n            console.warn('No events to export');\n            return;\n        }\n\n        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n        const defaultFilename = `claude-mpm-events-${timestamp}`;\n        const exportFilename = filename || defaultFilename;\n\n        let content = '';\n        let mimeType = '';\n        let fileExtension = '';\n\n        switch (format.toLowerCase()) {\n            case 'json':\n                content = JSON.stringify(eventsToExport, null, 2);\n                mimeType = 'application/json';\n                fileExtension = '.json';\n                break;\n\n            case 'csv':\n                content = this.convertEventsToCSV(eventsToExport);\n                mimeType = 'text/csv';\n                fileExtension = '.csv';\n                break;\n\n            case 'txt':\n                content = this.convertEventsToText(eventsToExport);\n                mimeType = 'text/plain';\n                fileExtension = '.txt';\n                break;\n\n            default:\n                console.error('Unsupported export format:', format);\n                return;\n        }\n\n        this.downloadFile(content, exportFilename + fileExtension, mimeType);\n    }\n\n    /**\n     * Convert events to CSV format\n     * @param {Array} events - Events to convert\n     * @returns {string} - CSV content\n     */\n    convertEventsToCSV(events) {\n        if (events.length === 0) return '';\n\n        // Define CSV headers\n        const headers = ['timestamp', 'type', 'subtype', 'tool_name', 'agent_type', 'session_id', 'data'];\n\n        // Convert events to CSV rows\n        const rows = events.map(event => {\n            return [\n                event.timestamp || '',\n                event.type || '',\n                event.subtype || '',\n                event.tool_name || '',\n                event.agent_type || '',\n                event.session_id || '',\n                JSON.stringify(event.data || {}).replace(/\"/g, '\"\"') // Escape quotes for CSV\n            ];\n        });\n\n        // Combine headers and rows\n        const csvContent = [headers, ...rows]\n            .map(row => row.map(field => `\"${field}\"`).join(','))\n            .join('\\n');\n\n        return csvContent;\n    }\n\n    /**\n     * Convert events to readable text format\n     * @param {Array} events - Events to convert\n     * @returns {string} - Text content\n     */\n    convertEventsToText(events) {\n        if (events.length === 0) return 'No events to export.';\n\n        return events.map((event, index) => {\n            const timestamp = this.formatTimestamp(event.timestamp);\n            const type = event.type || 'Unknown';\n            const subtype = event.subtype ? ` (${event.subtype})` : '';\n            const toolName = event.tool_name ? ` - Tool: ${event.tool_name}` : '';\n            const agentType = event.agent_type ? ` - Agent: ${event.agent_type}` : '';\n\n            let content = `Event ${index + 1}: ${type}${subtype}${toolName}${agentType}\\n`;\n            content += `  Time: ${timestamp}\\n`;\n            content += `  Session: ${event.session_id || 'Unknown'}\\n`;\n\n            if (event.data && Object.keys(event.data).length > 0) {\n                content += `  Data: ${JSON.stringify(event.data, null, 2)}\\n`;\n            }\n\n            return content;\n        }).join('\\n' + '='.repeat(80) + '\\n');\n    }\n\n    /**\n     * Download file with given content\n     * @param {string} content - File content\n     * @param {string} filename - Filename\n     * @param {string} mimeType - MIME type\n     */\n    downloadFile(content, filename, mimeType) {\n        try {\n            const blob = new Blob([content], { type: mimeType });\n            const url = window.URL.createObjectURL(blob);\n\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = filename;\n            link.style.display = 'none';\n\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n\n            // Clean up the URL object\n            window.URL.revokeObjectURL(url);\n\n            console.log(`File exported: ${filename}`);\n        } catch (error) {\n            console.error('Failed to export file:', error);\n        }\n    }\n\n    // =================\n    // UTILITY FUNCTIONS\n    // =================\n\n    /**\n     * Format timestamp for display\n     * @param {string|number|Date} timestamp - Timestamp to format\n     * @returns {string} - Formatted timestamp\n     */\n    formatTimestamp(timestamp) {\n        if (!timestamp) return 'Unknown time';\n\n        try {\n            const date = new Date(timestamp);\n            if (isNaN(date.getTime())) {\n                return 'Invalid time';\n            }\n\n            return date.toLocaleTimeString('en-US', {\n                hour12: false,\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit'\n            });\n        } catch (error) {\n            console.error('Error formatting timestamp:', error);\n            return 'Error formatting time';\n        }\n    }\n\n    /**\n     * Format full timestamp with date for exports\n     * @param {string|number|Date} timestamp - Timestamp to format\n     * @returns {string} - Formatted full timestamp\n     */\n    formatFullTimestamp(timestamp) {\n        if (!timestamp) return 'Unknown time';\n\n        try {\n            const date = new Date(timestamp);\n            if (isNaN(date.getTime())) {\n                return 'Invalid time';\n            }\n\n            return date.toLocaleString('en-US', {\n                year: 'numeric',\n                month: '2-digit',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n                hour12: false\n            });\n        } catch (error) {\n            console.error('Error formatting full timestamp:', error);\n            return 'Error formatting time';\n        }\n    }\n\n    /**\n     * Scroll a list element to bottom\n     * @param {string} listId - ID of list element to scroll\n     */\n    scrollListToBottom(listId) {\n        console.log(`[DEBUG] scrollListToBottom called with listId: ${listId}`);\n\n        // Use setTimeout to ensure DOM updates are completed\n        setTimeout(() => {\n            const listElement = document.getElementById(listId);\n            console.log(`[DEBUG] Element found for ${listId}:`, listElement);\n\n            if (listElement) {\n                console.log(`[DEBUG] Scrolling ${listId} - scrollHeight: ${listElement.scrollHeight}, scrollTop before: ${listElement.scrollTop}`);\n                listElement.scrollTop = listElement.scrollHeight;\n                console.log(`[DEBUG] Scrolled ${listId} - scrollTop after: ${listElement.scrollTop}`);\n            } else {\n                console.warn(`[DEBUG] Element with ID '${listId}' not found for scrolling`);\n            }\n        }, 50); // Small delay to ensure content is rendered\n    }\n\n    /**\n     * Debounce function to limit function calls\n     * @param {Function} func - Function to debounce\n     * @param {number} wait - Wait time in milliseconds\n     * @returns {Function} - Debounced function\n     */\n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n\n    /**\n     * Throttle function to limit function calls\n     * @param {Function} func - Function to throttle\n     * @param {number} limit - Limit in milliseconds\n     * @returns {Function} - Throttled function\n     */\n    throttle(func, limit) {\n        let inThrottle;\n        return function (...args) {\n            if (!inThrottle) {\n                func.apply(this, args);\n                inThrottle = true;\n                setTimeout(() => inThrottle = false, limit);\n            }\n        };\n    }\n\n    /**\n     * Generate unique ID\n     * @returns {string} - Unique ID\n     */\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n    /**\n     * Deep clone an object\n     * @param {*} obj - Object to clone\n     * @returns {*} - Cloned object\n     */\n    deepClone(obj) {\n        if (obj === null || typeof obj !== 'object') return obj;\n        if (obj instanceof Date) return new Date(obj.getTime());\n        if (obj instanceof Array) return obj.map(item => this.deepClone(item));\n        if (typeof obj === 'object') {\n            const cloned = {};\n            for (const key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    cloned[key] = this.deepClone(obj[key]);\n                }\n            }\n            return cloned;\n        }\n        return obj;\n    }\n}\n// ES6 Module export\nexport { ExportManager };\nexport default ExportManager;\n"],"names":["ExportManager","constructor","eventViewer","this","setupEventHandlers","console","log","clearBtn","document","querySelector","exportBtn","getElementById","addEventListener","clearEvents","exportEvents","error","dispatchEvent","CustomEvent","exportEventsCustom","options","format","events","filename","eventsToExport","length","warn","timestamp","Date","toISOString","replace","exportFilename","content","mimeType","fileExtension","toLowerCase","JSON","stringify","convertEventsToCSV","convertEventsToText","downloadFile","map","event","type","subtype","tool_name","agent_type","session_id","data","row","field","join","index","formatTimestamp","Object","keys","repeat","blob","Blob","url","window","URL","createObjectURL","link","createElement","href","download","style","display","body","appendChild","click","removeChild","revokeObjectURL","date","isNaN","getTime","toLocaleTimeString","hour12","hour","minute","second","formatFullTimestamp","toLocaleString","year","month","day","scrollListToBottom","listId","setTimeout","listElement","scrollHeight","scrollTop","debounce","func","wait","timeout","args","clearTimeout","throttle","limit","inThrottle","apply","generateId","now","toString","Math","random","substr","deepClone","obj","Array","item","cloned","key","hasOwnProperty"],"mappings":"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"}