{"version":3,"file":"session-manager.js","sources":["../../js/components/session-manager.js"],"sourcesContent":["/**\n * Session Manager Component\n * Handles session selection and management\n * \n * WHY: Provides session filtering and management for the dashboard, allowing users\n * to view events from specific sessions or all sessions.\n * \n * BROWSER COMPATIBILITY: This component runs in the browser. All Node.js-specific\n * globals (process, require, etc.) have been removed. Uses browser-compatible\n * alternatives for path handling and defaults.\n * \n * FIX APPLIED: Removed process.cwd() reference that caused \"process is not defined\"\n * error in browser. Now uses window.location.pathname or hardcoded fallbacks.\n */\n\nclass SessionManager {\n    constructor(socketClient) {\n        this.socketClient = socketClient;\n        this.sessions = new Map();\n        this.currentSessionId = null;\n        this.selectedSessionId = '';\n\n        this.init();\n    }\n\n    /**\n     * Initialize the session manager\n     */\n    init() {\n        this.setupEventHandlers();\n        this.setupSocketListeners();\n        this.updateSessionSelect();\n    }\n\n    /**\n     * Setup event handlers for UI controls\n     */\n    setupEventHandlers() {\n        // Session selection dropdown\n        const sessionSelect = document.getElementById('session-select');\n        if (sessionSelect) {\n            sessionSelect.addEventListener('change', (e) => {\n                this.selectedSessionId = e.target.value;\n                this.onSessionFilterChanged();\n\n                // Load working directory for this session\n                if (window.dashboard && window.dashboard.loadWorkingDirectoryForSession) {\n                    window.dashboard.loadWorkingDirectoryForSession(e.target.value);\n                }\n            });\n        }\n\n        // Refresh sessions button\n        const refreshBtn = document.querySelector('button[onclick=\"refreshSessions()\"]');\n        if (refreshBtn) {\n            refreshBtn.addEventListener('click', () => {\n                this.refreshSessions();\n            });\n        }\n    }\n\n    /**\n     * Setup socket event listeners\n     */\n    setupSocketListeners() {\n        // Listen for socket event updates\n        this.socketClient.onEventUpdate((events, sessions) => {\n            // Log the sessions data to debug\n            console.log('[SESSION-MANAGER] Received sessions update:', sessions);\n            this.sessions = sessions;\n            this.updateSessionSelect();\n            // Update footer info when new events arrive\n            this.updateFooterInfo();\n        });\n\n        // Listen for connection status changes\n        document.addEventListener('socketConnectionStatus', (e) => {\n            if (e.detail.type === 'connected') {\n                // Request fresh session data when connected\n                setTimeout(() => this.refreshSessions(), 1000);\n            }\n        });\n    }\n\n    /**\n     * Update the session selection dropdown\n     */\n    updateSessionSelect() {\n        const sessionSelect = document.getElementById('session-select');\n        if (!sessionSelect) return;\n\n        // Store current selection\n        const currentSelection = sessionSelect.value;\n\n        // Get the default working directory from various sources\n        let defaultWorkingDir = '/';\n        \n        // Try to get from working directory manager\n        if (window.dashboard && window.dashboard.workingDirectoryManager) {\n            defaultWorkingDir = window.dashboard.workingDirectoryManager.getDefaultWorkingDir();\n        } else {\n            // Fallback: Try to get from header display element\n            const headerWorkingDir = document.getElementById('working-dir-path');\n            if (headerWorkingDir?.textContent?.trim()) {\n                const headerPath = headerWorkingDir.textContent.trim();\n                if (headerPath !== 'Loading...' && headerPath !== 'Unknown') {\n                    defaultWorkingDir = headerPath;\n                }\n            }\n        }\n        \n        console.log('[SESSION-MANAGER] Using default working directory:', defaultWorkingDir);\n\n        // Update \"All Sessions\" option to show working directory\n        sessionSelect.innerHTML = `\n            <option value=\"\">${defaultWorkingDir} | All Sessions</option>\n        `;\n\n        // Add sessions from the sessions map\n        if (this.sessions && this.sessions.size > 0) {\n            const sortedSessions = Array.from(this.sessions.values())\n                .sort((a, b) => new Date(b.lastActivity || b.startTime) - new Date(a.lastActivity || a.startTime));\n\n            sortedSessions.forEach(session => {\n                const option = document.createElement('option');\n                option.value = session.id;\n\n                // Format session display text\n                const startTime = new Date(session.startTime || session.last_activity).toLocaleString();\n                const eventCount = session.eventCount || session.event_count || 0;\n                const isActive = session.id === this.currentSessionId;\n                \n                // Extract working directory from session or events\n                let workingDir = session.working_directory || session.workingDirectory || '';\n                \n                // Log for debugging\n                console.log(`[SESSION-DROPDOWN] Session ${session.id.substring(0, 8)} working_directory:`, workingDir);\n                \n                if (!workingDir) {\n                    const sessionData = this.extractSessionInfoFromEvents(session.id);\n                    workingDir = sessionData.workingDir || defaultWorkingDir;\n                    console.log(`[SESSION-DROPDOWN] Extracted working directory from events:`, workingDir);\n                }\n                \n                // Format display: working_directory | session_id...\n                const shortId = session.id.substring(0, 8);\n                const dirDisplay = workingDir || defaultWorkingDir;\n                option.textContent = `${dirDisplay} | ${shortId}...${isActive ? ' [ACTIVE]' : ''}`;\n                sessionSelect.appendChild(option);\n            });\n        }\n\n        // Restore selection if it still exists\n        if (currentSelection && Array.from(sessionSelect.options).some(opt => opt.value === currentSelection)) {\n            sessionSelect.value = currentSelection;\n            this.selectedSessionId = currentSelection;\n            // Trigger events for restored selection\n            this.onSessionFilterChanged();\n        } else {\n            this.selectedSessionId = sessionSelect.value;\n            // Trigger events for new selection\n            if (this.selectedSessionId) {\n                this.onSessionFilterChanged();\n            }\n        }\n    }\n\n    /**\n     * Handle session filter change\n     */\n    onSessionFilterChanged() {\n        // Notify event viewer about filter change\n        const eventViewer = window.eventViewer;\n        if (eventViewer) {\n            eventViewer.setSessionFilter(this.selectedSessionId);\n        }\n\n        // Update footer information\n        this.updateFooterInfo();\n\n        // Dispatch custom event for other components\n        document.dispatchEvent(new CustomEvent('sessionFilterChanged', {\n            detail: { sessionId: this.selectedSessionId }\n        }));\n\n        // Also dispatch sessionChanged for backward compatibility with other components\n        document.dispatchEvent(new CustomEvent('sessionChanged', {\n            detail: { sessionId: this.selectedSessionId }\n        }));\n    }\n\n    /**\n     * Refresh sessions from server\n     */\n    refreshSessions() {\n        if (this.socketClient && this.socketClient.getConnectionState().isConnected) {\n            console.log('Refreshing sessions...');\n            this.socketClient.requestStatus();\n        } else {\n            console.warn('Cannot refresh sessions: not connected to server');\n        }\n    }\n\n    /**\n     * Update footer information based on selected session\n     */\n    updateFooterInfo() {\n        console.log('[SESSION-DEBUG] updateFooterInfo called, selectedSessionId:', this.selectedSessionId);\n\n        const footerSessionEl = document.getElementById('footer-session');\n        const footerWorkingDirEl = document.getElementById('footer-working-dir');\n        const footerGitBranchEl = document.getElementById('footer-git-branch');\n\n        if (!footerSessionEl) {\n            console.warn('[SESSION-DEBUG] footer-session element not found');\n            return;\n        }\n\n        let sessionInfo = 'All Sessions';\n        // Use browser-compatible fallback for working directory\n        // WHY: Removed process.cwd() Node.js reference - not available in browser\n        // BROWSER FIX: Use dashboard manager or server-provided config\n        let workingDir = window.dashboard?.workingDirectoryManager?.getDefaultWorkingDir() || \n                        window.dashboardConfig?.workingDirectory || \n                        '.';\n        let gitBranch = 'Unknown';\n\n        console.log('[SESSION-DEBUG] Initial values - sessionInfo:', sessionInfo, 'workingDir:', workingDir, 'gitBranch:', gitBranch);\n\n        if (this.selectedSessionId === 'current') {\n            sessionInfo = this.currentSessionId ?\n                `Current: ${this.currentSessionId.substring(0, 8)}...` :\n                'Current: None';\n\n            // For current session, try to extract info from recent events\n            if (this.currentSessionId) {\n                const sessionData = this.extractSessionInfoFromEvents(this.currentSessionId);\n                // Browser-compatible working directory fallback\n                workingDir = sessionData.workingDir || \n                           window.dashboard?.workingDirectoryManager?.getDefaultWorkingDir() || \n                           window.dashboardConfig?.workingDirectory || \n                           '.';\n                gitBranch = sessionData.gitBranch || 'Unknown';\n            }\n        } else if (this.selectedSessionId) {\n            const session = this.sessions.get(this.selectedSessionId);\n            if (session) {\n                sessionInfo = `${this.selectedSessionId.substring(0, 8)}...`;\n                workingDir = session.working_directory || session.workingDirectory || '';\n                gitBranch = session.git_branch || session.gitBranch || '';\n\n                // If session doesn't have these values, extract from events\n                if (!workingDir || !gitBranch) {\n                    const sessionData = this.extractSessionInfoFromEvents(this.selectedSessionId);\n                    // Browser-compatible fallback - no process.cwd()\n                    workingDir = workingDir || sessionData.workingDir || window.dashboardConfig?.workingDirectory || '.';\n                    gitBranch = gitBranch || sessionData.gitBranch || '';\n                }\n            }\n        }\n\n        console.log('[SESSION-DEBUG] Final values before setting footer - sessionInfo:', sessionInfo, 'workingDir:', workingDir, 'gitBranch:', gitBranch);\n\n        footerSessionEl.textContent = sessionInfo;\n        if (footerWorkingDirEl) {\n            console.log('[SESSION-DEBUG] Setting footer working dir to:', workingDir);\n            footerWorkingDirEl.textContent = workingDir;\n        } else {\n            console.warn('[SESSION-DEBUG] footer-working-dir element not found');\n        }\n        if (footerGitBranchEl) {\n            console.log('[SESSION-DEBUG] Setting footer git branch to:', gitBranch);\n            footerGitBranchEl.textContent = gitBranch;\n        } else {\n            console.warn('[SESSION-DEBUG] footer-git-branch element not found');\n        }\n    }\n\n    /**\n     * Extract working directory and git branch from events for a specific session\n     * @param {string} sessionId - Session ID to extract info for\n     * @returns {Object} Object with workingDir and gitBranch properties\n     */\n    extractSessionInfoFromEvents(sessionId) {\n        let workingDir = '';\n        let gitBranch = '';\n\n        console.log(`[DEBUG] extractSessionInfoFromEvents called for sessionId: ${sessionId}`);\n\n        // Get events from the socket client\n        const socketClient = this.socketClient;\n        if (socketClient && socketClient.events) {\n            console.log(`[DEBUG] Total events available: ${socketClient.events.length}`);\n\n            // Look for session start events or recent events with this session ID\n            const sessionEvents = socketClient.events.filter(event =>\n                event.data && event.data.session_id === sessionId\n            );\n\n            console.log(`[DEBUG] Events matching sessionId ${sessionId}: ${sessionEvents.length}`);\n\n            // Log a few sample events to see their structure\n            if (sessionEvents.length > 0) {\n                console.log(`[DEBUG] Sample events for session ${sessionId}:`);\n\n                // Show first 3 events\n                sessionEvents.slice(0, 3).forEach((event, index) => {\n                    console.log(`[DEBUG] Event ${index + 1}:`, {\n                        type: event.type,\n                        timestamp: event.timestamp,\n                        data_keys: event.data ? Object.keys(event.data) : 'no data',\n                        full_event: event\n                    });\n                });\n\n                // Show last 3 events if different from first 3\n                if (sessionEvents.length > 3) {\n                    console.log(`[DEBUG] Last 3 events for session ${sessionId}:`);\n                    sessionEvents.slice(-3).forEach((event, index) => {\n                        console.log(`[DEBUG] Last Event ${index + 1}:`, {\n                            type: event.type,\n                            timestamp: event.timestamp,\n                            data_keys: event.data ? Object.keys(event.data) : 'no data',\n                            full_event: event\n                        });\n                    });\n                }\n            }\n\n            // Find the most recent event with working directory and git branch info\n            for (let i = sessionEvents.length - 1; i >= 0; i--) {\n                const event = sessionEvents[i];\n                if (event.data) {\n                    console.log(`[DEBUG] Examining event ${i} data:`, event.data);\n\n                    // Check for working directory info\n                    if (!workingDir) {\n                        if (event.data.working_directory) {\n                            workingDir = event.data.working_directory;\n                            console.log(`[DEBUG] Found working_directory: ${workingDir}`);\n                        } else if (event.data.cwd) {\n                            workingDir = event.data.cwd;\n                            console.log(`[DEBUG] Found cwd: ${workingDir}`);\n                        } else if (event.data.instance_info && event.data.instance_info.working_dir) {\n                            workingDir = event.data.instance_info.working_dir;\n                            console.log(`[DEBUG] Found instance_info.working_dir: ${workingDir}`);\n                        }\n                    }\n\n                    // Check for git branch info - check all possible field names\n                    if (!gitBranch) {\n                        const possibleBranchFields = [\n                            'git_branch',\n                            'gitBranch',\n                            'branch',\n                            'git.branch',\n                            'vcs_branch',\n                            'current_branch'\n                        ];\n\n                        for (const field of possibleBranchFields) {\n                            if (event.data[field]) {\n                                gitBranch = event.data[field];\n                                console.log(`[DEBUG] Found git branch in field '${field}': ${gitBranch}`);\n                                break;\n                            }\n                        }\n\n                        // Check nested locations\n                        if (!gitBranch) {\n                            if (event.data.instance_info) {\n                                console.log(`[DEBUG] Checking instance_info for branch:`, event.data.instance_info);\n                                for (const field of possibleBranchFields) {\n                                    if (event.data.instance_info[field]) {\n                                        gitBranch = event.data.instance_info[field];\n                                        console.log(`[DEBUG] Found git branch in instance_info.${field}: ${gitBranch}`);\n                                        break;\n                                    }\n                                }\n                            }\n\n                            if (!gitBranch && event.data.git) {\n                                console.log(`[DEBUG] Checking git object:`, event.data.git);\n                                if (event.data.git.branch) {\n                                    gitBranch = event.data.git.branch;\n                                    console.log(`[DEBUG] Found git branch in git.branch: ${gitBranch}`);\n                                }\n                            }\n                        }\n                    }\n\n                    // If we have both, we can stop looking\n                    if (workingDir && gitBranch) {\n                        console.log(`[DEBUG] Found both workingDir and gitBranch, stopping search`);\n                        break;\n                    }\n                }\n            }\n        } else {\n            console.log(`[DEBUG] No socket client or events available`);\n        }\n\n        console.log(`[DEBUG] Final results - workingDir: '${workingDir}', gitBranch: '${gitBranch}'`);\n        return { workingDir, gitBranch };\n    }\n\n    /**\n     * Set current session ID (from server status)\n     * @param {string} sessionId - Current session ID\n     */\n    setCurrentSessionId(sessionId) {\n        this.currentSessionId = sessionId;\n        this.updateSessionSelect();\n        this.updateFooterInfo();\n    }\n\n    /**\n     * Add or update a session\n     * @param {Object} sessionData - Session data\n     */\n    addSession(sessionData) {\n        if (!sessionData.id) return;\n\n        const existingSession = this.sessions.get(sessionData.id);\n        if (existingSession) {\n            // Update existing session\n            Object.assign(existingSession, sessionData);\n        } else {\n            // Add new session\n            this.sessions.set(sessionData.id, {\n                id: sessionData.id,\n                startTime: sessionData.startTime || sessionData.start_time || new Date().toISOString(),\n                lastActivity: sessionData.lastActivity || sessionData.last_activity || new Date().toISOString(),\n                eventCount: sessionData.eventCount || sessionData.event_count || 0,\n                working_directory: sessionData.working_directory || sessionData.workingDirectory || '',\n                git_branch: sessionData.git_branch || sessionData.gitBranch || '',\n                agent_type: sessionData.agent_type || sessionData.agentType || '',\n                ...sessionData\n            });\n        }\n\n        this.updateSessionSelect();\n    }\n\n    /**\n     * Remove a session\n     * @param {string} sessionId - Session ID to remove\n     */\n    removeSession(sessionId) {\n        if (this.sessions.has(sessionId)) {\n            this.sessions.delete(sessionId);\n\n            // If the removed session was selected, reset to all sessions\n            if (this.selectedSessionId === sessionId) {\n                this.selectedSessionId = '';\n                const sessionSelect = document.getElementById('session-select');\n                if (sessionSelect) {\n                    sessionSelect.value = '';\n                }\n                this.onSessionFilterChanged();\n            }\n\n            this.updateSessionSelect();\n        }\n    }\n\n    /**\n     * Get current session filter\n     * @returns {string} Current session filter\n     */\n    getCurrentFilter() {\n        return this.selectedSessionId;\n    }\n\n    /**\n     * Get session information\n     * @param {string} sessionId - Session ID\n     * @returns {Object|null} Session data or null if not found\n     */\n    getSession(sessionId) {\n        return this.sessions.get(sessionId) || null;\n    }\n\n    /**\n     * Get all sessions\n     * @returns {Map} All sessions\n     */\n    getAllSessions() {\n        return this.sessions;\n    }\n\n    /**\n     * Get current active session ID\n     * @returns {string|null} Current session ID\n     */\n    getCurrentSessionId() {\n        return this.currentSessionId;\n    }\n\n    /**\n     * Clear all sessions\n     */\n    clearSessions() {\n        this.sessions.clear();\n        this.currentSessionId = null;\n        this.selectedSessionId = '';\n        this.updateSessionSelect();\n        this.updateFooterInfo();\n    }\n\n    /**\n     * Export session data\n     * @returns {Object} Session export data\n     */\n    exportSessionData() {\n        return {\n            sessions: Array.from(this.sessions.entries()),\n            currentSessionId: this.currentSessionId,\n            selectedSessionId: this.selectedSessionId\n        };\n    }\n\n    /**\n     * Import session data\n     * @param {Object} data - Session import data\n     */\n    importSessionData(data) {\n        if (data.sessions && Array.isArray(data.sessions)) {\n            this.sessions.clear();\n            data.sessions.forEach(([id, sessionData]) => {\n                this.sessions.set(id, sessionData);\n            });\n        }\n\n        if (data.currentSessionId) {\n            this.currentSessionId = data.currentSessionId;\n        }\n\n        if (data.selectedSessionId !== undefined) {\n            this.selectedSessionId = data.selectedSessionId;\n        }\n\n        this.updateSessionSelect();\n        this.updateFooterInfo();\n    }\n\n    /**\n     * Get events for a specific session\n     * @param {string} sessionId - Session ID to get events for\n     * @returns {Array} - Filtered events for the session\n     */\n    getEventsForSession(sessionId) {\n        if (!sessionId || !this.socketClient) {\n            return [];\n        }\n\n        const allEvents = this.socketClient.events || [];\n        return allEvents.filter(event => {\n            // Check for session ID in various possible locations\n            const eventSessionId = event.session_id ||\n                                 (event.data && event.data.session_id) ||\n                                 null;\n            return eventSessionId === sessionId;\n        });\n    }\n}\n\n// Global functions for backward compatibility\nwindow.refreshSessions = function() {\n    if (window.sessionManager) {\n        window.sessionManager.refreshSessions();\n    }\n};\n\n// Export for global use\nwindow.SessionManager = SessionManager;\n// ES6 Module export\nexport { SessionManager };\nexport default SessionManager;\n"],"names":["window","refreshSessions","sessionManager","SessionManager","constructor","socketClient","this","sessions","Map","currentSessionId","selectedSessionId","init","setupEventHandlers","setupSocketListeners","updateSessionSelect","sessionSelect","document","getElementById","addEventListener","e","target","value","onSessionFilterChanged","dashboard","loadWorkingDirectoryForSession","refreshBtn","querySelector","onEventUpdate","events","console","log","updateFooterInfo","detail","type","setTimeout","currentSelection","defaultWorkingDir","workingDirectoryManager","getDefaultWorkingDir","headerWorkingDir","textContent","trim","headerPath","innerHTML","size","Array","from","values","sort","a","b","Date","lastActivity","startTime","forEach","session","option","createElement","id","last_activity","toLocaleString","eventCount","event_count","isActive","workingDir","working_directory","workingDirectory","substring","extractSessionInfoFromEvents","shortId","dirDisplay","appendChild","options","some","opt","eventViewer","setSessionFilter","dispatchEvent","CustomEvent","sessionId","getConnectionState","isConnected","requestStatus","warn","footerSessionEl","footerWorkingDirEl","footerGitBranchEl","sessionInfo","dashboardConfig","gitBranch","sessionData","get","git_branch","length","sessionEvents","filter","event","data","session_id","slice","index","timestamp","data_keys","Object","keys","full_event","i","cwd","instance_info","working_dir","possibleBranchFields","field","git","branch","setCurrentSessionId","addSession","existingSession","assign","set","start_time","toISOString","agent_type","agentType","removeSession","has","delete","getCurrentFilter","getSession","getAllSessions","getCurrentSessionId","clearSessions","clear","exportSessionData","entries","importSessionData","isArray","getEventsForSession"],"mappings":"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"}