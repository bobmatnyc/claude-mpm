{"version":3,"file":"working-directory.js","sources":["../../js/components/working-directory.js"],"sourcesContent":["/**\n * Working Directory Module\n *\n * Manages working directory state, session-specific directory tracking,\n * and git branch monitoring for the dashboard.\n *\n * WHY: Extracted from main dashboard to isolate working directory management\n * logic that involves coordination between UI updates, local storage persistence,\n * and git integration. This provides better maintainability for directory state.\n *\n * DESIGN DECISION: Maintains per-session working directories with persistence\n * in localStorage, provides git branch integration, and coordinates with\n * footer directory display for consistent state management.\n */\nclass WorkingDirectoryManager {\n    constructor(socketManager) {\n        this.socketManager = socketManager;\n        this.currentWorkingDir = null;\n        this.footerDirObserver = null;\n        this._updatingFooter = false;\n\n        this.setupEventHandlers();\n        this.initialize();\n\n        console.log('Working directory manager initialized');\n    }\n\n    /**\n     * Initialize working directory management\n     */\n    initialize() {\n        this.initializeWorkingDirectory();\n        this.watchFooterDirectory();\n    }\n\n    /**\n     * Set up event handlers for working directory controls\n     */\n    setupEventHandlers() {\n        const changeDirBtn = document.getElementById('change-dir-btn');\n        const workingDirPath = document.getElementById('working-dir-path');\n\n        if (changeDirBtn) {\n            changeDirBtn.addEventListener('click', () => {\n                this.showChangeDirDialog();\n            });\n        }\n\n        if (workingDirPath) {\n            workingDirPath.addEventListener('click', (e) => {\n                // Check if Shift key is held for directory change, otherwise show file viewer\n                if (e.shiftKey) {\n                    this.showChangeDirDialog();\n                } else {\n                    this.showWorkingDirectoryViewer();\n                }\n            });\n        }\n\n        // Listen for session changes to update working directory\n        document.addEventListener('sessionChanged', (e) => {\n            const sessionId = e.detail.sessionId;\n            console.log('[WORKING-DIR-DEBUG] sessionChanged event received, sessionId:', this.repr(sessionId));\n            if (sessionId) {\n                this.loadWorkingDirectoryForSession(sessionId);\n            }\n        });\n\n        // Listen for git branch responses\n        if (this.socketManager && this.socketManager.getSocket) {\n            const socket = this.socketManager.getSocket();\n            if (socket) {\n                console.log('[WORKING-DIR-DEBUG] Setting up git_branch_response listener');\n                socket.on('git_branch_response', (response) => {\n                    console.log('[GIT-BRANCH-DEBUG] Received git_branch_response:', response);\n                    this.handleGitBranchResponse(response);\n                });\n            }\n        }\n    }\n\n    /**\n     * Initialize working directory for current session\n     */\n    initializeWorkingDirectory() {\n        // Set initial loading state to prevent early Git requests\n        const pathElement = document.getElementById('working-dir-path');\n        if (pathElement && !pathElement.textContent.trim()) {\n            pathElement.textContent = 'Loading...';\n        }\n\n        // Check if there's a selected session\n        const sessionSelect = document.getElementById('session-select');\n        if (sessionSelect && sessionSelect.value && sessionSelect.value !== 'all') {\n            // Load working directory for selected session\n            this.loadWorkingDirectoryForSession(sessionSelect.value);\n        } else {\n            // Use default working directory\n            this.setWorkingDirectory(this.getDefaultWorkingDir());\n        }\n    }\n\n    /**\n     * Watch footer directory for changes and sync working directory\n     */\n    watchFooterDirectory() {\n        const footerDir = document.getElementById('footer-working-dir');\n        if (!footerDir) return;\n\n        // Store observer reference for later use\n        this.footerDirObserver = new MutationObserver((mutations) => {\n            // Skip if we're updating from setWorkingDirectory\n            if (this._updatingFooter) return;\n\n            mutations.forEach((mutation) => {\n                if (mutation.type === 'childList' || mutation.type === 'characterData') {\n                    const newDir = footerDir.textContent.trim();\n                    console.log('Footer directory changed to:', newDir);\n\n                    // Only update if it's different from current\n                    if (newDir && newDir !== this.currentWorkingDir) {\n                        console.log('Syncing working directory from footer change');\n                        this.setWorkingDirectory(newDir);\n                    }\n                }\n            });\n        });\n\n        // Observe changes to footer directory\n        this.footerDirObserver.observe(footerDir, {\n            childList: true,\n            characterData: true,\n            subtree: true\n        });\n\n        console.log('Started watching footer directory for changes');\n    }\n\n    /**\n     * Load working directory for a specific session\n     * @param {string} sessionId - Session ID\n     */\n    loadWorkingDirectoryForSession(sessionId) {\n        console.log('[WORKING-DIR-DEBUG] loadWorkingDirectoryForSession called with sessionId:', this.repr(sessionId));\n\n        if (!sessionId || sessionId === 'all') {\n            console.log('[WORKING-DIR-DEBUG] No sessionId or sessionId is \"all\", using default working dir');\n            const defaultDir = this.getDefaultWorkingDir();\n            console.log('[WORKING-DIR-DEBUG] Default working dir:', this.repr(defaultDir));\n            this.setWorkingDirectory(defaultDir);\n            return;\n        }\n\n        // Load from localStorage\n        const sessionDirs = JSON.parse(localStorage.getItem('sessionWorkingDirs') || '{}');\n        console.log('[WORKING-DIR-DEBUG] Session directories from localStorage:', sessionDirs);\n\n        const sessionDir = sessionDirs[sessionId];\n        const defaultDir = this.getDefaultWorkingDir();\n        const dir = sessionDir || defaultDir;\n\n        console.log('[WORKING-DIR-DEBUG] Directory selection:', {\n            sessionId: sessionId,\n            sessionDir: this.repr(sessionDir),\n            defaultDir: this.repr(defaultDir),\n            finalDir: this.repr(dir)\n        });\n\n        this.setWorkingDirectory(dir);\n    }\n\n    /**\n     * Set the working directory for the current session\n     * @param {string} dir - Directory path\n     */\n    setWorkingDirectory(dir) {\n        console.log('[WORKING-DIR-DEBUG] setWorkingDirectory called with:', this.repr(dir));\n\n        this.currentWorkingDir = dir;\n\n        // Update UI\n        const pathElement = document.getElementById('working-dir-path');\n        if (pathElement) {\n            console.log('[WORKING-DIR-DEBUG] Updating UI path element to:', dir);\n            pathElement.textContent = dir;\n        } else {\n            console.warn('[WORKING-DIR-DEBUG] working-dir-path element not found');\n        }\n\n        // Update footer directory (sync across components)\n        const footerDir = document.getElementById('footer-working-dir');\n        if (footerDir) {\n            const currentFooterText = footerDir.textContent;\n            console.log('[WORKING-DIR-DEBUG] Footer directory current text:', this.repr(currentFooterText), 'new text:', this.repr(dir));\n\n            if (currentFooterText !== dir) {\n                // Set flag to prevent observer from triggering\n                this._updatingFooter = true;\n                footerDir.textContent = dir;\n                console.log('[WORKING-DIR-DEBUG] Updated footer directory to:', dir);\n\n                // Clear flag after a short delay\n                setTimeout(() => {\n                    this._updatingFooter = false;\n                    console.log('[WORKING-DIR-DEBUG] Cleared _updatingFooter flag');\n                }, 100);\n            } else {\n                console.log('[WORKING-DIR-DEBUG] Footer directory already has correct text');\n            }\n        } else {\n            console.warn('[WORKING-DIR-DEBUG] footer-working-dir element not found');\n        }\n\n        // Save to localStorage for session persistence\n        const sessionSelect = document.getElementById('session-select');\n        if (sessionSelect && sessionSelect.value && sessionSelect.value !== 'all') {\n            const sessionId = sessionSelect.value;\n            const sessionDirs = JSON.parse(localStorage.getItem('sessionWorkingDirs') || '{}');\n            sessionDirs[sessionId] = dir;\n            localStorage.setItem('sessionWorkingDirs', JSON.stringify(sessionDirs));\n            console.log(`[WORKING-DIR-DEBUG] Saved working directory for session ${sessionId}:`, dir);\n        } else {\n            console.log('[WORKING-DIR-DEBUG] No session selected or session is \"all\", not saving to localStorage');\n        }\n\n        // Update git branch for new directory - only if it's a valid path\n        console.log('[WORKING-DIR-DEBUG] About to call updateGitBranch with:', this.repr(dir));\n        if (this.validateDirectoryPath(dir)) {\n            this.updateGitBranch(dir);\n        } else {\n            console.log('[WORKING-DIR-DEBUG] Skipping git branch update for invalid directory:', this.repr(dir));\n        }\n\n        // Dispatch event for other modules\n        document.dispatchEvent(new CustomEvent('workingDirectoryChanged', {\n            detail: { directory: dir }\n        }));\n\n        console.log('[WORKING-DIR-DEBUG] Working directory set to:', dir);\n    }\n\n    /**\n     * Update git branch display for current working directory\n     * @param {string} dir - Working directory path\n     */\n    updateGitBranch(dir) {\n        console.log('[GIT-BRANCH-DEBUG] updateGitBranch called with dir:', this.repr(dir), 'type:', typeof dir);\n\n        if (!this.socketManager || !this.socketManager.isConnected()) {\n            console.log('[GIT-BRANCH-DEBUG] Not connected to socket server');\n            // Not connected, set to unknown\n            const footerBranch = document.getElementById('footer-git-branch');\n            if (footerBranch) {\n                footerBranch.textContent = 'Not Connected';\n                footerBranch.style.display = 'inline';\n            }\n            return;\n        }\n\n        // Enhanced validation with specific checks for common invalid states\n        const isValidPath = this.validateDirectoryPath(dir);\n        const isLoadingState = dir === 'Loading...' || dir === 'Loading';\n        const isUnknown = dir === 'Unknown';\n        const isEmptyOrWhitespace = !dir || (typeof dir === 'string' && dir.trim() === '');\n\n        console.log('[GIT-BRANCH-DEBUG] Validation results:', {\n            dir: dir,\n            isValidPath: isValidPath,\n            isLoadingState: isLoadingState,\n            isUnknown: isUnknown,\n            isEmptyOrWhitespace: isEmptyOrWhitespace,\n            shouldReject: !isValidPath || isLoadingState || isUnknown || isEmptyOrWhitespace\n        });\n\n        // Validate directory before sending to server - reject common invalid states\n        if (!isValidPath || isLoadingState || isUnknown || isEmptyOrWhitespace) {\n            console.warn('[GIT-BRANCH-DEBUG] Invalid working directory for git branch request:', dir);\n            const footerBranch = document.getElementById('footer-git-branch');\n            if (footerBranch) {\n                if (isLoadingState) {\n                    footerBranch.textContent = 'Loading...';\n                } else if (isUnknown || isEmptyOrWhitespace) {\n                    footerBranch.textContent = 'No Directory';\n                } else {\n                    footerBranch.textContent = 'Invalid Directory';\n                }\n                footerBranch.style.display = 'inline';\n            }\n            return;\n        }\n\n        // Request git branch from server\n        const socket = this.socketManager.getSocket();\n        if (socket) {\n            console.log('[GIT-BRANCH-DEBUG] Requesting git branch for directory:', dir);\n            console.log('[GIT-BRANCH-DEBUG] Socket state:', {\n                connected: socket.connected,\n                id: socket.id\n            });\n            // Server expects working_dir as a direct parameter, not as an object\n            socket.emit('get_git_branch', dir);\n        } else {\n            console.error('[GIT-BRANCH-DEBUG] No socket available for git branch request');\n        }\n    }\n\n    /**\n     * Get default working directory\n     * @returns {string} - Default directory path\n     */\n    getDefaultWorkingDir() {\n        console.log('[WORKING-DIR-DEBUG] getDefaultWorkingDir called');\n        \n        // Try to get from the current working directory if set\n        if (this.currentWorkingDir && this.validateDirectoryPath(this.currentWorkingDir)) {\n            console.log('[WORKING-DIR-DEBUG] Using current working directory:', this.currentWorkingDir);\n            return this.currentWorkingDir;\n        }\n        \n        // Try to get from header display\n        const headerWorkingDir = document.querySelector('.working-dir-text');\n        if (headerWorkingDir?.textContent?.trim()) {\n            const headerPath = headerWorkingDir.textContent.trim();\n            if (headerPath !== 'Loading...' && headerPath !== 'Unknown' && this.validateDirectoryPath(headerPath)) {\n                console.log('[WORKING-DIR-DEBUG] Using header working directory:', headerPath);\n                return headerPath;\n            }\n        }\n\n        // Try to get from footer\n        const footerDir = document.getElementById('footer-working-dir');\n        if (footerDir?.textContent?.trim()) {\n            const footerPath = footerDir.textContent.trim();\n            console.log('[WORKING-DIR-DEBUG] Footer path found:', this.repr(footerPath));\n\n            // Don't use 'Unknown' as a valid directory\n            const isUnknown = footerPath === 'Unknown';\n            const isValid = this.validateDirectoryPath(footerPath);\n\n            console.log('[WORKING-DIR-DEBUG] Footer path validation:', {\n                footerPath: this.repr(footerPath),\n                isUnknown: isUnknown,\n                isValid: isValid,\n                shouldUse: !isUnknown && isValid\n            });\n\n            if (!isUnknown && isValid) {\n                console.log('[WORKING-DIR-DEBUG] Using footer path as default:', footerPath);\n                return footerPath;\n            }\n        } else {\n            console.log('[WORKING-DIR-DEBUG] No footer directory element or no text content');\n        }\n\n        // Fallback to a reasonable default - try to get the current project directory\n        // This should be set when the dashboard initializes\n\n        // Try getting from the browser's URL or any other hint about the current project\n        if (window.location.pathname.includes('claude-mpm')) {\n            // We can infer we're in a claude-mpm project\n            const cwdFallback = '/Users/masa/Projects/claude-mpm';\n            console.log('[WORKING-DIR-DEBUG] Using inferred project path as fallback:', cwdFallback);\n            return cwdFallback;\n        }\n        const workingDirPath = document.getElementById('working-dir-path');\n        if (workingDirPath?.textContent?.trim()) {\n            const pathText = workingDirPath.textContent.trim();\n            console.log('[WORKING-DIR-DEBUG] Found working-dir-path element text:', this.repr(pathText));\n            if (pathText !== 'Unknown' && this.validateDirectoryPath(pathText)) {\n                console.log('[WORKING-DIR-DEBUG] Using working-dir-path as fallback:', pathText);\n                return pathText;\n            }\n        }\n\n        // Final fallback to current directory indicator\n        const fallback = process?.cwd?.() || '/Users/masa/Projects/claude-mpm';\n        console.log('[WORKING-DIR-DEBUG] Using hard-coded fallback directory:', this.repr(fallback));\n        return fallback;\n    }\n\n    /**\n     * Show change directory dialog\n     */\n    showChangeDirDialog() {\n        const newDir = prompt('Enter new working directory:', this.currentWorkingDir || '');\n        if (newDir && newDir.trim() !== '') {\n            this.setWorkingDirectory(newDir.trim());\n        }\n    }\n\n    /**\n     * Show working directory file viewer overlay\n     * WHY: Provides quick file browsing from the header without opening a full modal\n     * DESIGN DECISION: Uses overlay positioned below the blue bar for easy access\n     */\n    showWorkingDirectoryViewer() {\n        // Create or show the directory viewer overlay\n        this.createDirectoryViewerOverlay();\n    }\n\n    /**\n     * Create directory viewer overlay positioned below the working directory display\n     * WHY: Positions overlay near the trigger for intuitive user experience\n     * without disrupting the main dashboard layout\n     */\n    createDirectoryViewerOverlay() {\n        // Remove existing overlay if present\n        this.removeDirectoryViewerOverlay();\n\n        const workingDirDisplay = document.querySelector('.working-dir-display');\n        if (!workingDirDisplay) return;\n\n        // Create overlay element\n        const overlay = document.createElement('div');\n        overlay.id = 'directory-viewer-overlay';\n        overlay.className = 'directory-viewer-overlay';\n\n        // Create overlay content\n        overlay.innerHTML = `\n            <div class=\"directory-viewer-content\">\n                <div class=\"directory-viewer-header\">\n                    <h3 class=\"directory-viewer-title\">\n                        📁 ${this.currentWorkingDir || 'Working Directory'}\n                    </h3>\n                    <button class=\"close-btn\" onclick=\"workingDirectoryManager.removeDirectoryViewerOverlay()\">✕</button>\n                </div>\n                <div class=\"directory-viewer-body\">\n                    <div class=\"loading-indicator\">Loading directory contents...</div>\n                </div>\n                <div class=\"directory-viewer-footer\">\n                    <span class=\"directory-hint\">Click file to view • Shift+Click directory path to change</span>\n                </div>\n            </div>\n        `;\n\n        // Position overlay below the working directory display\n        const rect = workingDirDisplay.getBoundingClientRect();\n        overlay.style.cssText = `\n            position: fixed;\n            top: ${rect.bottom + 5}px;\n            left: ${rect.left}px;\n            min-width: 400px;\n            max-width: 600px;\n            max-height: 400px;\n            z-index: 1001;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);\n            border: 1px solid #e2e8f0;\n        `;\n\n        // Add to document\n        document.body.appendChild(overlay);\n\n        // Load directory contents\n        this.loadDirectoryContents();\n\n        // Add click outside to close\n        setTimeout(() => {\n            document.addEventListener('click', this.handleOutsideClick.bind(this), true);\n        }, 100);\n    }\n\n    /**\n     * Remove directory viewer overlay\n     */\n    removeDirectoryViewerOverlay() {\n        const overlay = document.getElementById('directory-viewer-overlay');\n        if (overlay) {\n            overlay.remove();\n            document.removeEventListener('click', this.handleOutsideClick.bind(this), true);\n        }\n    }\n\n    /**\n     * Handle clicks outside the overlay to close it\n     * @param {Event} event - Click event\n     */\n    handleOutsideClick(event) {\n        const overlay = document.getElementById('directory-viewer-overlay');\n        const workingDirPath = document.getElementById('working-dir-path');\n\n        if (overlay && !overlay.contains(event.target) && event.target !== workingDirPath) {\n            this.removeDirectoryViewerOverlay();\n        }\n    }\n\n    /**\n     * Load directory contents using socket connection\n     * WHY: Uses existing socket infrastructure to get directory listing\n     * without requiring new endpoints\n     */\n    loadDirectoryContents() {\n        if (!this.socketManager || !this.socketManager.isConnected()) {\n            this.showDirectoryError('Not connected to server');\n            return;\n        }\n\n        const socket = this.socketManager.getSocket();\n        if (!socket) {\n            this.showDirectoryError('No socket connection available');\n            return;\n        }\n\n        // Request directory listing\n        socket.emit('get_directory_listing', {\n            directory: this.currentWorkingDir,\n            limit: 50 // Reasonable limit for overlay display\n        });\n\n        // Listen for response\n        const responseHandler = (data) => {\n            socket.off('directory_listing_response', responseHandler);\n            this.handleDirectoryListingResponse(data);\n        };\n\n        socket.on('directory_listing_response', responseHandler);\n\n        // Timeout after 5 seconds\n        setTimeout(() => {\n            socket.off('directory_listing_response', responseHandler);\n            const overlay = document.getElementById('directory-viewer-overlay');\n            if (overlay && overlay.querySelector('.loading-indicator')) {\n                this.showDirectoryError('Request timeout');\n            }\n        }, 5000);\n    }\n\n    /**\n     * Handle directory listing response from server\n     * @param {Object} data - Directory listing data\n     */\n    handleDirectoryListingResponse(data) {\n        const bodyElement = document.querySelector('.directory-viewer-body');\n        if (!bodyElement) return;\n\n        if (!data.success) {\n            this.showDirectoryError(data.error || 'Failed to load directory');\n            return;\n        }\n\n        // Create file listing\n        const files = data.files || [];\n        const directories = data.directories || [];\n\n        let html = '';\n\n        // Add parent directory link if not root\n        if (this.currentWorkingDir && this.currentWorkingDir !== '/') {\n            const parentDir = this.currentWorkingDir.split('/').slice(0, -1).join('/') || '/';\n            html += `\n                <div class=\"file-item directory-item\" onclick=\"workingDirectoryManager.setWorkingDirectory('${parentDir}')\">\n                    <span class=\"file-icon\">📁</span>\n                    <span class=\"file-name\">..</span>\n                    <span class=\"file-type\">parent directory</span>\n                </div>\n            `;\n        }\n\n        // Add directories\n        directories.forEach(dir => {\n            const fullPath = `${this.currentWorkingDir}/${dir}`.replace(/\\/+/g, '/');\n            html += `\n                <div class=\"file-item directory-item\" onclick=\"workingDirectoryManager.setWorkingDirectory('${fullPath}')\">\n                    <span class=\"file-icon\">📁</span>\n                    <span class=\"file-name\">${dir}</span>\n                    <span class=\"file-type\">directory</span>\n                </div>\n            `;\n        });\n\n        // Add files\n        files.forEach(file => {\n            const filePath = `${this.currentWorkingDir}/${file}`.replace(/\\/+/g, '/');\n            const fileExt = file.split('.').pop().toLowerCase();\n            const fileIcon = this.getFileIcon(fileExt);\n\n            html += `\n                <div class=\"file-item\" onclick=\"workingDirectoryManager.viewFile('${filePath}')\">\n                    <span class=\"file-icon\">${fileIcon}</span>\n                    <span class=\"file-name\">${file}</span>\n                    <span class=\"file-type\">${fileExt}</span>\n                </div>\n            `;\n        });\n\n        if (html === '') {\n            html = '<div class=\"no-files\">Empty directory</div>';\n        }\n\n        bodyElement.innerHTML = html;\n    }\n\n    /**\n     * Show directory error in the overlay\n     * @param {string} message - Error message\n     */\n    showDirectoryError(message) {\n        const bodyElement = document.querySelector('.directory-viewer-body');\n        if (bodyElement) {\n            bodyElement.innerHTML = `\n                <div class=\"directory-error\">\n                    <span class=\"error-icon\">⚠️</span>\n                    <span class=\"error-message\">${message}</span>\n                </div>\n            `;\n        }\n    }\n\n    /**\n     * Get file icon based on extension\n     * @param {string} extension - File extension\n     * @returns {string} - File icon emoji\n     */\n    getFileIcon(extension) {\n        const iconMap = {\n            'js': '📄',\n            'py': '🐍',\n            'html': '🌐',\n            'css': '🎨',\n            'json': '📋',\n            'md': '📝',\n            'txt': '📝',\n            'yml': '⚙️',\n            'yaml': '⚙️',\n            'xml': '📄',\n            'pdf': '📕',\n            'png': '🖼️',\n            'jpg': '🖼️',\n            'jpeg': '🖼️',\n            'gif': '🖼️',\n            'svg': '🖼️',\n            'zip': '📦',\n            'tar': '📦',\n            'gz': '📦',\n            'sh': '🔧',\n            'bat': '🔧',\n            'exe': '⚙️',\n            'dll': '⚙️'\n        };\n\n        return iconMap[extension] || '📄';\n    }\n\n    /**\n     * View a file using the existing file viewer modal\n     * @param {string} filePath - Path to the file to view\n     */\n    viewFile(filePath) {\n        // Close the directory viewer overlay\n        this.removeDirectoryViewerOverlay();\n\n        // Use the existing file viewer modal functionality\n        if (window.showFileViewerModal) {\n            window.showFileViewerModal(filePath);\n        } else {\n            console.warn('File viewer modal function not available');\n        }\n    }\n\n    /**\n     * Get current working directory\n     * @returns {string} - Current working directory\n     */\n    getCurrentWorkingDir() {\n        return this.currentWorkingDir;\n    }\n\n    /**\n     * Get session working directories from localStorage\n     * @returns {Object} - Session directories mapping\n     */\n    getSessionDirectories() {\n        return JSON.parse(localStorage.getItem('sessionWorkingDirs') || '{}');\n    }\n\n    /**\n     * Set working directory for a specific session\n     * @param {string} sessionId - Session ID\n     * @param {string} directory - Directory path\n     */\n    setSessionDirectory(sessionId, directory) {\n        const sessionDirs = this.getSessionDirectories();\n        sessionDirs[sessionId] = directory;\n        localStorage.setItem('sessionWorkingDirs', JSON.stringify(sessionDirs));\n\n        // If this is the current session, update the current directory\n        const sessionSelect = document.getElementById('session-select');\n        if (sessionSelect && sessionSelect.value === sessionId) {\n            this.setWorkingDirectory(directory);\n        }\n    }\n\n    /**\n     * Remove session directory from storage\n     * @param {string} sessionId - Session ID to remove\n     */\n    removeSessionDirectory(sessionId) {\n        const sessionDirs = this.getSessionDirectories();\n        delete sessionDirs[sessionId];\n        localStorage.setItem('sessionWorkingDirs', JSON.stringify(sessionDirs));\n    }\n\n    /**\n     * Clear all session directories from storage\n     */\n    clearAllSessionDirectories() {\n        localStorage.removeItem('sessionWorkingDirs');\n    }\n\n    /**\n     * Extract working directory from event pair\n     * Used by file operations tracking\n     * @param {Object} pair - Event pair object\n     * @returns {string} - Working directory path\n     */\n    extractWorkingDirectoryFromPair(pair) {\n        // Try different sources for working directory\n        if (pair.pre?.working_dir) return pair.pre.working_dir;\n        if (pair.post?.working_dir) return pair.post.working_dir;\n        if (pair.pre?.data?.working_dir) return pair.pre.data.working_dir;\n        if (pair.post?.data?.working_dir) return pair.post.data.working_dir;\n\n        // Fallback to current working directory\n        return this.currentWorkingDir || this.getDefaultWorkingDir();\n    }\n\n    /**\n     * Validate directory path\n     * @param {string} path - Directory path to validate\n     * @returns {boolean} - True if path appears valid\n     */\n    validateDirectoryPath(path) {\n        if (!path || typeof path !== 'string') return false;\n\n        // Basic path validation\n        const trimmed = path.trim();\n        if (trimmed.length === 0) return false;\n\n        // Check for obviously invalid paths\n        if (trimmed.includes('\\0')) return false;\n\n        // Check for common invalid placeholder states\n        const invalidStates = [\n            'Loading...',\n            'Loading',\n            'Unknown',\n            'undefined',\n            'null',\n            'Not Connected',\n            'Invalid Directory',\n            'No Directory'\n        ];\n\n        if (invalidStates.includes(trimmed)) return false;\n\n        // Basic path structure validation - should start with / or drive letter on Windows\n        if (!trimmed.startsWith('/') && !(/^[A-Za-z]:/.test(trimmed))) {\n            // Allow relative paths that look reasonable\n            if (trimmed.startsWith('./') || trimmed.startsWith('../') ||\n                /^[a-zA-Z0-9._-]+/.test(trimmed)) {\n                return true;\n            }\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Handle git branch response from server\n     * @param {Object} response - Git branch response\n     */\n    handleGitBranchResponse(response) {\n        console.log('[GIT-BRANCH-DEBUG] handleGitBranchResponse called with:', response);\n\n        const footerBranch = document.getElementById('footer-git-branch');\n        if (!footerBranch) {\n            console.warn('[GIT-BRANCH-DEBUG] footer-git-branch element not found');\n            return;\n        }\n\n        if (response.success) {\n            console.log('[GIT-BRANCH-DEBUG] Git branch request successful, branch:', response.branch);\n            footerBranch.textContent = response.branch;\n            footerBranch.style.display = 'inline';\n\n            // Optional: Add a class to indicate successful git status\n            footerBranch.classList.remove('git-error');\n            footerBranch.classList.add('git-success');\n        } else {\n            // Handle different error types more gracefully\n            let displayText = 'Git Error';\n            const error = response.error || 'Unknown error';\n\n            if (error.includes('Directory not found') || error.includes('does not exist')) {\n                displayText = 'Dir Not Found';\n            } else if (error.includes('Not a directory')) {\n                displayText = 'Invalid Path';\n            } else if (error.includes('Not a git repository')) {\n                displayText = 'No Git Repo';\n            } else if (error.includes('git')) {\n                displayText = 'Git Error';\n            } else {\n                displayText = 'Unknown';\n            }\n\n            console.log('[GIT-BRANCH-DEBUG] Git branch request failed:', error, '- showing as:', displayText);\n            footerBranch.textContent = displayText;\n            footerBranch.style.display = 'inline';\n\n            // Optional: Add a class to indicate error state\n            footerBranch.classList.remove('git-success');\n            footerBranch.classList.add('git-error');\n        }\n\n        // Log additional debug info from server\n        if (response.original_working_dir) {\n            console.log('[GIT-BRANCH-DEBUG] Server received original working_dir:', this.repr(response.original_working_dir));\n        }\n        if (response.working_dir) {\n            console.log('[GIT-BRANCH-DEBUG] Server used working_dir:', this.repr(response.working_dir));\n        }\n        if (response.git_error) {\n            console.log('[GIT-BRANCH-DEBUG] Git command stderr:', response.git_error);\n        }\n    }\n\n    /**\n     * Check if working directory is ready for Git operations\n     * @returns {boolean} - True if directory is ready\n     */\n    isWorkingDirectoryReady() {\n        const dir = this.getCurrentWorkingDir();\n        return this.validateDirectoryPath(dir) && dir !== 'Loading...' && dir !== 'Unknown';\n    }\n\n    /**\n     * Wait for working directory to be ready, then execute callback\n     * @param {Function} callback - Function to call when directory is ready\n     * @param {number} timeout - Maximum time to wait in milliseconds\n     */\n    whenDirectoryReady(callback, timeout = 5000) {\n        const startTime = Date.now();\n\n        const checkReady = () => {\n            if (this.isWorkingDirectoryReady()) {\n                callback();\n            } else if (Date.now() - startTime < timeout) {\n                setTimeout(checkReady, 100); // Check every 100ms\n            } else {\n                console.warn('[WORKING-DIR-DEBUG] Timeout waiting for directory to be ready');\n            }\n        };\n\n        checkReady();\n    }\n\n    /**\n     * Helper function for detailed logging\n     * @param {*} value - Value to represent\n     * @returns {string} - String representation\n     */\n    repr(value) {\n        if (value === null) return 'null';\n        if (value === undefined) return 'undefined';\n        if (typeof value === 'string') return `\"${value}\"`;\n        return String(value);\n    }\n\n    /**\n     * Cleanup resources\n     */\n    cleanup() {\n        if (this.footerDirObserver) {\n            this.footerDirObserver.disconnect();\n            this.footerDirObserver = null;\n        }\n\n        console.log('Working directory manager cleaned up');\n    }\n}\n// ES6 Module export\nexport { WorkingDirectoryManager };\nexport default WorkingDirectoryManager;\n"],"names":["WorkingDirectoryManager","constructor","socketManager","this","currentWorkingDir","footerDirObserver","_updatingFooter","setupEventHandlers","initialize","console","log","initializeWorkingDirectory","watchFooterDirectory","changeDirBtn","document","getElementById","workingDirPath","addEventListener","showChangeDirDialog","e","shiftKey","showWorkingDirectoryViewer","sessionId","detail","repr","loadWorkingDirectoryForSession","getSocket","socket","on","response","handleGitBranchResponse","pathElement","textContent","trim","sessionSelect","value","setWorkingDirectory","getDefaultWorkingDir","footerDir","MutationObserver","mutations","forEach","mutation","type","newDir","observe","childList","characterData","subtree","defaultDir","sessionDirs","JSON","parse","localStorage","getItem","sessionDir","dir","finalDir","warn","currentFooterText","setTimeout","setItem","stringify","validateDirectoryPath","updateGitBranch","dispatchEvent","CustomEvent","directory","isConnected","footerBranch","style","display","isValidPath","isLoadingState","isUnknown","isEmptyOrWhitespace","shouldReject","connected","id","emit","error","headerWorkingDir","querySelector","headerPath","footerPath","isValid","shouldUse","window","location","pathname","includes","cwdFallback","pathText","fallback","process","cwd","prompt","createDirectoryViewerOverlay","removeDirectoryViewerOverlay","workingDirDisplay","overlay","createElement","className","innerHTML","rect","getBoundingClientRect","cssText","bottom","left","body","appendChild","loadDirectoryContents","handleOutsideClick","bind","remove","removeEventListener","event","contains","target","showDirectoryError","limit","responseHandler","data","off","handleDirectoryListingResponse","bodyElement","success","files","directories","html","parentDir","split","slice","join","fullPath","replace","file","filePath","fileExt","pop","toLowerCase","fileIcon","getFileIcon","message","extension","js","py","css","json","md","txt","yml","yaml","xml","pdf","png","jpg","jpeg","gif","svg","zip","tar","gz","sh","bat","exe","dll","viewFile","showFileViewerModal","getCurrentWorkingDir","getSessionDirectories","setSessionDirectory","removeSessionDirectory","clearAllSessionDirectories","removeItem","extractWorkingDirectoryFromPair","pair","pre","working_dir","post","path","trimmed","length","startsWith","test","branch","classList","add","displayText","original_working_dir","git_error","isWorkingDirectoryReady","whenDirectoryReady","callback","timeout","startTime","Date","now","checkReady","String","cleanup","disconnect"],"mappings":"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"}