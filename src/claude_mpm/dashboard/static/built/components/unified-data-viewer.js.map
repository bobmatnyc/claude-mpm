{"version":3,"file":"unified-data-viewer.js","sources":["../../js/components/unified-data-viewer.js"],"sourcesContent":["/**\n * Unified Data Viewer Component\n * \n * Consolidates all data formatting and display logic from event-driven tabs\n * (Activity, Events, Agents) into a single, reusable component.\n * \n * WHY: Eliminates code duplication across multiple components and provides\n * consistent data display formatting throughout the dashboard.\n * \n * DESIGN DECISION: Auto-detects data type and applies appropriate formatting,\n * while allowing manual type specification for edge cases.\n */\n\nclass UnifiedDataViewer {\n    constructor(containerId = 'module-data-content') {\n        this.container = document.getElementById(containerId);\n        this.currentData = null;\n        this.currentType = null;\n        \n        // Global JSON visibility state - synchronized with localStorage\n        // This ensures all JSON sections maintain consistent state\n        this.globalJsonExpanded = localStorage.getItem('dashboard-json-expanded') === 'true';\n        \n        // Separate state for \"Full Event Data\" sections - uses its own localStorage key\n        // This allows independent control of Full Event Data visibility\n        this.fullEventDataExpanded = localStorage.getItem('dashboard-full-event-expanded') === 'true';\n        \n        // Listen for global JSON toggle changes from other components\n        document.addEventListener('jsonToggleChanged', (e) => {\n            this.globalJsonExpanded = e.detail.expanded;\n            this.updateAllJsonSections();\n        });\n        \n        // Listen for full event data toggle changes\n        document.addEventListener('fullEventToggleChanged', (e) => {\n            this.fullEventDataExpanded = e.detail.expanded;\n            this.updateAllFullEventSections();\n        });\n    }\n\n    /**\n     * Main display method - auto-detects type and renders data\n     * @param {Object|Array} data - Data to display\n     * @param {string|null} type - Optional type override\n     */\n    display(data, type = null) {\n        if (!this.container) {\n            console.warn('UnifiedDataViewer: Container not found');\n            return;\n        }\n\n        // Store current data for reference\n        this.currentData = data;\n        this.currentType = type;\n\n        // Auto-detect type if not provided\n        if (!type) {\n            type = this.detectType(data);\n        }\n\n        // Clear container\n        this.container.innerHTML = '';\n\n        // Display based on type\n        switch(type) {\n            case 'event':\n                this.displayEvent(data);\n                break;\n            case 'agent':\n                this.displayAgent(data);\n                break;\n            case 'tool':\n                this.displayTool(data);\n                break;\n            case 'todo':\n                this.displayTodo(data);\n                break;\n            case 'instruction':\n                this.displayInstruction(data);\n                break;\n            case 'session':\n                this.displaySession(data);\n                break;\n            case 'file_operation':\n                // Convert file tool to file operation format if needed\n                if (data.name && (data.params || data.tool_parameters)) {\n                    const convertedData = this.convertToolToFileOperation(data);\n                    this.displayFileOperation(convertedData);\n                } else {\n                    this.displayFileOperation(data);\n                }\n                break;\n            case 'hook':\n                this.displayHook(data);\n                break;\n            default:\n                this.displayGeneric(data);\n        }\n    }\n\n    /**\n     * Auto-detect data type based on object properties\n     * @param {Object} data - Data to analyze\n     * @returns {string} Detected type\n     */\n    detectType(data) {\n        if (!data || typeof data !== 'object') return 'generic';\n\n        // Event detection\n        if (data.hook_event_name || data.event_type || (data.type && data.timestamp)) {\n            return 'event';\n        }\n\n        // Agent detection  \n        if (data.agent_name || data.agentName || \n            (data.name && (data.status === 'active' || data.status === 'completed'))) {\n            return 'agent';\n        }\n\n        // Tool detection - PRIORITY: Check if it's a tool first\n        // This includes TodoWrite tools which should always be displayed as tools, not todos\n        if (data.tool_name || data.name === 'TodoWrite' || data.name === 'Read' || \n            data.tool_parameters || (data.params && data.icon) || \n            (data.name && data.type === 'tool')) {\n            return 'tool';\n        }\n\n        // Todo detection - Only for standalone todo lists, not tool todos\n        if (data.todos && !data.name && !data.params) {\n            return 'todo';\n        }\n\n        // Single todo item detection\n        if (data.content && data.activeForm && data.status && !data.name && !data.params) {\n            return 'todo';\n        }\n\n        // Instruction detection\n        if (data.text && data.preview && data.type === 'user_instruction') {\n            return 'instruction';\n        }\n\n        // Session detection\n        if (data.session_id && (data.startTime || data.lastActivity)) {\n            return 'session';\n        }\n\n        // File operation detection\n        if (data.file_path && (data.operations || data.operation)) {\n            return 'file_operation';\n        }\n\n        // File tool detection - handle file tools as file operations when they have file_path\n        if ((data.name === 'Read' || data.name === 'Write' || data.name === 'Edit' || \n             data.name === 'MultiEdit' || data.name === 'Grep' || data.name === 'Glob') &&\n            (data.params?.file_path || data.tool_parameters?.file_path)) {\n            // Convert file tool to file operation format for better display\n            return 'file_operation';\n        }\n\n        // Hook detection\n        if (data.event_type && (data.hook_name || data.subtype)) {\n            return 'hook';\n        }\n\n        return 'generic';\n    }\n\n    /**\n     * Display event data with comprehensive formatting\n     * PRIMARY: Event type, timestamp, and key details\n     * SECONDARY: Full event data in collapsible JSON\n     */\n    displayEvent(data) {\n        const eventType = this.formatEventType(data);\n        const timestamp = this.formatTimestamp(data.timestamp);\n        \n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>${eventType}</h6>\n                <span class=\"unified-viewer-timestamp\">${timestamp}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        // PRIMARY DATA: Event-specific key details\n        html += `<div class=\"primary-data\">`;\n        html += this.formatEventDetails(data);\n        \n        // Show important tool parameters inline if present\n        if (data.tool_name || data.data?.tool_name) {\n            const toolName = data.tool_name || data.data.tool_name;\n            html += `\n                <div class=\"detail-row highlight\">\n                    <span class=\"detail-label\">Tool:</span>\n                    <span class=\"detail-value\">${this.getToolIcon(toolName)} ${toolName}</span>\n                </div>\n            `;\n            \n            // Show key parameters for specific tools\n            const params = data.tool_parameters || data.data?.tool_parameters;\n            if (params) {\n                if (params.file_path) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">File:</span>\n                            <span class=\"detail-value code\">${params.file_path}</span>\n                        </div>\n                    `;\n                }\n                if (params.command) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Command:</span>\n                            <pre class=\"code-snippet\">${this.escapeHtml(params.command)}</pre>\n                        </div>\n                    `;\n                }\n            }\n        }\n        html += `</div>`;\n\n        // SECONDARY DATA: Collapsible JSON viewer for full event data\n        html += this.createCollapsibleJSON(data, 'Full Event Data');\n\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display agent data with full details\n     * PRIMARY: Agent status, active tools, and key info\n     * SECONDARY: Full agent data in collapsible JSON\n     */\n    displayAgent(data) {\n        const agentIcon = this.getAgentIcon(data.name || data.agentName);\n        const agentName = data.name || data.agentName || 'Unknown Agent';\n        const status = this.formatStatus(data.status);\n        \n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>${agentIcon} ${agentName}</h6>\n                <span class=\"unified-viewer-status\">${status}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        // PRIMARY DATA: Key agent information\n        html += `<div class=\"primary-data\">`;\n        \n        // Status with visual indicator\n        html += `\n            <div class=\"detail-row highlight\">\n                <span class=\"detail-label\">Status:</span>\n                <span class=\"detail-value ${this.formatStatusClass(status)}\">${status}</span>\n            </div>\n        `;\n\n        // Tools summary if present\n        if (data.tools && data.tools.length > 0) {\n            // Show active tools prominently\n            const activeTools = data.tools.filter(t => t.status === 'in_progress');\n            const completedTools = data.tools.filter(t => t.status === 'completed');\n            \n            if (activeTools.length > 0) {\n                html += `\n                    <div class=\"active-tools-section\">\n                        <span class=\"section-label\">🔄 Active Tools:</span>\n                        <div class=\"tools-grid\">\n                `;\n                activeTools.forEach(tool => {\n                    html += `\n                        <div class=\"tool-chip active\">\n                            ${this.getToolIcon(tool.name)} ${tool.name}\n                        </div>\n                    `;\n                });\n                html += `</div></div>`;\n            }\n            \n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Tools Summary:</span>\n                    <span class=\"detail-value\">\n                        ${activeTools.length} active, ${completedTools.length} completed, ${data.tools.length} total\n                    </span>\n                </div>\n            `;\n        }\n\n        // Current task if available\n        if (data.currentTask || data.description) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Current Task:</span>\n                    <span class=\"detail-value\">${data.currentTask || data.description}</span>\n                </div>\n            `;\n        }\n        \n        html += `</div>`;\n\n        // SECONDARY DATA: Collapsible JSON viewer\n        html += this.createCollapsibleJSON(data, 'Full Agent Details');\n\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display tool data with parameters and results\n     * Special handling for TodoWrite to show todos prominently\n     */\n    displayTool(data) {\n        const toolName = data.name || data.tool_name || 'Unknown Tool';\n        const toolIcon = this.getToolIcon(toolName);\n        const status = this.formatStatus(data.status);\n        \n        // Special handling for TodoWrite tool\n        if (toolName === 'TodoWrite') {\n            this.displayTodoWriteTool(data);\n            return;\n        }\n        \n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>${toolIcon} ${toolName}</h6>\n                <span class=\"unified-viewer-status\">${status}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        // PRIMARY DATA: Show important tool-specific information first\n        const params = data.params || data.tool_parameters || {};\n        \n        // Tool-specific primary data display\n        if (toolName === 'Read' || toolName === 'Edit' || toolName === 'Write') {\n            // File tools - show file path prominently\n            if (params.file_path) {\n                html += `\n                    <div class=\"primary-data\">\n                        <div class=\"detail-row highlight\">\n                            <span class=\"detail-label\">📁 File:</span>\n                            <span class=\"detail-value code\">${params.file_path}</span>\n                        </div>\n                `;\n                if (params.old_string) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Old Text:</span>\n                            <pre class=\"code-snippet\">${this.escapeHtml(params.old_string.substring(0, 200))}${params.old_string.length > 200 ? '...' : ''}</pre>\n                        </div>\n                    `;\n                }\n                if (params.new_string) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">New Text:</span>\n                            <pre class=\"code-snippet\">${this.escapeHtml(params.new_string.substring(0, 200))}${params.new_string.length > 200 ? '...' : ''}</pre>\n                        </div>\n                    `;\n                }\n                html += '</div>';\n            }\n        } else if (toolName === 'Bash') {\n            // Bash tool - show command prominently\n            if (params.command) {\n                html += `\n                    <div class=\"primary-data\">\n                        <div class=\"detail-row highlight\">\n                            <span class=\"detail-label\">💻 Command:</span>\n                            <pre class=\"code-snippet\">${this.escapeHtml(params.command)}</pre>\n                        </div>\n                    </div>\n                `;\n            }\n        } else if (toolName === 'Grep' || toolName === 'Glob') {\n            // Search tools - show pattern prominently\n            if (params.pattern) {\n                html += `\n                    <div class=\"primary-data\">\n                        <div class=\"detail-row highlight\">\n                            <span class=\"detail-label\">🔍 Pattern:</span>\n                            <span class=\"detail-value code\">${this.escapeHtml(params.pattern)}</span>\n                        </div>\n                `;\n                if (params.path) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Path:</span>\n                            <span class=\"detail-value\">${params.path}</span>\n                        </div>\n                    `;\n                }\n                html += '</div>';\n            }\n        } else if (toolName === 'Task') {\n            // Task tool - show delegation info prominently\n            if (params.subagent_type) {\n                html += `\n                    <div class=\"primary-data\">\n                        <div class=\"detail-row highlight\">\n                            <span class=\"detail-label\">🤖 Delegating to:</span>\n                            <span class=\"detail-value\">${params.subagent_type} agent</span>\n                        </div>\n                `;\n                if (params.description) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Task:</span>\n                            <span class=\"detail-value\">${params.description}</span>\n                        </div>\n                    `;\n                }\n                html += '</div>';\n            }\n        }\n\n        // Status and metadata\n        html += `\n            <div class=\"detail-row\">\n                <span class=\"detail-label\">Status:</span>\n                <span class=\"detail-value\">${status}</span>\n            </div>\n        `;\n\n        if (data.callCount) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Call Count:</span>\n                    <span class=\"detail-value\">${data.callCount}</span>\n                </div>\n            `;\n        }\n\n        // Collapsible JSON viewer for full details\n        html += this.createCollapsibleJSON(data, 'Full Tool Details');\n        \n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display TodoWrite tool with todos list prominently after title\n     */\n    displayTodoWriteTool(data) {\n        const status = this.formatStatus(data.status);\n        const params = data.params || data.tool_parameters || {};\n        const todos = params.todos || [];\n        \n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>📝 TodoWrite</h6>\n                <span class=\"unified-viewer-status\">${status}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        // PRIMARY DATA: Todo list and status summary immediately after title\n        if (todos.length > 0) {\n            const statusCounts = this.getTodoStatusCounts(todos);\n            \n            // Status summary - horizontal single line format\n            html += `\n                <div class=\"todo-status-line\">\n                    <span class=\"status-inline\">✅ ${statusCounts.completed} Done</span>\n                    <span class=\"status-inline\">🔄 ${statusCounts.in_progress} Active</span>\n                    <span class=\"status-inline\">⏳ ${statusCounts.pending} Pending</span>\n                </div>\n            `;\n\n            // Todo items list\n            html += `\n                <div class=\"todo-list-primary\">\n            `;\n            \n            todos.forEach((todo, index) => {\n                const statusIcon = this.getCheckboxIcon(todo.status);\n                const displayText = todo.status === 'in_progress' ? \n                    (todo.activeForm || todo.content) : todo.content;\n                const statusClass = this.formatStatusClass(todo.status);\n                \n                html += `\n                    <div class=\"todo-item ${todo.status}\">\n                        <span class=\"todo-icon ${statusClass}\">${statusIcon}</span>\n                        <span class=\"todo-text\">${this.escapeHtml(displayText)}</span>\n                        ${todo.status === 'in_progress' ? '<span class=\"todo-badge active\">ACTIVE</span>' : ''}\n                    </div>\n                `;\n            });\n            \n            html += `\n                </div>\n            `;\n        } else {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-value\">No todos in list</span>\n                </div>\n            `;\n        }\n\n        // Metadata section\n        if (data.callCount && data.callCount > 1) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Updates:</span>\n                    <span class=\"detail-value\">${data.callCount}</span>\n                </div>\n            `;\n        }\n\n        // Collapsible JSON viewer for full details\n        html += this.createCollapsibleJSON(data, 'Full Details');\n        \n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display todo data with checklist formatting (for standalone todos, not TodoWrite)\n     */\n    displayTodo(data) {\n        // Handle different data structures for standalone todos\n        let todos;\n        let toolName = 'Todo List';\n        \n        if (data.todos && Array.isArray(data.todos)) {\n            todos = data.todos;\n        } else if (Array.isArray(data)) {\n            todos = data;\n        } else if (data.content && data.activeForm && data.status) {\n            todos = [data];\n        } else {\n            todos = [];\n        }\n        \n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>📋 ${toolName}</h6>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        if (todos.length > 0) {\n            // Show todos immediately\n            html += `\n                <div class=\"todo-list-primary\">\n            `;\n            \n            todos.forEach((todo) => {\n                const statusIcon = this.getCheckboxIcon(todo.status);\n                const displayText = todo.status === 'in_progress' ? \n                    (todo.activeForm || todo.content) : todo.content;\n                const statusClass = this.formatStatusClass(todo.status);\n                \n                html += `\n                    <div class=\"todo-item ${todo.status}\">\n                        <span class=\"todo-icon ${statusClass}\">${statusIcon}</span>\n                        <span class=\"todo-text\">${this.escapeHtml(displayText)}</span>\n                        <span class=\"todo-status-text ${statusClass}\">${todo.status.replace('_', ' ')}</span>\n                    </div>\n                `;\n            });\n            \n            html += `\n                </div>\n            `;\n        } else {\n            html += `\n                <div class=\"detail-section\">\n                    <div class=\"no-todos\">No todo items found</div>\n                </div>\n            `;\n        }\n\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display instruction data\n     * PRIMARY: Instruction text prominently displayed\n     * SECONDARY: Metadata in collapsible section\n     */\n    displayInstruction(data) {\n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>💬 User Instruction</h6>\n                <span class=\"unified-viewer-timestamp\">${this.formatTimestamp(data.timestamp)}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n        \n        // PRIMARY DATA: The instruction text itself\n        html += `\n            <div class=\"primary-data\">\n                <div class=\"instruction-content\">\n                    ${this.escapeHtml(data.text)}\n                </div>\n                <div class=\"instruction-meta\">\n                    <span class=\"meta-item\">📏 ${data.text.length} characters</span>\n                    <span class=\"meta-item\">🕐 ${this.formatTimestamp(data.timestamp)}</span>\n                </div>\n            </div>\n        `;\n\n        // SECONDARY DATA: Full instruction object if there's more data\n        if (Object.keys(data).length > 3) {\n            html += this.createCollapsibleJSON(data, 'Full Instruction Data');\n        }\n        \n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display session data\n     */\n    displaySession(data) {\n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>🎯 Session: ${data.session_id || data.id}</h6>\n                <span class=\"unified-viewer-status\">${this.formatStatus(data.status || 'active')}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Session ID:</span>\n                    <span class=\"detail-value\">${data.session_id || data.id}</span>\n                </div>\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Start Time:</span>\n                    <span class=\"detail-value\">${this.formatTimestamp(data.startTime || data.timestamp)}</span>\n                </div>\n        `;\n\n        if (data.working_directory) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Working Directory:</span>\n                    <span class=\"detail-value\">${data.working_directory}</span>\n                </div>\n            `;\n        }\n\n        if (data.git_branch) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Git Branch:</span>\n                    <span class=\"detail-value\">${data.git_branch}</span>\n                </div>\n            `;\n        }\n\n        if (data.eventCount !== undefined) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Events:</span>\n                    <span class=\"detail-value\">${data.eventCount}</span>\n                </div>\n            `;\n        }\n\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display file operation data with enhanced file viewing capabilities\n     */\n    displayFileOperation(data) {\n        const fileName = data.file_path ? data.file_path.split('/').pop() : 'Unknown File';\n        const isSingleFile = this.isSingleFileOperation(data);\n        const fileIcon = this.getFileIcon(data.file_path);\n        const fileType = this.getFileType(data.file_path);\n        \n        let html = `\n            <div class=\"unified-viewer-header ${isSingleFile ? 'single-file-header' : ''}\">\n                <h6>${fileIcon} File: ${fileName}</h6>\n                <span class=\"unified-viewer-count\">${data.operations ? data.operations.length : 1} operation${data.operations && data.operations.length !== 1 ? 's' : ''}</span>\n                ${fileType ? `<span class=\"file-type-badge\">${fileType}</span>` : ''}\n            </div>\n            <div class=\"unified-viewer-content\">\n                <div class=\"primary-data\">\n                    <div class=\"detail-row highlight\">\n                        <span class=\"detail-label\">📁 File Path:</span>\n                        <span class=\"detail-value code clickable-file-path\" \n                              onclick=\"window.showFileViewerModal && window.showFileViewerModal('${data.file_path}')\"\n                              title=\"Click to view file contents\\\\nKeyboard: Hover + V key or Ctrl/Cmd + Click\\\\nFile: ${data.file_path}\"\n                              tabindex=\"0\"\n                              role=\"button\"\n                              aria-label=\"Open file ${data.file_path} in viewer\"\n                              onkeypress=\"if(event.key==='Enter'||event.key===' '){window.showFileViewerModal && window.showFileViewerModal('${data.file_path}')}\">${data.file_path}</span>\n                    </div>\n        `;\n\n        // Enhanced file viewing for single file operations\n        if (data.file_path) {\n            const shouldShowPreview = this.shouldShowInlinePreview(data);\n            \n            html += `\n                <div class=\"file-actions ${isSingleFile ? 'single-file-actions' : ''}\">\n                    <button class=\"file-action-btn view-file-btn ${isSingleFile ? 'primary-action' : ''}\" \n                            onclick=\"window.showFileViewerModal && window.showFileViewerModal('${data.file_path}')\"\n                            title=\"View file contents with syntax highlighting\">\n                        ${fileIcon} View File Contents\n                    </button>\n                    ${isSingleFile && this.isTextFile(data.file_path) ? `\n                        <button class=\"file-action-btn inline-preview-btn\" \n                                onclick=\"window.unifiedDataViewer && window.unifiedDataViewer.toggleInlinePreview('${data.file_path}', this)\"\n                                title=\"Toggle inline preview\">\n                            📖 Quick Preview\n                        </button>\n                    ` : ''}\n                </div>\n            `;\n            \n            // Add inline preview container for single file operations\n            if (isSingleFile && shouldShowPreview) {\n                const previewId = this.generatePreviewId(data.file_path);\n                html += `\n                    <div class=\"inline-preview-container\" id=\"preview-${previewId}\" style=\"display: none;\">\n                        <div class=\"inline-preview-loading\">Loading preview...</div>\n                    </div>\n                `;\n            }\n        }\n\n        html += `</div>`;\n\n        if (data.operations && Array.isArray(data.operations)) {\n            html += `\n                <div class=\"detail-section\">\n                    <span class=\"detail-section-title\">Operations (${data.operations.length}):</span>\n                    <div class=\"operations-list\">\n                        ${data.operations.map((op, index) => `\n                            <div class=\"operation-item\">\n                                <div class=\"operation-header\">\n                                    <span class=\"operation-type\">${this.getOperationIcon(op.operation)} ${op.operation}</span>\n                                    <span class=\"operation-timestamp\">${this.formatTimestamp(op.timestamp)}</span>\n                                </div>\n                                <div class=\"operation-details\">\n                                    <span class=\"operation-agent\">by ${op.agent || 'Unknown'}</span>\n                                    ${op.workingDirectory ? `<span class=\"operation-dir\">in ${op.workingDirectory}</span>` : ''}\n                                </div>\n                            </div>\n                        `).join('')}\n                    </div>\n                </div>\n            `;\n        }\n\n        // Add collapsible JSON viewer for full file data\n        html += this.createCollapsibleJSON(data, 'Full File Data');\n\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display hook event data\n     */\n    displayHook(data) {\n        const hookType = data.event_type || data.subtype || 'unknown';\n        \n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>🔗 Hook: ${hookType}</h6>\n                <span class=\"unified-viewer-timestamp\">${this.formatTimestamp(data.timestamp)}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        html += this.formatHookDetails(data);\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display generic data with fallback formatting\n     */\n    displayGeneric(data) {\n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>📊 Data Details</h6>\n                ${data.timestamp ? `<span class=\"unified-viewer-timestamp\">${this.formatTimestamp(data.timestamp)}</span>` : ''}\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        if (typeof data === 'object' && data !== null) {\n            // Display meaningful properties\n            const meaningfulProps = ['id', 'name', 'type', 'status', 'timestamp', 'text', 'content', 'message'];\n            \n            for (let prop of meaningfulProps) {\n                if (data[prop] !== undefined) {\n                    let value = data[prop];\n                    if (typeof value === 'string' && value.length > 200) {\n                        value = value.substring(0, 200) + '...';\n                    }\n                    \n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">${prop}:</span>\n                            <span class=\"detail-value\">${this.escapeHtml(String(value))}</span>\n                        </div>\n                    `;\n                }\n            }\n        } else {\n            html += `<div class=\"simple-value\">${this.escapeHtml(String(data))}</div>`;\n        }\n\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    // ==================== FORMATTING UTILITIES ====================\n\n    /**\n     * Format event type for display\n     */\n    formatEventType(event) {\n        if (event.type && event.subtype) {\n            if (event.type === event.subtype || event.subtype === 'generic') {\n                return event.type;\n            }\n            return `${event.type}.${event.subtype}`;\n        }\n        if (event.type) return event.type;\n        if (event.hook_event_name) return event.hook_event_name;\n        return 'unknown';\n    }\n\n    /**\n     * Format detailed event data based on type\n     */\n    formatEventDetails(event) {\n        const data = event.data || {};\n        \n        switch (event.type) {\n            case 'hook':\n                return this.formatHookDetails(event);\n            case 'agent':\n                return this.formatAgentEventDetails(event);\n            case 'todo':\n                return this.formatTodoEventDetails(event);\n            case 'session':\n                return this.formatSessionEventDetails(event);\n            default:\n                return this.formatGenericEventDetails(event);\n        }\n    }\n\n    /**\n     * Format hook event details\n     */\n    formatHookDetails(event) {\n        const data = event.data || {};\n        const hookType = event.subtype || event.event_type || 'unknown';\n        \n        let html = `\n            <div class=\"detail-row\">\n                <span class=\"detail-label\">Hook Type:</span>\n                <span class=\"detail-value\">${hookType}</span>\n            </div>\n        `;\n\n        switch (hookType) {\n            case 'user_prompt':\n                const prompt = data.prompt_text || data.prompt_preview || '';\n                html += `\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">Prompt:</span>\n                        <div class=\"detail-value prompt-text\">${this.escapeHtml(prompt)}</div>\n                    </div>\n                `;\n                break;\n\n            case 'pre_tool':\n            case 'post_tool':\n                const toolName = data.tool_name || 'Unknown tool';\n                html += `\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">Tool:</span>\n                        <span class=\"detail-value\">${toolName}</span>\n                    </div>\n                `;\n                if (data.operation_type) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Operation:</span>\n                            <span class=\"detail-value\">${data.operation_type}</span>\n                        </div>\n                    `;\n                }\n                if (hookType === 'post_tool' && data.duration_ms) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Duration:</span>\n                            <span class=\"detail-value\">${data.duration_ms}ms</span>\n                        </div>\n                    `;\n                }\n                break;\n\n            case 'subagent_start':\n            case 'subagent_stop':\n                const agentType = data.agent_type || data.agent || 'Unknown';\n                html += `\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">Agent:</span>\n                        <span class=\"detail-value\">${agentType}</span>\n                    </div>\n                `;\n                if (hookType === 'subagent_start' && data.prompt) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Task:</span>\n                            <div class=\"detail-value\">${this.escapeHtml(data.prompt)}</div>\n                        </div>\n                    `;\n                }\n                if (hookType === 'subagent_stop' && data.reason) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Reason:</span>\n                            <span class=\"detail-value\">${data.reason}</span>\n                        </div>\n                    `;\n                }\n                break;\n        }\n\n        return html;\n    }\n\n    /**\n     * Format agent event details\n     */\n    formatAgentEventDetails(event) {\n        const data = event.data || {};\n        let html = '';\n\n        if (data.agent_type || data.name) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Agent Type:</span>\n                    <span class=\"detail-value\">${data.agent_type || data.name}</span>\n                </div>\n            `;\n        }\n\n        if (event.subtype) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Action:</span>\n                    <span class=\"detail-value\">${event.subtype}</span>\n                </div>\n            `;\n        }\n\n        return html;\n    }\n\n    /**\n     * Format todo event details\n     */\n    formatTodoEventDetails(event) {\n        const data = event.data || {};\n        let html = '';\n\n        if (data.todos && Array.isArray(data.todos)) {\n            const statusCounts = this.getTodoStatusCounts(data.todos);\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Todo Items:</span>\n                    <span class=\"detail-value\">${data.todos.length} total</span>\n                </div>\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Status:</span>\n                    <span class=\"detail-value\">${statusCounts.completed} completed, ${statusCounts.in_progress} in progress</span>\n                </div>\n            `;\n        }\n\n        return html;\n    }\n\n    /**\n     * Format session event details\n     */\n    formatSessionEventDetails(event) {\n        const data = event.data || {};\n        let html = '';\n\n        if (data.session_id) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Session ID:</span>\n                    <span class=\"detail-value\">${data.session_id}</span>\n                </div>\n            `;\n        }\n\n        if (event.subtype) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Action:</span>\n                    <span class=\"detail-value\">${event.subtype}</span>\n                </div>\n            `;\n        }\n\n        return html;\n    }\n\n    /**\n     * Format generic event details\n     */\n    formatGenericEventDetails(event) {\n        const data = event.data || {};\n        let html = '';\n\n        // Show basic data properties\n        const basicProps = ['message', 'description', 'value', 'result'];\n        for (let prop of basicProps) {\n            if (data[prop] !== undefined) {\n                let value = data[prop];\n                if (typeof value === 'string' && value.length > 200) {\n                    value = value.substring(0, 200) + '...';\n                }\n                html += `\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">${prop}:</span>\n                        <span class=\"detail-value\">${this.escapeHtml(String(value))}</span>\n                    </div>\n                `;\n            }\n        }\n\n        return html;\n    }\n\n    /**\n     * Format event data section\n     */\n    formatEventData(event) {\n        const data = event.data;\n        if (!data || Object.keys(data).length === 0) return '';\n        \n        return `\n            <div class=\"detail-section\">\n                <span class=\"detail-section-title\">Event Data:</span>\n                <pre class=\"event-data-json\">${this.escapeHtml(JSON.stringify(data, null, 2))}</pre>\n            </div>\n        `;\n    }\n\n    /**\n     * Format tool/event parameters\n     */\n    formatParameters(params, title = 'Parameters') {\n        if (!params || Object.keys(params).length === 0) {\n            return `\n                <div class=\"detail-section\">\n                    <span class=\"detail-section-title\">${title}:</span>\n                    <div class=\"no-params\">No parameters</div>\n                </div>\n            `;\n        }\n\n        const paramKeys = Object.keys(params);\n        return `\n            <div class=\"detail-section\">\n                <span class=\"detail-section-title\">${title} (${paramKeys.length}):</span>\n                <div class=\"params-list\">\n                    ${paramKeys.map(key => {\n                        const value = params[key];\n                        const displayValue = this.formatParameterValue(value);\n                        return `\n                            <div class=\"param-item\">\n                                <div class=\"param-key\">${key}:</div>\n                                <div class=\"param-value\">${displayValue}</div>\n                            </div>\n                        `;\n                    }).join('')}\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Format parameter value with appropriate styling\n     */\n    formatParameterValue(value) {\n        if (typeof value === 'string') {\n            if (value.length > 500) {\n                return `<pre class=\"param-text-long\">${this.escapeHtml(value.substring(0, 500) + '...\\n\\n[Content truncated - ' + value.length + ' total characters]')}</pre>`;\n            } else if (value.length > 100) {\n                return `<pre class=\"param-text\">${this.escapeHtml(value)}</pre>`;\n            } else {\n                return `<span class=\"param-text-short\">${this.escapeHtml(value)}</span>`;\n            }\n        } else if (typeof value === 'object' && value !== null) {\n            // Special handling for todos array - display as formatted list instead of raw JSON\n            if (Array.isArray(value) && value.length > 0 && \n                value[0].hasOwnProperty('content') && value[0].hasOwnProperty('status')) {\n                return this.formatTodosAsParameter(value);\n            }\n            \n            try {\n                return `<pre class=\"param-json\">${this.escapeHtml(JSON.stringify(value, null, 2))}</pre>`;\n            } catch (e) {\n                return `<span class=\"param-error\">Error displaying object</span>`;\n            }\n        } else {\n            return `<span class=\"param-primitive\">${this.escapeHtml(String(value))}</span>`;\n        }\n    }\n\n    /**\n     * Format todos array as a parameter value\n     */\n    formatTodosAsParameter(todos) {\n        const statusCounts = this.getTodoStatusCounts(todos);\n        \n        let html = `\n            <div class=\"param-todos\">\n                <div class=\"param-todos-header\">\n                    Array of todo objects (${todos.length} items)\n                </div>\n                <div class=\"param-todos-summary\">\n                    ${statusCounts.completed} completed • ${statusCounts.in_progress} in progress • ${statusCounts.pending} pending\n                </div>\n                <div class=\"param-todos-list\">\n        `;\n        \n        todos.forEach((todo, index) => {\n            const statusIcon = this.getCheckboxIcon(todo.status);\n            const displayText = todo.status === 'in_progress' ? \n                (todo.activeForm || todo.content) : todo.content;\n            const statusClass = this.formatStatusClass(todo.status);\n            \n            html += `\n                <div class=\"param-todo-item ${todo.status}\">\n                    <div class=\"param-todo-checkbox\">\n                        <span class=\"param-checkbox-icon ${statusClass}\">${statusIcon}</span>\n                    </div>\n                    <div class=\"param-todo-text\">\n                        <span class=\"param-todo-content\">${this.escapeHtml(displayText)}</span>\n                        <span class=\"param-todo-status-badge ${statusClass}\">${todo.status.replace('_', ' ')}</span>\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += `\n                </div>\n            </div>\n        `;\n        \n        return html;\n    }\n\n    // ==================== FILE OPERATION UTILITIES ====================\n\n    /**\n     * Determine if this is a single file operation\n     */\n    isSingleFileOperation(data) {\n        // Single file if no operations array or only one operation\n        if (!data.operations) return true;\n        return data.operations.length === 1;\n    }\n\n    /**\n     * Get file icon based on file extension\n     */\n    getFileIcon(filePath) {\n        if (!filePath) return '📄';\n        \n        const ext = filePath.split('.').pop()?.toLowerCase();\n        const iconMap = {\n            // Code files\n            'js': '🟨',\n            'jsx': '⚛️',\n            'ts': '🔷',\n            'tsx': '⚛️',\n            'py': '🐍',\n            'java': '☕',\n            'cpp': '⚡',\n            'c': '⚡',\n            'cs': '#️⃣',\n            'php': '🐘',\n            'rb': '💎',\n            'go': '🐹',\n            'rs': '🦀',\n            'swift': '🦉',\n            'kt': '🅺',\n            'scala': '🎯',\n            \n            // Web files\n            'html': '🌐',\n            'htm': '🌐',\n            'css': '🎨',\n            'scss': '🎨',\n            'sass': '🎨',\n            'less': '🎨',\n            'vue': '💚',\n            \n            // Config files\n            'json': '📋',\n            'xml': '📄',\n            'yaml': '⚙️',\n            'yml': '⚙️',\n            'toml': '⚙️',\n            'ini': '⚙️',\n            'conf': '⚙️',\n            'config': '⚙️',\n            \n            // Documentation\n            'md': '📝',\n            'txt': '📃',\n            'rtf': '📃',\n            'pdf': '📕',\n            'doc': '📘',\n            'docx': '📘',\n            \n            // Images\n            'jpg': '🖼️',\n            'jpeg': '🖼️',\n            'png': '🖼️',\n            'gif': '🖼️',\n            'svg': '🎨',\n            'webp': '🖼️',\n            'ico': '🖼️',\n            \n            // Archives\n            'zip': '🗜️',\n            'tar': '🗜️',\n            'gz': '🗜️',\n            'rar': '🗜️',\n            '7z': '🗜️',\n            \n            // Other\n            'sql': '🗃️',\n            'db': '🗃️',\n            'log': '📊',\n            'env': '🔐',\n            'lock': '🔒'\n        };\n        \n        return iconMap[ext] || '📄';\n    }\n\n    /**\n     * Get file type description\n     */\n    getFileType(filePath) {\n        if (!filePath) return null;\n        \n        const ext = filePath.split('.').pop()?.toLowerCase();\n        const typeMap = {\n            'js': 'JavaScript',\n            'jsx': 'React JSX',\n            'ts': 'TypeScript',\n            'tsx': 'React TSX',\n            'py': 'Python',\n            'java': 'Java',\n            'cpp': 'C++',\n            'c': 'C',\n            'cs': 'C#',\n            'php': 'PHP',\n            'rb': 'Ruby',\n            'go': 'Go',\n            'rs': 'Rust',\n            'html': 'HTML',\n            'css': 'CSS',\n            'scss': 'SCSS',\n            'json': 'JSON',\n            'xml': 'XML',\n            'yaml': 'YAML',\n            'yml': 'YAML',\n            'md': 'Markdown',\n            'txt': 'Text',\n            'sql': 'SQL',\n            'log': 'Log File'\n        };\n        \n        return typeMap[ext] || null;\n    }\n\n    /**\n     * Check if file should show inline preview\n     */\n    shouldShowInlinePreview(data) {\n        // Show preview for single file text operations\n        return this.isSingleFileOperation(data) && this.isTextFile(data.file_path);\n    }\n\n    /**\n     * Check if file is a text file suitable for preview\n     */\n    isTextFile(filePath) {\n        if (!filePath) return false;\n        \n        const ext = filePath.split('.').pop()?.toLowerCase();\n        const textExtensions = [\n            'txt', 'md', 'json', 'xml', 'yaml', 'yml', 'ini', 'conf', 'config',\n            'js', 'jsx', 'ts', 'tsx', 'py', 'java', 'cpp', 'c', 'cs', 'php', 'rb',\n            'go', 'rs', 'swift', 'kt', 'scala', 'html', 'htm', 'css', 'scss', 'sass',\n            'less', 'vue', 'sql', 'log', 'env', 'gitignore', 'dockerignore'\n        ];\n        \n        return textExtensions.includes(ext);\n    }\n\n    /**\n     * Toggle inline preview for a file\n     */\n    async toggleInlinePreview(filePath, buttonElement) {\n        const containerId = `preview-${this.generatePreviewId(filePath)}`;\n        const container = document.getElementById(containerId);\n        \n        if (!container) {\n            console.warn('Preview container not found');\n            return;\n        }\n        \n        if (container.style.display === 'none') {\n            // Show preview\n            container.style.display = 'block';\n            buttonElement.innerHTML = '📖 Hide Preview';\n            await this.loadInlinePreview(filePath, container);\n        } else {\n            // Hide preview\n            container.style.display = 'none';\n            buttonElement.innerHTML = '📖 Quick Preview';\n        }\n    }\n\n    /**\n     * Load inline preview content\n     */\n    async loadInlinePreview(filePath, container) {\n        try {\n            // This would typically make an API call to get file contents\n            // For now, show a placeholder\n            container.innerHTML = `\n                <div class=\"inline-preview-header\">\n                    <span class=\"preview-label\">Quick Preview:</span>\n                    <span class=\"preview-file\">${filePath}</span>\n                </div>\n                <div class=\"inline-preview-content\">\n                    <div class=\"preview-note\">\n                        💡 Inline preview feature ready - API integration needed\n                        <br>Click \"View File Contents\" for full syntax-highlighted view\n                    </div>\n                </div>\n            `;\n        } catch (error) {\n            container.innerHTML = `\n                <div class=\"inline-preview-error\">\n                    ❌ Could not load preview: ${error.message}\n                </div>\n            `;\n        }\n    }\n\n    /**\n     * Generate a unique ID for preview containers\n     */\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2, 9);\n    }\n\n    /**\n     * Generate preview ID based on file path\n     */\n    generatePreviewId(filePath) {\n        return btoa(filePath).replace(/[^a-zA-Z0-9]/g, '');\n    }\n\n    // ==================== UTILITY METHODS ====================\n\n    /**\n     * Format timestamp for display\n     */\n    formatTimestamp(timestamp) {\n        if (!timestamp) return 'Unknown time';\n        \n        try {\n            const date = new Date(timestamp);\n            if (isNaN(date.getTime())) return 'Invalid date';\n            return date.toLocaleString();\n        } catch (error) {\n            return 'Invalid date';\n        }\n    }\n\n    /**\n     * Format status with appropriate styling\n     */\n    formatStatus(status) {\n        if (!status) return 'unknown';\n        \n        const statusMap = {\n            'active': '🟢 Active',\n            'completed': '✅ Completed', \n            'in_progress': '🔄 In Progress',\n            'pending': '⏳ Pending',\n            'error': '❌ Error',\n            'failed': '❌ Failed'\n        };\n        \n        return statusMap[status] || status;\n    }\n\n    /**\n     * Get CSS class for status styling\n     */\n    formatStatusClass(status) {\n        return `status-${status}`;\n    }\n\n    /**\n     * Get icon for agent type\n     */\n    getAgentIcon(agentName) {\n        const icons = {\n            'PM': '🎯',\n            'Engineer': '🔧',\n            'Engineer Agent': '🔧',\n            'Research': '🔍',\n            'Research Agent': '🔍',\n            'QA': '✅',\n            'QA Agent': '✅',\n            'Architect': '🏗️',\n            'Architect Agent': '🏗️',\n            'Ops': '⚙️',\n            'Ops Agent': '⚙️'\n        };\n        return icons[agentName] || '🤖';\n    }\n\n    /**\n     * Get icon for tool type\n     */\n    getToolIcon(toolName) {\n        const icons = {\n            'Read': '👁️',\n            'Write': '✍️', \n            'Edit': '✏️',\n            'MultiEdit': '📝',\n            'Bash': '💻',\n            'Grep': '🔍',\n            'Glob': '📂',\n            'LS': '📁',\n            'TodoWrite': '📝',\n            'Task': '📋',\n            'WebFetch': '🌐'\n        };\n        return icons[toolName] || '🔧';\n    }\n\n    /**\n     * Get checkbox icon for todo status\n     */\n    getCheckboxIcon(status) {\n        const icons = {\n            'pending': '⏳',\n            'in_progress': '🔄',\n            'completed': '✅'\n        };\n        return icons[status] || '❓';\n    }\n\n    /**\n     * Get icon for file operation type\n     */\n    getOperationIcon(operation) {\n        const icons = {\n            'read': '👁️',\n            'write': '✍️',\n            'edit': '✏️',\n            'delete': '🗑️',\n            'create': '📝',\n            'search': '🔍',\n            'list': '📂',\n            'copy': '📋',\n            'move': '📦',\n            'bash': '💻'\n        };\n        return icons[operation.toLowerCase()] || '📄';\n    }\n\n    /**\n     * Convert tool data to file operation format for better display\n     */\n    convertToolToFileOperation(toolData) {\n        const params = toolData.params || toolData.tool_parameters || {};\n        const filePath = params.file_path || params.path || params.notebook_path;\n        \n        if (!filePath) {\n            return toolData; // Return original if no file path\n        }\n\n        // Create file operation format\n        const operation = {\n            operation: toolData.name.toLowerCase(),\n            timestamp: toolData.timestamp || new Date().toISOString(),\n            agent: 'Activity Tool',\n            sessionId: toolData.sessionId || 'unknown',\n            details: {\n                parameters: params,\n                tool_name: toolData.name,\n                status: toolData.status || 'completed'\n            }\n        };\n\n        return {\n            file_path: filePath,\n            operations: [operation],\n            lastOperation: operation.timestamp,\n            // Preserve original tool data for reference\n            originalTool: toolData\n        };\n    }\n\n    /**\n     * Get todo status counts\n     */\n    getTodoStatusCounts(todos) {\n        const counts = { completed: 0, in_progress: 0, pending: 0 };\n        \n        todos.forEach(todo => {\n            if (counts.hasOwnProperty(todo.status)) {\n                counts[todo.status]++;\n            }\n        });\n        \n        return counts;\n    }\n\n    /**\n     * Escape HTML for safe display\n     */\n    escapeHtml(text) {\n        if (typeof text !== 'string') return '';\n        \n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n    \n    /**\n     * Toggle JSON section visibility and update global state\n     * WHY: Maintains sticky state across all JSON sections for consistent behavior\n     * @param {string} sectionId - ID of the specific section being toggled\n     * @param {HTMLElement} button - The button element that was clicked\n     */\n    toggleJsonSection(sectionId, button) {\n        // Toggle the global state\n        this.globalJsonExpanded = !this.globalJsonExpanded;\n        \n        // Persist the preference to localStorage\n        localStorage.setItem('dashboard-json-expanded', this.globalJsonExpanded.toString());\n        \n        // Update ALL JSON sections on the page\n        this.updateAllJsonSections();\n        \n        // Dispatch event to notify other components (like module-viewer) of the change\n        document.dispatchEvent(new CustomEvent('jsonToggleChanged', {\n            detail: { expanded: this.globalJsonExpanded }\n        }));\n    }\n    \n    /**\n     * Toggle Full Event Data section visibility and update state\n     * WHY: Maintains separate sticky state for Full Event Data sections\n     * @param {string} sectionId - ID of the specific section being toggled\n     * @param {HTMLElement} button - The button element that was clicked\n     */\n    toggleFullEventSection(sectionId, button) {\n        // Toggle the full event data state\n        this.fullEventDataExpanded = !this.fullEventDataExpanded;\n        \n        // Persist the preference to localStorage\n        localStorage.setItem('dashboard-full-event-expanded', this.fullEventDataExpanded.toString());\n        \n        // Update ALL Full Event sections on the page\n        this.updateAllFullEventSections();\n        \n        // Dispatch event to notify other components of the change\n        document.dispatchEvent(new CustomEvent('fullEventToggleChanged', {\n            detail: { expanded: this.fullEventDataExpanded }\n        }));\n    }\n    \n    /**\n     * Update all JSON sections on the page to match global state\n     * WHY: Ensures all \"Structured Data\" sections maintain consistent visibility\n     */\n    updateAllJsonSections() {\n        // Find all unified JSON sections (NOT full event sections)\n        const allJsonContents = document.querySelectorAll('.unified-json-content');\n        const allJsonButtons = document.querySelectorAll('.unified-json-toggle');\n        \n        // Update each JSON section\n        allJsonContents.forEach(content => {\n            if (this.globalJsonExpanded) {\n                content.style.display = 'block';\n            } else {\n                content.style.display = 'none';\n            }\n        });\n        \n        // Update all button states\n        allJsonButtons.forEach(button => {\n            const title = button.textContent.substring(2); // Remove arrow\n            if (this.globalJsonExpanded) {\n                button.innerHTML = '▼ ' + title;\n                button.classList.add('expanded');\n            } else {\n                button.innerHTML = '▶ ' + title;\n                button.classList.remove('expanded');\n            }\n        });\n    }\n    \n    /**\n     * Update all Full Event Data sections on the page to match state\n     * WHY: Ensures all \"Full Event Data\" sections maintain consistent visibility\n     */\n    updateAllFullEventSections() {\n        // Find all full event sections\n        const allFullEventContents = document.querySelectorAll('.full-event-content');\n        const allFullEventButtons = document.querySelectorAll('.full-event-toggle');\n        \n        // Update each full event section\n        allFullEventContents.forEach(content => {\n            if (this.fullEventDataExpanded) {\n                content.style.display = 'block';\n            } else {\n                content.style.display = 'none';\n            }\n        });\n        \n        // Update all button states\n        allFullEventButtons.forEach(button => {\n            const title = button.textContent.substring(2); // Remove arrow\n            if (this.fullEventDataExpanded) {\n                button.innerHTML = '▼ ' + title;\n                button.classList.add('expanded');\n            } else {\n                button.innerHTML = '▶ ' + title;\n                button.classList.remove('expanded');\n            }\n        });\n    }\n\n    /**\n     * Create a collapsible JSON viewer for secondary details\n     * Provides a clean way to show full data without cluttering the main view\n     */\n    createCollapsibleJSON(data, title = 'Full Details') {\n        // Generate unique ID for this collapsible section\n        const sectionId = `json-details-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        \n        // Filter out sensitive or overly verbose properties\n        const cleanData = this.cleanDataForDisplay(data);\n        \n        // Determine which state to use based on title\n        // \"Full Event Data\" and similar titles use the fullEventDataExpanded state\n        // Other titles use the global JSON state (for backward compatibility)\n        const isFullEventData = title.includes('Full Event') || title.includes('Full Details') || \n                               title.includes('Full Agent') || title.includes('Full Tool');\n        const isExpanded = isFullEventData ? this.fullEventDataExpanded : this.globalJsonExpanded;\n        const display = isExpanded ? 'block' : 'none';\n        const arrow = isExpanded ? '▼' : '▶';\n        const expandedClass = isExpanded ? 'expanded' : '';\n        \n        // Use different toggle function based on section type\n        const toggleFunction = isFullEventData ? 'toggleFullEventSection' : 'toggleJsonSection';\n        \n        return `\n            <div class=\"collapsible-json-section\">\n                <button class=\"collapsible-json-toggle ${isFullEventData ? 'full-event-toggle' : 'unified-json-toggle'} ${expandedClass}\" \n                        data-section-id=\"${sectionId}\"\n                        data-is-full-event=\"${isFullEventData}\"\n                        onclick=\"window.unifiedDataViewer.${toggleFunction}('${sectionId}', this)\">\n                    ${arrow} ${title}\n                </button>\n                <div id=\"${sectionId}\" class=\"collapsible-json-content ${isFullEventData ? 'full-event-content' : 'unified-json-content'}\" style=\"display: ${display};\">\n                    <pre class=\"json-viewer\">${this.escapeHtml(JSON.stringify(cleanData, null, 2))}</pre>\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Clean data for display in JSON viewer\n     * Removes circular references and limits string lengths\n     */\n    cleanDataForDisplay(data) {\n        const seen = new WeakSet();\n        \n        return JSON.parse(JSON.stringify(data, (key, value) => {\n            // Handle circular references\n            if (typeof value === 'object' && value !== null) {\n                if (seen.has(value)) {\n                    return '[Circular Reference]';\n                }\n                seen.add(value);\n            }\n            \n            // Truncate very long strings\n            if (typeof value === 'string' && value.length > 1000) {\n                return value.substring(0, 1000) + '... [truncated]';\n            }\n            \n            // Handle functions\n            if (typeof value === 'function') {\n                return '[Function]';\n            }\n            \n            return value;\n        }));\n    }\n\n    // ==================== PUBLIC API METHODS ====================\n\n    /**\n     * Clear the viewer\n     */\n    clear() {\n        if (this.container) {\n            this.container.innerHTML = '';\n        }\n        this.currentData = null;\n        this.currentType = null;\n    }\n\n    /**\n     * Get current displayed data\n     */\n    getCurrentData() {\n        return this.currentData;\n    }\n\n    /**\n     * Get current data type\n     */\n    getCurrentType() {\n        return this.currentType;\n    }\n\n    /**\n     * Check if viewer has data\n     */\n    hasData() {\n        return this.currentData !== null;\n    }\n}\n\n// Export for module use\nexport { UnifiedDataViewer };\nexport default UnifiedDataViewer;\n\n// Make globally available for non-module usage\nwindow.UnifiedDataViewer = UnifiedDataViewer;\n\n// Create a global instance immediately for inline onclick handlers\n// This ensures the instance is available when HTML is rendered dynamically\nif (typeof window !== 'undefined') {\n    // Always create/update the global instance\n    window.unifiedDataViewer = new UnifiedDataViewer();\n    \n    // Also expose the methods directly on window as a fallback\n    window.toggleFullEventSection = function(sectionId, button) {\n        if (window.unifiedDataViewer) {\n            window.unifiedDataViewer.toggleFullEventSection(sectionId, button);\n        }\n    };\n    \n    window.toggleJsonSection = function(sectionId, button) {\n        if (window.unifiedDataViewer) {\n            window.unifiedDataViewer.toggleJsonSection(sectionId, button);\n        }\n    };\n}\n\n// Create a global instance for inline preview functionality\nif (typeof window !== 'undefined') {\n    window.addEventListener('DOMContentLoaded', function() {\n        // Create global instance if one doesn't exist\n        if (!window.unifiedDataViewer) {\n            window.unifiedDataViewer = new UnifiedDataViewer();\n        }\n        \n        // Add keyboard shortcuts for file operations\n        document.addEventListener('keydown', function(e) {\n            // Ctrl/Cmd + Click on file paths to open file viewer\n            if ((e.ctrlKey || e.metaKey) && e.target.classList.contains('clickable-file-path')) {\n                e.preventDefault();\n                const filePath = e.target.textContent.trim();\n                if (window.showFileViewerModal) {\n                    window.showFileViewerModal(filePath);\n                }\n            }\n            \n            // 'V' key to open file viewer when hovering over clickable file paths\n            if (e.key.toLowerCase() === 'v' && document.querySelector('.clickable-file-path:hover')) {\n                const hoveredPath = document.querySelector('.clickable-file-path:hover');\n                if (hoveredPath && window.showFileViewerModal) {\n                    e.preventDefault();\n                    const filePath = hoveredPath.textContent.trim();\n                    window.showFileViewerModal(filePath);\n                }\n            }\n        });\n    });\n}"],"names":["UnifiedDataViewer","constructor","containerId","this","container","document","getElementById","currentData","currentType","globalJsonExpanded","localStorage","getItem","fullEventDataExpanded","addEventListener","e","detail","expanded","updateAllJsonSections","updateAllFullEventSections","display","data","type","detectType","innerHTML","displayEvent","displayAgent","displayTool","displayTodo","displayInstruction","displaySession","name","params","tool_parameters","convertedData","convertToolToFileOperation","displayFileOperation","displayHook","displayGeneric","console","warn","hook_event_name","event_type","timestamp","agent_name","agentName","status","tool_name","icon","todos","content","activeForm","text","preview","session_id","startTime","lastActivity","file_path","operations","operation","hook_name","subtype","html","formatEventType","formatTimestamp","formatEventDetails","toolName","getToolIcon","command","escapeHtml","createCollapsibleJSON","agentIcon","getAgentIcon","formatStatus","formatStatusClass","tools","length","activeTools","filter","t","completedTools","forEach","tool","currentTask","description","toolIcon","displayTodoWriteTool","old_string","substring","new_string","pattern","path","subagent_type","callCount","statusCounts","getTodoStatusCounts","completed","in_progress","pending","todo","index","statusIcon","getCheckboxIcon","displayText","statusClass","Array","isArray","replace","Object","keys","id","working_directory","git_branch","eventCount","fileName","split","pop","isSingleFile","isSingleFileOperation","fileIcon","getFileIcon","fileType","getFileType","shouldShowPreview","shouldShowInlinePreview","isTextFile","generatePreviewId","map","op","getOperationIcon","agent","workingDirectory","join","formatHookDetails","meaningfulProps","prop","value","String","event","formatAgentEventDetails","formatTodoEventDetails","formatSessionEventDetails","formatGenericEventDetails","hookType","prompt","prompt_text","prompt_preview","operation_type","duration_ms","agent_type","reason","basicProps","formatEventData","JSON","stringify","formatParameters","title","paramKeys","key","formatParameterValue","hasOwnProperty","formatTodosAsParameter","filePath","ext","toLowerCase","js","jsx","ts","tsx","py","java","cpp","c","cs","php","rb","go","rs","swift","kt","scala","htm","css","scss","sass","less","vue","json","xml","yaml","yml","toml","ini","conf","config","md","txt","rtf","pdf","doc","docx","jpg","jpeg","png","gif","svg","webp","ico","zip","tar","gz","rar","sql","db","log","env","lock","includes","toggleInlinePreview","buttonElement","style","loadInlinePreview","error","message","generateId","Date","now","toString","Math","random","substr","btoa","date","isNaN","getTime","toLocaleString","active","failed","PM","Engineer","Research","QA","Architect","Ops","Read","Write","Edit","MultiEdit","Bash","Grep","Glob","LS","TodoWrite","Task","WebFetch","read","write","edit","delete","create","search","list","copy","move","bash","toolData","notebook_path","toISOString","sessionId","details","parameters","lastOperation","originalTool","counts","div","createElement","textContent","toggleJsonSection","sectionId","button","setItem","dispatchEvent","CustomEvent","toggleFullEventSection","allJsonContents","querySelectorAll","allJsonButtons","classList","add","remove","allFullEventContents","allFullEventButtons","cleanData","cleanDataForDisplay","isFullEventData","isExpanded","seen","WeakSet","parse","has","clear","getCurrentData","getCurrentType","hasData","window","unifiedDataViewer","ctrlKey","metaKey","target","contains","preventDefault","trim","showFileViewerModal","querySelector","hoveredPath"],"mappings":"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"}