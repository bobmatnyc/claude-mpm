{"version":3,"file":"unified-data-viewer.js","sources":["../../js/components/unified-data-viewer.js"],"sourcesContent":["/**\n * Unified Data Viewer Component\n * \n * Consolidates all data formatting and display logic from event-driven tabs\n * (Activity, Events, Agents) into a single, reusable component.\n * \n * WHY: Eliminates code duplication across multiple components and provides\n * consistent data display formatting throughout the dashboard.\n * \n * DESIGN DECISION: Auto-detects data type and applies appropriate formatting,\n * while allowing manual type specification for edge cases.\n */\n\nclass UnifiedDataViewer {\n    constructor(containerId = 'module-data-content') {\n        this.container = document.getElementById(containerId);\n        this.currentData = null;\n        this.currentType = null;\n    }\n\n    /**\n     * Main display method - auto-detects type and renders data\n     * @param {Object|Array} data - Data to display\n     * @param {string|null} type - Optional type override\n     */\n    display(data, type = null) {\n        if (!this.container) {\n            console.warn('UnifiedDataViewer: Container not found');\n            return;\n        }\n\n        // Store current data for reference\n        this.currentData = data;\n        this.currentType = type;\n\n        // Auto-detect type if not provided\n        if (!type) {\n            type = this.detectType(data);\n        }\n\n        // Clear container\n        this.container.innerHTML = '';\n\n        // Display based on type\n        switch(type) {\n            case 'event':\n                this.displayEvent(data);\n                break;\n            case 'agent':\n                this.displayAgent(data);\n                break;\n            case 'tool':\n                this.displayTool(data);\n                break;\n            case 'todo':\n                this.displayTodo(data);\n                break;\n            case 'instruction':\n                this.displayInstruction(data);\n                break;\n            case 'session':\n                this.displaySession(data);\n                break;\n            case 'file_operation':\n                // Convert file tool to file operation format if needed\n                if (data.name && (data.params || data.tool_parameters)) {\n                    const convertedData = this.convertToolToFileOperation(data);\n                    this.displayFileOperation(convertedData);\n                } else {\n                    this.displayFileOperation(data);\n                }\n                break;\n            case 'hook':\n                this.displayHook(data);\n                break;\n            default:\n                this.displayGeneric(data);\n        }\n    }\n\n    /**\n     * Auto-detect data type based on object properties\n     * @param {Object} data - Data to analyze\n     * @returns {string} Detected type\n     */\n    detectType(data) {\n        if (!data || typeof data !== 'object') return 'generic';\n\n        // Event detection\n        if (data.hook_event_name || data.event_type || (data.type && data.timestamp)) {\n            return 'event';\n        }\n\n        // Agent detection  \n        if (data.agent_name || data.agentName || \n            (data.name && (data.status === 'active' || data.status === 'completed'))) {\n            return 'agent';\n        }\n\n        // Tool detection - PRIORITY: Check if it's a tool first\n        // This includes TodoWrite tools which should always be displayed as tools, not todos\n        if (data.tool_name || data.name === 'TodoWrite' || data.name === 'Read' || \n            data.tool_parameters || (data.params && data.icon) || \n            (data.name && data.type === 'tool')) {\n            return 'tool';\n        }\n\n        // Todo detection - Only for standalone todo lists, not tool todos\n        if (data.todos && !data.name && !data.params) {\n            return 'todo';\n        }\n\n        // Single todo item detection\n        if (data.content && data.activeForm && data.status && !data.name && !data.params) {\n            return 'todo';\n        }\n\n        // Instruction detection\n        if (data.text && data.preview && data.type === 'user_instruction') {\n            return 'instruction';\n        }\n\n        // Session detection\n        if (data.session_id && (data.startTime || data.lastActivity)) {\n            return 'session';\n        }\n\n        // File operation detection\n        if (data.file_path && (data.operations || data.operation)) {\n            return 'file_operation';\n        }\n\n        // File tool detection - handle file tools as file operations when they have file_path\n        if ((data.name === 'Read' || data.name === 'Write' || data.name === 'Edit' || \n             data.name === 'MultiEdit' || data.name === 'Grep' || data.name === 'Glob') &&\n            (data.params?.file_path || data.tool_parameters?.file_path)) {\n            // Convert file tool to file operation format for better display\n            return 'file_operation';\n        }\n\n        // Hook detection\n        if (data.event_type && (data.hook_name || data.subtype)) {\n            return 'hook';\n        }\n\n        return 'generic';\n    }\n\n    /**\n     * Display event data with comprehensive formatting\n     * PRIMARY: Event type, timestamp, and key details\n     * SECONDARY: Full event data in collapsible JSON\n     */\n    displayEvent(data) {\n        const eventType = this.formatEventType(data);\n        const timestamp = this.formatTimestamp(data.timestamp);\n        \n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>${eventType}</h6>\n                <span class=\"unified-viewer-timestamp\">${timestamp}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        // PRIMARY DATA: Event-specific key details\n        html += `<div class=\"primary-data\">`;\n        html += this.formatEventDetails(data);\n        \n        // Show important tool parameters inline if present\n        if (data.tool_name || data.data?.tool_name) {\n            const toolName = data.tool_name || data.data.tool_name;\n            html += `\n                <div class=\"detail-row highlight\">\n                    <span class=\"detail-label\">Tool:</span>\n                    <span class=\"detail-value\">${this.getToolIcon(toolName)} ${toolName}</span>\n                </div>\n            `;\n            \n            // Show key parameters for specific tools\n            const params = data.tool_parameters || data.data?.tool_parameters;\n            if (params) {\n                if (params.file_path) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">File:</span>\n                            <span class=\"detail-value code\">${params.file_path}</span>\n                        </div>\n                    `;\n                }\n                if (params.command) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Command:</span>\n                            <pre class=\"code-snippet\">${this.escapeHtml(params.command)}</pre>\n                        </div>\n                    `;\n                }\n            }\n        }\n        html += `</div>`;\n\n        // SECONDARY DATA: Collapsible JSON viewer for full event data\n        html += this.createCollapsibleJSON(data, 'Full Event Data');\n\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display agent data with full details\n     * PRIMARY: Agent status, active tools, and key info\n     * SECONDARY: Full agent data in collapsible JSON\n     */\n    displayAgent(data) {\n        const agentIcon = this.getAgentIcon(data.name || data.agentName);\n        const agentName = data.name || data.agentName || 'Unknown Agent';\n        const status = this.formatStatus(data.status);\n        \n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>${agentIcon} ${agentName}</h6>\n                <span class=\"unified-viewer-status\">${status}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        // PRIMARY DATA: Key agent information\n        html += `<div class=\"primary-data\">`;\n        \n        // Status with visual indicator\n        html += `\n            <div class=\"detail-row highlight\">\n                <span class=\"detail-label\">Status:</span>\n                <span class=\"detail-value ${this.formatStatusClass(status)}\">${status}</span>\n            </div>\n        `;\n\n        // Tools summary if present\n        if (data.tools && data.tools.length > 0) {\n            // Show active tools prominently\n            const activeTools = data.tools.filter(t => t.status === 'in_progress');\n            const completedTools = data.tools.filter(t => t.status === 'completed');\n            \n            if (activeTools.length > 0) {\n                html += `\n                    <div class=\"active-tools-section\">\n                        <span class=\"section-label\">🔄 Active Tools:</span>\n                        <div class=\"tools-grid\">\n                `;\n                activeTools.forEach(tool => {\n                    html += `\n                        <div class=\"tool-chip active\">\n                            ${this.getToolIcon(tool.name)} ${tool.name}\n                        </div>\n                    `;\n                });\n                html += `</div></div>`;\n            }\n            \n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Tools Summary:</span>\n                    <span class=\"detail-value\">\n                        ${activeTools.length} active, ${completedTools.length} completed, ${data.tools.length} total\n                    </span>\n                </div>\n            `;\n        }\n\n        // Current task if available\n        if (data.currentTask || data.description) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Current Task:</span>\n                    <span class=\"detail-value\">${data.currentTask || data.description}</span>\n                </div>\n            `;\n        }\n        \n        html += `</div>`;\n\n        // SECONDARY DATA: Collapsible JSON viewer\n        html += this.createCollapsibleJSON(data, 'Full Agent Details');\n\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display tool data with parameters and results\n     * Special handling for TodoWrite to show todos prominently\n     */\n    displayTool(data) {\n        const toolName = data.name || data.tool_name || 'Unknown Tool';\n        const toolIcon = this.getToolIcon(toolName);\n        const status = this.formatStatus(data.status);\n        \n        // Special handling for TodoWrite tool\n        if (toolName === 'TodoWrite') {\n            this.displayTodoWriteTool(data);\n            return;\n        }\n        \n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>${toolIcon} ${toolName}</h6>\n                <span class=\"unified-viewer-status\">${status}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        // PRIMARY DATA: Show important tool-specific information first\n        const params = data.params || data.tool_parameters || {};\n        \n        // Tool-specific primary data display\n        if (toolName === 'Read' || toolName === 'Edit' || toolName === 'Write') {\n            // File tools - show file path prominently\n            if (params.file_path) {\n                html += `\n                    <div class=\"primary-data\">\n                        <div class=\"detail-row highlight\">\n                            <span class=\"detail-label\">📁 File:</span>\n                            <span class=\"detail-value code\">${params.file_path}</span>\n                        </div>\n                `;\n                if (params.old_string) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Old Text:</span>\n                            <pre class=\"code-snippet\">${this.escapeHtml(params.old_string.substring(0, 200))}${params.old_string.length > 200 ? '...' : ''}</pre>\n                        </div>\n                    `;\n                }\n                if (params.new_string) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">New Text:</span>\n                            <pre class=\"code-snippet\">${this.escapeHtml(params.new_string.substring(0, 200))}${params.new_string.length > 200 ? '...' : ''}</pre>\n                        </div>\n                    `;\n                }\n                html += '</div>';\n            }\n        } else if (toolName === 'Bash') {\n            // Bash tool - show command prominently\n            if (params.command) {\n                html += `\n                    <div class=\"primary-data\">\n                        <div class=\"detail-row highlight\">\n                            <span class=\"detail-label\">💻 Command:</span>\n                            <pre class=\"code-snippet\">${this.escapeHtml(params.command)}</pre>\n                        </div>\n                    </div>\n                `;\n            }\n        } else if (toolName === 'Grep' || toolName === 'Glob') {\n            // Search tools - show pattern prominently\n            if (params.pattern) {\n                html += `\n                    <div class=\"primary-data\">\n                        <div class=\"detail-row highlight\">\n                            <span class=\"detail-label\">🔍 Pattern:</span>\n                            <span class=\"detail-value code\">${this.escapeHtml(params.pattern)}</span>\n                        </div>\n                `;\n                if (params.path) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Path:</span>\n                            <span class=\"detail-value\">${params.path}</span>\n                        </div>\n                    `;\n                }\n                html += '</div>';\n            }\n        } else if (toolName === 'Task') {\n            // Task tool - show delegation info prominently\n            if (params.subagent_type) {\n                html += `\n                    <div class=\"primary-data\">\n                        <div class=\"detail-row highlight\">\n                            <span class=\"detail-label\">🤖 Delegating to:</span>\n                            <span class=\"detail-value\">${params.subagent_type} agent</span>\n                        </div>\n                `;\n                if (params.description) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Task:</span>\n                            <span class=\"detail-value\">${params.description}</span>\n                        </div>\n                    `;\n                }\n                html += '</div>';\n            }\n        }\n\n        // Status and metadata\n        html += `\n            <div class=\"detail-row\">\n                <span class=\"detail-label\">Status:</span>\n                <span class=\"detail-value\">${status}</span>\n            </div>\n        `;\n\n        if (data.callCount) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Call Count:</span>\n                    <span class=\"detail-value\">${data.callCount}</span>\n                </div>\n            `;\n        }\n\n        // Collapsible JSON viewer for full details\n        html += this.createCollapsibleJSON(data, 'Full Tool Details');\n        \n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display TodoWrite tool with todos list prominently after title\n     */\n    displayTodoWriteTool(data) {\n        const status = this.formatStatus(data.status);\n        const params = data.params || data.tool_parameters || {};\n        const todos = params.todos || [];\n        \n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>📝 TodoWrite</h6>\n                <span class=\"unified-viewer-status\">${status}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        // PRIMARY DATA: Todo list and status summary immediately after title\n        if (todos.length > 0) {\n            const statusCounts = this.getTodoStatusCounts(todos);\n            \n            // Status summary - horizontal single line format\n            html += `\n                <div class=\"todo-status-line\">\n                    <span class=\"status-inline\">✅ ${statusCounts.completed} Done</span>\n                    <span class=\"status-inline\">🔄 ${statusCounts.in_progress} Active</span>\n                    <span class=\"status-inline\">⏳ ${statusCounts.pending} Pending</span>\n                </div>\n            `;\n\n            // Todo items list\n            html += `\n                <div class=\"todo-list-primary\">\n            `;\n            \n            todos.forEach((todo, index) => {\n                const statusIcon = this.getCheckboxIcon(todo.status);\n                const displayText = todo.status === 'in_progress' ? \n                    (todo.activeForm || todo.content) : todo.content;\n                const statusClass = this.formatStatusClass(todo.status);\n                \n                html += `\n                    <div class=\"todo-item ${todo.status}\">\n                        <span class=\"todo-icon ${statusClass}\">${statusIcon}</span>\n                        <span class=\"todo-text\">${this.escapeHtml(displayText)}</span>\n                        ${todo.status === 'in_progress' ? '<span class=\"todo-badge active\">ACTIVE</span>' : ''}\n                    </div>\n                `;\n            });\n            \n            html += `\n                </div>\n            `;\n        } else {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-value\">No todos in list</span>\n                </div>\n            `;\n        }\n\n        // Metadata section\n        if (data.callCount && data.callCount > 1) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Updates:</span>\n                    <span class=\"detail-value\">${data.callCount}</span>\n                </div>\n            `;\n        }\n\n        // Collapsible JSON viewer for full details\n        html += this.createCollapsibleJSON(data, 'Full Details');\n        \n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display todo data with checklist formatting (for standalone todos, not TodoWrite)\n     */\n    displayTodo(data) {\n        // Handle different data structures for standalone todos\n        let todos;\n        let toolName = 'Todo List';\n        \n        if (data.todos && Array.isArray(data.todos)) {\n            todos = data.todos;\n        } else if (Array.isArray(data)) {\n            todos = data;\n        } else if (data.content && data.activeForm && data.status) {\n            todos = [data];\n        } else {\n            todos = [];\n        }\n        \n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>📋 ${toolName}</h6>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        if (todos.length > 0) {\n            // Show todos immediately\n            html += `\n                <div class=\"todo-list-primary\">\n            `;\n            \n            todos.forEach((todo) => {\n                const statusIcon = this.getCheckboxIcon(todo.status);\n                const displayText = todo.status === 'in_progress' ? \n                    (todo.activeForm || todo.content) : todo.content;\n                const statusClass = this.formatStatusClass(todo.status);\n                \n                html += `\n                    <div class=\"todo-item ${todo.status}\">\n                        <span class=\"todo-icon ${statusClass}\">${statusIcon}</span>\n                        <span class=\"todo-text\">${this.escapeHtml(displayText)}</span>\n                        <span class=\"todo-status-text ${statusClass}\">${todo.status.replace('_', ' ')}</span>\n                    </div>\n                `;\n            });\n            \n            html += `\n                </div>\n            `;\n        } else {\n            html += `\n                <div class=\"detail-section\">\n                    <div class=\"no-todos\">No todo items found</div>\n                </div>\n            `;\n        }\n\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display instruction data\n     * PRIMARY: Instruction text prominently displayed\n     * SECONDARY: Metadata in collapsible section\n     */\n    displayInstruction(data) {\n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>💬 User Instruction</h6>\n                <span class=\"unified-viewer-timestamp\">${this.formatTimestamp(data.timestamp)}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n        \n        // PRIMARY DATA: The instruction text itself\n        html += `\n            <div class=\"primary-data\">\n                <div class=\"instruction-content\">\n                    ${this.escapeHtml(data.text)}\n                </div>\n                <div class=\"instruction-meta\">\n                    <span class=\"meta-item\">📏 ${data.text.length} characters</span>\n                    <span class=\"meta-item\">🕐 ${this.formatTimestamp(data.timestamp)}</span>\n                </div>\n            </div>\n        `;\n\n        // SECONDARY DATA: Full instruction object if there's more data\n        if (Object.keys(data).length > 3) {\n            html += this.createCollapsibleJSON(data, 'Full Instruction Data');\n        }\n        \n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display session data\n     */\n    displaySession(data) {\n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>🎯 Session: ${data.session_id || data.id}</h6>\n                <span class=\"unified-viewer-status\">${this.formatStatus(data.status || 'active')}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Session ID:</span>\n                    <span class=\"detail-value\">${data.session_id || data.id}</span>\n                </div>\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Start Time:</span>\n                    <span class=\"detail-value\">${this.formatTimestamp(data.startTime || data.timestamp)}</span>\n                </div>\n        `;\n\n        if (data.working_directory) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Working Directory:</span>\n                    <span class=\"detail-value\">${data.working_directory}</span>\n                </div>\n            `;\n        }\n\n        if (data.git_branch) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Git Branch:</span>\n                    <span class=\"detail-value\">${data.git_branch}</span>\n                </div>\n            `;\n        }\n\n        if (data.eventCount !== undefined) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Events:</span>\n                    <span class=\"detail-value\">${data.eventCount}</span>\n                </div>\n            `;\n        }\n\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display file operation data with file viewing capabilities\n     */\n    displayFileOperation(data) {\n        const fileName = data.file_path ? data.file_path.split('/').pop() : 'Unknown File';\n        \n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>📄 File: ${fileName}</h6>\n                <span class=\"unified-viewer-count\">${data.operations ? data.operations.length : 1} operation${data.operations && data.operations.length !== 1 ? 's' : ''}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n                <div class=\"primary-data\">\n                    <div class=\"detail-row highlight\">\n                        <span class=\"detail-label\">📁 File Path:</span>\n                        <span class=\"detail-value code\">${data.file_path}</span>\n                    </div>\n        `;\n\n        // Add file viewing button for tracked files\n        if (data.file_path) {\n            html += `\n                <div class=\"file-actions\">\n                    <button class=\"file-action-btn view-file-btn\" \n                            onclick=\"window.showFileViewerModal && window.showFileViewerModal('${data.file_path}')\"\n                            title=\"View file contents with syntax highlighting\">\n                        👁️ View File Contents\n                    </button>\n                </div>\n            `;\n        }\n\n        html += `</div>`;\n\n        if (data.operations && Array.isArray(data.operations)) {\n            html += `\n                <div class=\"detail-section\">\n                    <span class=\"detail-section-title\">Operations (${data.operations.length}):</span>\n                    <div class=\"operations-list\">\n                        ${data.operations.map((op, index) => `\n                            <div class=\"operation-item\">\n                                <div class=\"operation-header\">\n                                    <span class=\"operation-type\">${this.getOperationIcon(op.operation)} ${op.operation}</span>\n                                    <span class=\"operation-timestamp\">${this.formatTimestamp(op.timestamp)}</span>\n                                </div>\n                                <div class=\"operation-details\">\n                                    <span class=\"operation-agent\">by ${op.agent || 'Unknown'}</span>\n                                    ${op.workingDirectory ? `<span class=\"operation-dir\">in ${op.workingDirectory}</span>` : ''}\n                                </div>\n                            </div>\n                        `).join('')}\n                    </div>\n                </div>\n            `;\n        }\n\n        // Add collapsible JSON viewer for full file data\n        html += this.createCollapsibleJSON(data, 'Full File Data');\n\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display hook event data\n     */\n    displayHook(data) {\n        const hookType = data.event_type || data.subtype || 'unknown';\n        \n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>🔗 Hook: ${hookType}</h6>\n                <span class=\"unified-viewer-timestamp\">${this.formatTimestamp(data.timestamp)}</span>\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        html += this.formatHookDetails(data);\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    /**\n     * Display generic data with fallback formatting\n     */\n    displayGeneric(data) {\n        let html = `\n            <div class=\"unified-viewer-header\">\n                <h6>📊 Data Details</h6>\n                ${data.timestamp ? `<span class=\"unified-viewer-timestamp\">${this.formatTimestamp(data.timestamp)}</span>` : ''}\n            </div>\n            <div class=\"unified-viewer-content\">\n        `;\n\n        if (typeof data === 'object' && data !== null) {\n            // Display meaningful properties\n            const meaningfulProps = ['id', 'name', 'type', 'status', 'timestamp', 'text', 'content', 'message'];\n            \n            for (let prop of meaningfulProps) {\n                if (data[prop] !== undefined) {\n                    let value = data[prop];\n                    if (typeof value === 'string' && value.length > 200) {\n                        value = value.substring(0, 200) + '...';\n                    }\n                    \n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">${prop}:</span>\n                            <span class=\"detail-value\">${this.escapeHtml(String(value))}</span>\n                        </div>\n                    `;\n                }\n            }\n        } else {\n            html += `<div class=\"simple-value\">${this.escapeHtml(String(data))}</div>`;\n        }\n\n        html += '</div>';\n        this.container.innerHTML = html;\n    }\n\n    // ==================== FORMATTING UTILITIES ====================\n\n    /**\n     * Format event type for display\n     */\n    formatEventType(event) {\n        if (event.type && event.subtype) {\n            if (event.type === event.subtype || event.subtype === 'generic') {\n                return event.type;\n            }\n            return `${event.type}.${event.subtype}`;\n        }\n        if (event.type) return event.type;\n        if (event.hook_event_name) return event.hook_event_name;\n        return 'unknown';\n    }\n\n    /**\n     * Format detailed event data based on type\n     */\n    formatEventDetails(event) {\n        const data = event.data || {};\n        \n        switch (event.type) {\n            case 'hook':\n                return this.formatHookDetails(event);\n            case 'agent':\n                return this.formatAgentEventDetails(event);\n            case 'todo':\n                return this.formatTodoEventDetails(event);\n            case 'session':\n                return this.formatSessionEventDetails(event);\n            default:\n                return this.formatGenericEventDetails(event);\n        }\n    }\n\n    /**\n     * Format hook event details\n     */\n    formatHookDetails(event) {\n        const data = event.data || {};\n        const hookType = event.subtype || event.event_type || 'unknown';\n        \n        let html = `\n            <div class=\"detail-row\">\n                <span class=\"detail-label\">Hook Type:</span>\n                <span class=\"detail-value\">${hookType}</span>\n            </div>\n        `;\n\n        switch (hookType) {\n            case 'user_prompt':\n                const prompt = data.prompt_text || data.prompt_preview || '';\n                html += `\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">Prompt:</span>\n                        <div class=\"detail-value prompt-text\">${this.escapeHtml(prompt)}</div>\n                    </div>\n                `;\n                break;\n\n            case 'pre_tool':\n            case 'post_tool':\n                const toolName = data.tool_name || 'Unknown tool';\n                html += `\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">Tool:</span>\n                        <span class=\"detail-value\">${toolName}</span>\n                    </div>\n                `;\n                if (data.operation_type) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Operation:</span>\n                            <span class=\"detail-value\">${data.operation_type}</span>\n                        </div>\n                    `;\n                }\n                if (hookType === 'post_tool' && data.duration_ms) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Duration:</span>\n                            <span class=\"detail-value\">${data.duration_ms}ms</span>\n                        </div>\n                    `;\n                }\n                break;\n\n            case 'subagent_start':\n            case 'subagent_stop':\n                const agentType = data.agent_type || data.agent || 'Unknown';\n                html += `\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">Agent:</span>\n                        <span class=\"detail-value\">${agentType}</span>\n                    </div>\n                `;\n                if (hookType === 'subagent_start' && data.prompt) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Task:</span>\n                            <div class=\"detail-value\">${this.escapeHtml(data.prompt)}</div>\n                        </div>\n                    `;\n                }\n                if (hookType === 'subagent_stop' && data.reason) {\n                    html += `\n                        <div class=\"detail-row\">\n                            <span class=\"detail-label\">Reason:</span>\n                            <span class=\"detail-value\">${data.reason}</span>\n                        </div>\n                    `;\n                }\n                break;\n        }\n\n        return html;\n    }\n\n    /**\n     * Format agent event details\n     */\n    formatAgentEventDetails(event) {\n        const data = event.data || {};\n        let html = '';\n\n        if (data.agent_type || data.name) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Agent Type:</span>\n                    <span class=\"detail-value\">${data.agent_type || data.name}</span>\n                </div>\n            `;\n        }\n\n        if (event.subtype) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Action:</span>\n                    <span class=\"detail-value\">${event.subtype}</span>\n                </div>\n            `;\n        }\n\n        return html;\n    }\n\n    /**\n     * Format todo event details\n     */\n    formatTodoEventDetails(event) {\n        const data = event.data || {};\n        let html = '';\n\n        if (data.todos && Array.isArray(data.todos)) {\n            const statusCounts = this.getTodoStatusCounts(data.todos);\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Todo Items:</span>\n                    <span class=\"detail-value\">${data.todos.length} total</span>\n                </div>\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Status:</span>\n                    <span class=\"detail-value\">${statusCounts.completed} completed, ${statusCounts.in_progress} in progress</span>\n                </div>\n            `;\n        }\n\n        return html;\n    }\n\n    /**\n     * Format session event details\n     */\n    formatSessionEventDetails(event) {\n        const data = event.data || {};\n        let html = '';\n\n        if (data.session_id) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Session ID:</span>\n                    <span class=\"detail-value\">${data.session_id}</span>\n                </div>\n            `;\n        }\n\n        if (event.subtype) {\n            html += `\n                <div class=\"detail-row\">\n                    <span class=\"detail-label\">Action:</span>\n                    <span class=\"detail-value\">${event.subtype}</span>\n                </div>\n            `;\n        }\n\n        return html;\n    }\n\n    /**\n     * Format generic event details\n     */\n    formatGenericEventDetails(event) {\n        const data = event.data || {};\n        let html = '';\n\n        // Show basic data properties\n        const basicProps = ['message', 'description', 'value', 'result'];\n        for (let prop of basicProps) {\n            if (data[prop] !== undefined) {\n                let value = data[prop];\n                if (typeof value === 'string' && value.length > 200) {\n                    value = value.substring(0, 200) + '...';\n                }\n                html += `\n                    <div class=\"detail-row\">\n                        <span class=\"detail-label\">${prop}:</span>\n                        <span class=\"detail-value\">${this.escapeHtml(String(value))}</span>\n                    </div>\n                `;\n            }\n        }\n\n        return html;\n    }\n\n    /**\n     * Format event data section\n     */\n    formatEventData(event) {\n        const data = event.data;\n        if (!data || Object.keys(data).length === 0) return '';\n        \n        return `\n            <div class=\"detail-section\">\n                <span class=\"detail-section-title\">Event Data:</span>\n                <pre class=\"event-data-json\">${this.escapeHtml(JSON.stringify(data, null, 2))}</pre>\n            </div>\n        `;\n    }\n\n    /**\n     * Format tool/event parameters\n     */\n    formatParameters(params, title = 'Parameters') {\n        if (!params || Object.keys(params).length === 0) {\n            return `\n                <div class=\"detail-section\">\n                    <span class=\"detail-section-title\">${title}:</span>\n                    <div class=\"no-params\">No parameters</div>\n                </div>\n            `;\n        }\n\n        const paramKeys = Object.keys(params);\n        return `\n            <div class=\"detail-section\">\n                <span class=\"detail-section-title\">${title} (${paramKeys.length}):</span>\n                <div class=\"params-list\">\n                    ${paramKeys.map(key => {\n                        const value = params[key];\n                        const displayValue = this.formatParameterValue(value);\n                        return `\n                            <div class=\"param-item\">\n                                <div class=\"param-key\">${key}:</div>\n                                <div class=\"param-value\">${displayValue}</div>\n                            </div>\n                        `;\n                    }).join('')}\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Format parameter value with appropriate styling\n     */\n    formatParameterValue(value) {\n        if (typeof value === 'string') {\n            if (value.length > 500) {\n                return `<pre class=\"param-text-long\">${this.escapeHtml(value.substring(0, 500) + '...\\n\\n[Content truncated - ' + value.length + ' total characters]')}</pre>`;\n            } else if (value.length > 100) {\n                return `<pre class=\"param-text\">${this.escapeHtml(value)}</pre>`;\n            } else {\n                return `<span class=\"param-text-short\">${this.escapeHtml(value)}</span>`;\n            }\n        } else if (typeof value === 'object' && value !== null) {\n            // Special handling for todos array - display as formatted list instead of raw JSON\n            if (Array.isArray(value) && value.length > 0 && \n                value[0].hasOwnProperty('content') && value[0].hasOwnProperty('status')) {\n                return this.formatTodosAsParameter(value);\n            }\n            \n            try {\n                return `<pre class=\"param-json\">${this.escapeHtml(JSON.stringify(value, null, 2))}</pre>`;\n            } catch (e) {\n                return `<span class=\"param-error\">Error displaying object</span>`;\n            }\n        } else {\n            return `<span class=\"param-primitive\">${this.escapeHtml(String(value))}</span>`;\n        }\n    }\n\n    /**\n     * Format todos array as a parameter value\n     */\n    formatTodosAsParameter(todos) {\n        const statusCounts = this.getTodoStatusCounts(todos);\n        \n        let html = `\n            <div class=\"param-todos\">\n                <div class=\"param-todos-header\">\n                    Array of todo objects (${todos.length} items)\n                </div>\n                <div class=\"param-todos-summary\">\n                    ${statusCounts.completed} completed • ${statusCounts.in_progress} in progress • ${statusCounts.pending} pending\n                </div>\n                <div class=\"param-todos-list\">\n        `;\n        \n        todos.forEach((todo, index) => {\n            const statusIcon = this.getCheckboxIcon(todo.status);\n            const displayText = todo.status === 'in_progress' ? \n                (todo.activeForm || todo.content) : todo.content;\n            const statusClass = this.formatStatusClass(todo.status);\n            \n            html += `\n                <div class=\"param-todo-item ${todo.status}\">\n                    <div class=\"param-todo-checkbox\">\n                        <span class=\"param-checkbox-icon ${statusClass}\">${statusIcon}</span>\n                    </div>\n                    <div class=\"param-todo-text\">\n                        <span class=\"param-todo-content\">${this.escapeHtml(displayText)}</span>\n                        <span class=\"param-todo-status-badge ${statusClass}\">${todo.status.replace('_', ' ')}</span>\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += `\n                </div>\n            </div>\n        `;\n        \n        return html;\n    }\n\n    // ==================== UTILITY METHODS ====================\n\n    /**\n     * Format timestamp for display\n     */\n    formatTimestamp(timestamp) {\n        if (!timestamp) return 'Unknown time';\n        \n        try {\n            const date = new Date(timestamp);\n            if (isNaN(date.getTime())) return 'Invalid date';\n            return date.toLocaleString();\n        } catch (error) {\n            return 'Invalid date';\n        }\n    }\n\n    /**\n     * Format status with appropriate styling\n     */\n    formatStatus(status) {\n        if (!status) return 'unknown';\n        \n        const statusMap = {\n            'active': '🟢 Active',\n            'completed': '✅ Completed', \n            'in_progress': '🔄 In Progress',\n            'pending': '⏳ Pending',\n            'error': '❌ Error',\n            'failed': '❌ Failed'\n        };\n        \n        return statusMap[status] || status;\n    }\n\n    /**\n     * Get CSS class for status styling\n     */\n    formatStatusClass(status) {\n        return `status-${status}`;\n    }\n\n    /**\n     * Get icon for agent type\n     */\n    getAgentIcon(agentName) {\n        const icons = {\n            'PM': '🎯',\n            'Engineer': '🔧',\n            'Engineer Agent': '🔧',\n            'Research': '🔍',\n            'Research Agent': '🔍',\n            'QA': '✅',\n            'QA Agent': '✅',\n            'Architect': '🏗️',\n            'Architect Agent': '🏗️',\n            'Ops': '⚙️',\n            'Ops Agent': '⚙️'\n        };\n        return icons[agentName] || '🤖';\n    }\n\n    /**\n     * Get icon for tool type\n     */\n    getToolIcon(toolName) {\n        const icons = {\n            'Read': '👁️',\n            'Write': '✍️', \n            'Edit': '✏️',\n            'MultiEdit': '📝',\n            'Bash': '💻',\n            'Grep': '🔍',\n            'Glob': '📂',\n            'LS': '📁',\n            'TodoWrite': '📝',\n            'Task': '📋',\n            'WebFetch': '🌐'\n        };\n        return icons[toolName] || '🔧';\n    }\n\n    /**\n     * Get checkbox icon for todo status\n     */\n    getCheckboxIcon(status) {\n        const icons = {\n            'pending': '⏳',\n            'in_progress': '🔄',\n            'completed': '✅'\n        };\n        return icons[status] || '❓';\n    }\n\n    /**\n     * Get icon for file operation type\n     */\n    getOperationIcon(operation) {\n        const icons = {\n            'read': '👁️',\n            'write': '✍️',\n            'edit': '✏️',\n            'delete': '🗑️',\n            'create': '📝',\n            'search': '🔍',\n            'list': '📂',\n            'copy': '📋',\n            'move': '📦',\n            'bash': '💻'\n        };\n        return icons[operation.toLowerCase()] || '📄';\n    }\n\n    /**\n     * Convert tool data to file operation format for better display\n     */\n    convertToolToFileOperation(toolData) {\n        const params = toolData.params || toolData.tool_parameters || {};\n        const filePath = params.file_path || params.path || params.notebook_path;\n        \n        if (!filePath) {\n            return toolData; // Return original if no file path\n        }\n\n        // Create file operation format\n        const operation = {\n            operation: toolData.name.toLowerCase(),\n            timestamp: toolData.timestamp || new Date().toISOString(),\n            agent: 'Activity Tool',\n            sessionId: toolData.sessionId || 'unknown',\n            details: {\n                parameters: params,\n                tool_name: toolData.name,\n                status: toolData.status || 'completed'\n            }\n        };\n\n        return {\n            file_path: filePath,\n            operations: [operation],\n            lastOperation: operation.timestamp,\n            // Preserve original tool data for reference\n            originalTool: toolData\n        };\n    }\n\n    /**\n     * Get todo status counts\n     */\n    getTodoStatusCounts(todos) {\n        const counts = { completed: 0, in_progress: 0, pending: 0 };\n        \n        todos.forEach(todo => {\n            if (counts.hasOwnProperty(todo.status)) {\n                counts[todo.status]++;\n            }\n        });\n        \n        return counts;\n    }\n\n    /**\n     * Escape HTML for safe display\n     */\n    escapeHtml(text) {\n        if (typeof text !== 'string') return '';\n        \n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n\n    /**\n     * Create a collapsible JSON viewer for secondary details\n     * Provides a clean way to show full data without cluttering the main view\n     */\n    createCollapsibleJSON(data, title = 'Full Details') {\n        // Generate unique ID for this collapsible section\n        const sectionId = `json-details-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        \n        // Filter out sensitive or overly verbose properties\n        const cleanData = this.cleanDataForDisplay(data);\n        \n        return `\n            <div class=\"collapsible-json-section\">\n                <button class=\"collapsible-json-toggle\" onclick=\"\n                    const content = document.getElementById('${sectionId}');\n                    const button = this;\n                    if (content.style.display === 'none' || content.style.display === '') {\n                        content.style.display = 'block';\n                        button.classList.add('expanded');\n                        button.innerHTML = '▼ ${title}';\n                    } else {\n                        content.style.display = 'none';\n                        button.classList.remove('expanded');\n                        button.innerHTML = '▶ ${title}';\n                    }\n                \">▶ ${title}</button>\n                <div id=\"${sectionId}\" class=\"collapsible-json-content\" style=\"display: none;\">\n                    <pre class=\"json-viewer\">${this.escapeHtml(JSON.stringify(cleanData, null, 2))}</pre>\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Clean data for display in JSON viewer\n     * Removes circular references and limits string lengths\n     */\n    cleanDataForDisplay(data) {\n        const seen = new WeakSet();\n        \n        return JSON.parse(JSON.stringify(data, (key, value) => {\n            // Handle circular references\n            if (typeof value === 'object' && value !== null) {\n                if (seen.has(value)) {\n                    return '[Circular Reference]';\n                }\n                seen.add(value);\n            }\n            \n            // Truncate very long strings\n            if (typeof value === 'string' && value.length > 1000) {\n                return value.substring(0, 1000) + '... [truncated]';\n            }\n            \n            // Handle functions\n            if (typeof value === 'function') {\n                return '[Function]';\n            }\n            \n            return value;\n        }));\n    }\n\n    // ==================== PUBLIC API METHODS ====================\n\n    /**\n     * Clear the viewer\n     */\n    clear() {\n        if (this.container) {\n            this.container.innerHTML = '';\n        }\n        this.currentData = null;\n        this.currentType = null;\n    }\n\n    /**\n     * Get current displayed data\n     */\n    getCurrentData() {\n        return this.currentData;\n    }\n\n    /**\n     * Get current data type\n     */\n    getCurrentType() {\n        return this.currentType;\n    }\n\n    /**\n     * Check if viewer has data\n     */\n    hasData() {\n        return this.currentData !== null;\n    }\n}\n\n// Export for module use\nexport { UnifiedDataViewer };\nexport default UnifiedDataViewer;\n\n// Make globally available for non-module usage\nwindow.UnifiedDataViewer = UnifiedDataViewer;"],"names":["UnifiedDataViewer","constructor","containerId","this","container","document","getElementById","currentData","currentType","display","data","type","detectType","innerHTML","displayEvent","displayAgent","displayTool","displayTodo","displayInstruction","displaySession","name","params","tool_parameters","convertedData","convertToolToFileOperation","displayFileOperation","displayHook","displayGeneric","console","warn","hook_event_name","event_type","timestamp","agent_name","agentName","status","tool_name","icon","todos","content","activeForm","text","preview","session_id","startTime","lastActivity","file_path","operations","operation","hook_name","subtype","html","formatEventType","formatTimestamp","formatEventDetails","toolName","getToolIcon","command","escapeHtml","createCollapsibleJSON","agentIcon","getAgentIcon","formatStatus","formatStatusClass","tools","length","activeTools","filter","t","completedTools","forEach","tool","currentTask","description","toolIcon","displayTodoWriteTool","old_string","substring","new_string","pattern","path","subagent_type","callCount","statusCounts","getTodoStatusCounts","completed","in_progress","pending","todo","index","statusIcon","getCheckboxIcon","displayText","statusClass","Array","isArray","replace","Object","keys","id","working_directory","git_branch","eventCount","split","pop","map","op","getOperationIcon","agent","workingDirectory","join","formatHookDetails","meaningfulProps","prop","value","String","event","formatAgentEventDetails","formatTodoEventDetails","formatSessionEventDetails","formatGenericEventDetails","hookType","prompt","prompt_text","prompt_preview","operation_type","duration_ms","agent_type","reason","basicProps","formatEventData","JSON","stringify","formatParameters","title","paramKeys","key","formatParameterValue","hasOwnProperty","formatTodosAsParameter","e","date","Date","isNaN","getTime","toLocaleString","error","active","failed","PM","Engineer","Research","QA","Architect","Ops","Read","Write","Edit","MultiEdit","Bash","Grep","Glob","LS","TodoWrite","Task","WebFetch","read","write","edit","delete","create","search","list","copy","move","bash","toLowerCase","toolData","filePath","notebook_path","toISOString","sessionId","details","parameters","lastOperation","originalTool","counts","div","createElement","textContent","sectionId","now","Math","random","toString","substr","cleanData","cleanDataForDisplay","seen","WeakSet","parse","has","add","clear","getCurrentData","getCurrentType","hasData","window"],"mappings":"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"}