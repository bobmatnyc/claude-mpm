#!/usr/bin/env bash
# -*- coding: utf-8 -*-

# claude-mpm-terminal - Terminal wrapper for Claude MPM
#
# WHY: This wrapper script handles all environment setup so users don't need to
# manually configure PYTHONPATH or worry about virtual environments. It provides
# a seamless experience by auto-detecting the project structure and configuring
# the environment before launching the Python terminal app.
#
# DESIGN DECISIONS:
# - Use bash for maximum compatibility across Unix-like systems
# - Auto-detect script location to find project root from any execution context
# - Prefer virtual environment Python if available, fallback to system Python
# - Set PYTHONPATH to include src/ directory for proper module imports
# - Pass all arguments transparently to the Python application
# - Handle edge cases like symlinks and different installation methods

# Exit on error
set -e

# Get the directory where this script is located, resolving symlinks
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Detect if we're running from a symlink and resolve it
if [ -L "${BASH_SOURCE[0]}" ]; then
    SCRIPT_PATH="$(readlink "${BASH_SOURCE[0]}")"
    # If the symlink is relative, make it absolute
    if [[ ! "$SCRIPT_PATH" = /* ]]; then
        SCRIPT_PATH="$SCRIPT_DIR/$SCRIPT_PATH"
    fi
    SCRIPT_DIR="$( cd "$( dirname "$SCRIPT_PATH" )" && pwd )"
fi

# The project root is the directory containing this script
PROJECT_ROOT="$SCRIPT_DIR"

# Verify we're in the right place by checking for key project files
if [ ! -f "$PROJECT_ROOT/setup.py" ] || [ ! -d "$PROJECT_ROOT/src/claude_mpm" ]; then
    echo "Error: Unable to find claude-mpm project structure." >&2
    echo "Expected to find setup.py and src/claude_mpm/ in: $PROJECT_ROOT" >&2
    exit 1
fi

# Set PYTHONPATH to include the src directory
export PYTHONPATH="$PROJECT_ROOT/src${PYTHONPATH:+:$PYTHONPATH}"

# Find the Python interpreter to use
# Priority: 1) Project virtual environment 2) Activated venv 3) System python3
if [ -f "$PROJECT_ROOT/venv/bin/python" ]; then
    PYTHON="$PROJECT_ROOT/venv/bin/python"
elif [ -n "$VIRTUAL_ENV" ] && [ -f "$VIRTUAL_ENV/bin/python" ]; then
    PYTHON="$VIRTUAL_ENV/bin/python"
else
    # Use system python3
    PYTHON="python3"
fi

# Verify Python is available and has required version
if ! command -v "$PYTHON" &> /dev/null; then
    echo "Error: Python interpreter not found: $PYTHON" >&2
    exit 1
fi

# Check Python version (requires 3.8+)
PYTHON_VERSION=$("$PYTHON" -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')
REQUIRED_VERSION="3.8"

if ! "$PYTHON" -c "import sys; exit(0 if sys.version_info >= (3, 8) else 1)"; then
    echo "Error: Python $REQUIRED_VERSION or higher is required (found $PYTHON_VERSION)" >&2
    exit 1
fi

# Launch the terminal application
# Use -m to run as a module, which ensures proper package imports
exec "$PYTHON" -m claude_mpm.terminal_wrapper.terminal_app "$@"